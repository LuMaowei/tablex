{"version":3,"sources":["e:/WebRoot/tablex/packages/site/examples/largeDataEdit.js","e:/WebRoot/tablex/packages/site/examples/largeDataEdit.mdx"],"names":["ButtonGroup","Button","Group","generateData","columns","count","arguments","length","undefined","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","dataIndex","concat","id","parentId","props","columnKey","Object","objectSpread","key","title","width","validator","value","valid","message","editor","index","onchange","ref","react_default","a","createElement","input","defaultValue","onChange","e","defineProperty","target","generateColumns","fixedColumns","Demo","state","data","loading","changedRows","newData","type","this","setState","Fragment","style","padding","textAlign","es_button","onClick","changeRowCount","bind","height","lib","editable","readOnly","rowKey","expandColumnKey","orderNumber","onEditSave","Component","layoutProps","MDXLayout","MDXContent","_ref","components","objectWithoutProperties","index_es","assign","mdxType","index_esm","__position","__code","__scope","Playground","Props","LargeDataEdit","largeDataEdit","isMDXComponent"],"mappings":"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","file":"static/js/examples-large-data-edit.67e5a963.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table } from \"tablex\";\r\nimport { Input, Button } from \"antd\";\r\nconst ButtonGroup = Button.Group;\r\n\r\nconst generateColumns = (count = 10, prefix = \"column-\", props) =>\r\n  new Array(count).fill(0).map((column, columnIndex) => {\r\n    let columnKey = `${prefix}${columnIndex}`;\r\n    return {\r\n      ...props,\r\n      key: columnKey,\r\n      dataIndex: columnKey,\r\n      title: `Column ${columnIndex}`,\r\n      width: 150,\r\n      validator: (value, row) => {\r\n        if (!value) {\r\n          return { valid: false, message: \"\" };\r\n        }\r\n\r\n        return { valid: true, message: \"\" };\r\n      },\r\n      editor: (value, row, index, onchange, ref) => {\r\n        return (\r\n          <Input\r\n            defaultValue={value}\r\n            ref={ref}\r\n            onChange={e => onchange({ [columnKey]: e.target.value })}\r\n          />\r\n        );\r\n      }\r\n    };\r\n  });\r\n\r\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\r\n  new Array(count).fill(0).map((row, rowIndex) => {\r\n    return columns.reduce(\r\n      (rowData, column, columnIndex) => {\r\n        rowData[column.dataIndex] = `Row ${rowIndex} - Col ${columnIndex}`;\r\n\r\n        if (rowIndex % 2 === 0) {\r\n          // rowData.children = [{ id: \"0-children-0\" }];\r\n        }\r\n\r\n        return rowData;\r\n      },\r\n      {\r\n        id: `${prefix}${rowIndex}`,\r\n        parentId: null\r\n      }\r\n    );\r\n  });\r\n\r\nconst columns = generateColumns(10);\r\n\r\nlet fixedColumns = columns.map((column, columnIndex) => {\r\n  let fixed;\r\n  if (columnIndex < 2) fixed = \"left\";\r\n  if (columnIndex > 8) fixed = \"right\";\r\n\r\n  return { ...column };\r\n});\r\n\r\nclass Demo extends Component {\r\n  state = {\r\n    data: [],\r\n    loading: false\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  onEditSave(changedRows, newData, type) {\r\n    this.setState({\r\n      data: newData\r\n    });\r\n  }\r\n\r\n  changeRowCount(count = 1) {\r\n    count = count * 1000;\r\n    this.setState({ loading: true });\r\n    const data = generateData(columns, count);\r\n    this.setState({ data, loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ padding: \"5px 0\", textAlign: \"right\" }}>\r\n          <ButtonGroup>\r\n            <Button onClick={this.changeRowCount.bind(this, 10)}>\r\n              10K rows\r\n            </Button>\r\n            <Button onClick={this.changeRowCount.bind(this, 30)}>\r\n              30K rows\r\n            </Button>\r\n            <Button onClick={this.changeRowCount.bind(this, 50)}>\r\n              50K rows\r\n            </Button>\r\n            <Button onClick={this.changeRowCount.bind(this, 80)}>\r\n              80K rows\r\n            </Button>\r\n            <Button onClick={this.changeRowCount.bind(this, 100)}>\r\n              100K rows\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n        <div style={{ height: 460 }}>\r\n          <Table\r\n            editable={true}\r\n            readOnly={false}\r\n            rowKey=\"id\"\r\n            expandColumnKey=\"column-1\"\r\n            columns={fixedColumns}\r\n            data={this.state.data}\r\n            orderNumber={true}\r\n            onEditSave={this.onEditSave.bind(this)}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport LargeDataEdit from \"./largeDataEdit\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"large-data-with-editable\"\n    }}>{`Large data with editable`}</h2>\n    <Playground __position={0} __code={'<LargeDataEdit />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      LargeDataEdit\n    }} style={{\n      height: 500\n    }} mdxType=\"Playground\">\n  <LargeDataEdit mdxType=\"LargeDataEdit\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}