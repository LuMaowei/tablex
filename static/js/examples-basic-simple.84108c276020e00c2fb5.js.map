{"version":3,"sources":["e:/WebRoot/tablex/packages/site/examples/Basic/Simple.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_8__","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","style","height","_React$Component","Demo","_this","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","columns","dataIndex","title","key","width","align","data","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","generateData","state","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","value","count","arguments","length","undefined","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","parentId","_this$state","tablex__WEBPACK_IMPORTED_MODULE_9___default","a","rowKey","React","Component","_React$Component2","_this2","_this$state2","orderNumber","_React$Component3","_this3","forEach","d","children","_this$state3","selectMode","resizable","fixed","render","index","extra","_extra$orders","orders","join","_React$Component4","_this4","_this$state4","rowHeight","_React$Component5","_this5","current","pageSize","total","pageIndex","setState","_this$state5","pagination","onPageChange","bind","onRefresh","_React$Component6","_this6","_this$state6","_React$Component7","_this7","_this$state7","headerRowHeight","_React$Component8","_this8","_this$state8","showHeader","_React$Component9","_this9","_this$state9","bordered","striped","hoverable","_React$Component10","_this10","_this$state10","checkStrictly","_React$Component11","_this11","_this$state11","isMDXComponent"],"mappings":"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","file":"static/js/examples-basic-simple.708c0e6a.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"tablex\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return <Table rowKey=\\\"id\\\" columns={columns} data={data} />\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"ordernumber\"\n    }}>{`orderNumber`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} orderNumber={true} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-ordernumber-column\"\n    }}>{`custom orderNumber column`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          align: \\'center\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n          width: 200,\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data.forEach(d => {\\n        d.children = this.generateData(columns, 5, \\'children-\\' + d.id)\\n      })\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={{\\n            width: 100,\\n            title: \\'No.\\',\\n            align: \\'left\\',\\n            resizable: true,\\n            fixed: \\'left\\',\\n            render: function(value, row, index, extra) {\\n              let { orders = [] } = extra\\n              return orders.join(\\'-\\')\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            width: 200\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            align: \"center\",\n            width: 200\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\",\n            width: 200\n          }];\n          let data = this.generateData(columns, 20);\n          data.forEach(d => {\n            d.children = this.generateData(columns, 5, \"children-\" + d.id);\n          });\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={{\n            width: 100,\n            title: \"No.\",\n            align: \"left\",\n            resizable: true,\n            fixed: \"left\",\n            render: function (value, row, index, extra) {\n              let {\n                orders = []\n              } = extra;\n              return orders.join(\"-\");\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"rowheight\"\n    }}>{`rowHeight`}</h2>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          rowHeight={(row, index) => {\\n            if (index % 2 === 0) {\\n              return 80\\n            }\\n            return 30\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} rowHeight={(row, index) => {\n            if (index % 2 === 0) {\n              return 80;\n            }\n\n            return 30;\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"pagination\"\n    }}>{`Pagination`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n        current: 1,\\n        pageSize: 10,\\n        total: data.length,\\n      }\\n    }\\n    onPageChange(pageIndex, pageSize) {\\n      this.setState({\\n        current: pageIndex,\\n        pageSize,\\n      })\\n    }\\n    onRefresh(pageIndex, pageSize) {\\n      this.setState({\\n        current: pageIndex,\\n        pageSize,\\n      })\\n    }\\n    render() {\\n      let { columns, data, current, pageSize, total } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          pagination={{\\n            current,\\n            pageSize,\\n            total,\\n            onPageChange: this.onPageChange.bind(this),\\n            onRefresh: this.onRefresh.bind(this),\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns,\n            current: 1,\n            pageSize: 10,\n            total: data.length\n          };\n        }\n\n        onPageChange(pageIndex, pageSize) {\n          this.setState({\n            current: pageIndex,\n            pageSize\n          });\n        }\n\n        onRefresh(pageIndex, pageSize) {\n          this.setState({\n            current: pageIndex,\n            pageSize\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data,\n            current,\n            pageSize,\n            total\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} pagination={{\n            current,\n            pageSize,\n            total,\n            onPageChange: this.onPageChange.bind(this),\n            onRefresh: this.onRefresh.bind(this)\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"multi-header\"\n    }}>{`multi header`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          key: \\'column-group-1\\',\\n          title: \\'column group\\',\\n          children: [\\n            {\\n              dataIndex: \\'column-1\\',\\n              key: \\'column-1\\',\\n              title: \\'column-1\\',\\n              width: 100,\\n            },\\n            {\\n              dataIndex: \\'column-2\\',\\n              key: \\'column-2\\',\\n              title: \\'column-2\\',\\n              width: 100,\\n              children: [\\n                {\\n                  dataIndex: \\'column-3\\',\\n                  key: \\'column-3\\',\\n                  title: \\'column-3\\',\\n                  width: 100,\\n                },\\n                {\\n                  dataIndex: \\'column-4\\',\\n                  key: \\'column-4\\',\\n                  title: \\'column-4\\',\\n                  width: 100,\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} orderNumber={true} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            key: \"column-group-1\",\n            title: \"column group\",\n            children: [{\n              dataIndex: \"column-1\",\n              key: \"column-1\",\n              title: \"column-1\",\n              width: 100\n            }, {\n              dataIndex: \"column-2\",\n              key: \"column-2\",\n              title: \"column-2\",\n              width: 100,\n              children: [{\n                dataIndex: \"column-3\",\n                key: \"column-3\",\n                title: \"column-3\",\n                width: 100\n              }, {\n                dataIndex: \"column-4\",\n                key: \"column-4\",\n                title: \"column-4\",\n                width: 100\n              }]\n            }]\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"headerrowheight\"\n    }}>{`headerRowHeight`}</h2>\n    <Playground __position={6} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          key: \\'column-group-1\\',\\n          title: \\'column group\\',\\n          children: [\\n            {\\n              dataIndex: \\'column-1\\',\\n              key: \\'column-1\\',\\n              title: \\'column-1\\',\\n              width: 100,\\n            },\\n            {\\n              dataIndex: \\'column-2\\',\\n              key: \\'column-2\\',\\n              title: \\'column-2\\',\\n              width: 100,\\n              children: [\\n                {\\n                  dataIndex: \\'column-3\\',\\n                  key: \\'column-3\\',\\n                  title: \\'column-3\\',\\n                  width: 100,\\n                },\\n                {\\n                  dataIndex: \\'column-4\\',\\n                  key: \\'column-4\\',\\n                  title: \\'column-4\\',\\n                  width: 100,\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          orderNumber={true}\\n          headerRowHeight={[30, 50, 70]}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            key: \"column-group-1\",\n            title: \"column group\",\n            children: [{\n              dataIndex: \"column-1\",\n              key: \"column-1\",\n              title: \"column-1\",\n              width: 100\n            }, {\n              dataIndex: \"column-2\",\n              key: \"column-2\",\n              title: \"column-2\",\n              width: 100,\n              children: [{\n                dataIndex: \"column-3\",\n                key: \"column-3\",\n                title: \"column-3\",\n                width: 100\n              }, {\n                dataIndex: \"column-4\",\n                key: \"column-4\",\n                title: \"column-4\",\n                width: 100\n              }]\n            }]\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} headerRowHeight={[30, 50, 70]} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"hide-header\"\n    }}>{`hide header`}</h2>\n    <Playground __position={7} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} showHeader={false} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} showHeader={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"bordered--striped--hoverable\"\n    }}>{`bordered & striped & hoverable`}</h2>\n    <Playground __position={8} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          orderNumber={false}\\n          bordered={false}\\n          striped={false}\\n          hoverable={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={false} bordered={false} striped={false} hoverable={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"tree-data\"\n    }}>{`tree data`}</h2>\n    <Playground __position={9} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          checkStrictly={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} checkStrictly={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"tree-style\"\n    }}>{`tree style`}</h2>\n    <Playground __position={10} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"none\\\"\\n          orderNumber={false}\\n          checkStrictly={false}\\n          showHeader={false}\\n          bordered={false}\\n          striped={false}\\n          hoverable={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"none\" orderNumber={false} checkStrictly={false} showHeader={false} bordered={false} striped={false} hoverable={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}