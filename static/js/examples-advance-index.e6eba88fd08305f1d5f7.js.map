{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/examples/Advance/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","Checkbox","Menu","style","height","columns","dataIndex","title","key","width","align","data","generateData","children","state","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","id","parentId","length","Promise","resolve","setTimeout","arr","setState","rowKey","selectMode","orderNumber","loadChildrenData","bind","React","Component","record","index","extra","frozen","expandedRowKeys","expandRowHeight","expandedRowRender","onExpandedRowsChange","summary","border","text","render","value","type","frozenRender","rowHeight","top","bottom","cellRender","maxWidth","obj","rowSpan","wordBreak","whiteSpace","margin","colSpan","forEach","d","orders","join","item","console","log","menuItemStyle","lineHeight","selectable","onClick","onMenuClick","Item","contextMenu","isMDXComponent"],"mappings":"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","file":"static/js/examples-advance-index.088d6713.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input, Checkbox,Menu } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"用法示例\"\n    }}>{`用法示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"sy-framework/lib/widget/table\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"异步加载子级\"\n    }}>{`异步加载子级`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      data[3].children = []\\n      data[4].children = []\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    loadChildrenData(row) {\\n      if (row.children && row.children.length > 0) {\\n        return\\n      }\\n\\n      return new Promise(resolve => {\\n        setTimeout(() => {\\n          let arr = this.generateData(\\n            this.state.columns,\\n            5,\\n            (prefix = row.id + \\'-children-\\'),\\n          )\\n          row.children = arr\\n          resolve()\\n          this.setState({ data: [...this.state.data] })\\n        }, 500)\\n      })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          loadChildrenData={this.loadChildrenData.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          data[3].children = [];\n          data[4].children = [];\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        loadChildrenData(row) {\n          if (row.children && row.children.length > 0) {\n            return;\n          }\n\n          return new Promise(resolve => {\n            setTimeout(() => {\n              let arr = this.generateData(this.state.columns, 5, prefix = row.id + \"-children-\");\n              row.children = arr;\n              resolve();\n              this.setState({\n                data: [...this.state.data]\n              });\n            }, 500);\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} loadChildrenData={this.loadChildrenData.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义展开行渲染\"\n    }}>{`自定义展开行渲染`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] = \\'id-\\' + rowIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 10)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    expandedRowRender(record, index, extra) {\\n      if (extra.frozen === \\'none\\') {\\n        return \\'expandedRowRender\\'\\n      }\\n      return null\\n    }\\n    onExpandedRowsChange(arr) {\\n      this.setState({ expandedRowKeys: arr })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          expandRowHeight={100}\\n          expandedRowRender={this.expandedRowRender.bind(this)}\\n          onExpandedRowsChange={this.onExpandedRowsChange.bind(this)}\\n          data={data}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = \"id-\" + rowIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 10);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        expandedRowRender(record, index, extra) {\n          if (extra.frozen === \"none\") {\n            return \"expandedRowRender\";\n          }\n\n          return null;\n        }\n\n        onExpandedRowsChange(arr) {\n          this.setState({\n            expandedRowKeys: arr\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} expandRowHeight={100} expandedRowRender={this.expandedRowRender.bind(this)} onExpandedRowsChange={this.onExpandedRowsChange.bind(this)} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"数据汇总\"\n    }}>{`数据汇总`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          summary={{\\n            style: { border: \\'none\\' },\\n            title: { text: \\'合计:\\', column: \\'id\\' },\\n            data: [\\n              {\\n                \\'column-1\\': \\'min\\',\\n                \\'column-2\\': \\'max\\',\\n                \\'column-3\\': \\'sum\\',\\n                \\'column-4\\': \\'avg\\',\\n              },\\n            ],\\n            render: (value, dataIndex, type, index) => {\\n              return type + \\':\\' + value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} summary={{\n            style: {\n              border: \"none\"\n            },\n            title: {\n              text: \"合计:\",\n              column: \"id\"\n            },\n            data: [{\n              \"column-1\": \"min\",\n              \"column-2\": \"max\",\n              \"column-3\": \"sum\",\n              \"column-4\": \"avg\"\n            }],\n            render: (value, dataIndex, type, index) => {\n              return type + \":\" + value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"固定数据行\"\n    }}>{`固定数据行`}</h2>\n    <p>{`无法同summary共存，summary将会覆盖此配置`}</p>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"single\\\"\\n          orderNumber={false}\\n          frozenRender={{\\n            rowHeight: 40,\\n            rowKey: \\'id\\',\\n            top: [data[0], data[1]],\\n            bottom: [data[0], data[1]],\\n            cellRender: (value, row, index, extra) => {\\n              return value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"single\" orderNumber={false} frozenRender={{\n            rowHeight: 40,\n            rowKey: \"id\",\n            top: [data[0], data[1]],\n            bottom: [data[0], data[1]],\n            cellRender: (value, row, index, extra) => {\n              return value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"行、列合并\"\n    }}>{`行、列合并`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          maxWidth: 300,\\n          width: 150,\\n          align: \\'center\\',\\n          render: (value, row, index) => {\\n            const obj = {\\n              children: value,\\n              props: {},\\n            }\\n            if (index === 6) {\\n              obj.props.rowSpan = 5\\n              obj.children = (\\n                <div\\n                  style={{\\n                    width: 12,\\n                    wordBreak: \\'break-all\\',\\n                    whiteSpace: \\'pre-line\\',\\n                    margin: \\'auto\\',\\n                  }}\\n                >\\n                  行数据合并\\n                </div>\\n              )\\n            }\\n\\n            if (index === 1) {\\n              obj.props.colSpan = 2\\n              obj.children = <div>列数据合并</div>\\n            }\\n\\n            return obj\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            width: 100\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            maxWidth: 300,\n            width: 150,\n            align: \"center\",\n            render: (value, row, index) => {\n              const obj = {\n                children: value,\n                props: {}\n              };\n\n              if (index === 6) {\n                obj.props.rowSpan = 5;\n                obj.children = <div style={{\n                  width: 12,\n                  wordBreak: \"break-all\",\n                  whiteSpace: \"pre-line\",\n                  margin: \"auto\"\n                }}>\n            行数据合并\n          </div>;\n              }\n\n              if (index === 1) {\n                obj.props.colSpan = 2;\n                obj.children = <div>列数据合并</div>;\n              }\n\n              return obj;\n            }\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"通过合并列实现数据分组样式\"\n    }}>{`通过合并列实现数据分组样式`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          render: (value, row, index) => {\\n            if (row.children) {\\n              let obj = {\\n                children: \\'grouped-\\' + value,\\n                props: {\\n                  colSpan: 4,\\n                },\\n              }\\n\\n              return obj\\n            }\\n\\n            return value\\n          },\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          align: \\'center\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data.forEach(d => {\\n        d.children = this.generateData(columns, 5, \\'children-\\' + d.id)\\n      })\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={{\\n            render: function(value, row, index, extra) {\\n              let { orders = [] } = extra\\n              return orders.join(\\'-\\')\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            render: (value, row, index) => {\n              if (row.children) {\n                let obj = {\n                  children: \"grouped-\" + value,\n                  props: {\n                    colSpan: 4\n                  }\n                };\n                return obj;\n              }\n\n              return value;\n            }\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            align: \"center\",\n            width: 100\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 20);\n          data.forEach(d => {\n            d.children = this.generateData(columns, 5, \"children-\" + d.id);\n          });\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={{\n            render: function (value, row, index, extra) {\n              let {\n                orders = []\n              } = extra;\n              return orders.join(\"-\");\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"右键菜单\"\n    }}>{`右键菜单`}</h2>\n    <Playground __position={6} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    onMenuClick({ key, item }) {\\n      console.log(key, item.props.row)\\n    }\\n    contextMenu(row) {\\n      let menuItemStyle = { height: \\'auto\\', lineHeight: \\'normal\\' }\\n      return (\\n        <div>\\n          <Menu selectable={false} onClick={this.onMenuClick}>\\n            <Menu.Item key=\\\"del\\\" style={menuItemStyle} row={row}>\\n              删除行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"copy\\\" style={menuItemStyle} row={row}>\\n              复制行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"cut\\\" style={menuItemStyle} row={row}>\\n              剪切行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"pasteChildren\\\" style={menuItemStyle} row={row}>\\n              粘贴行(下级)\\n            </Menu.Item>\\n            <Menu.Item key=\\\"selectAll\\\" style={menuItemStyle} row={row}>\\n              全选/全否\\n            </Menu.Item>\\n            <Menu.Item key=\\\"expandToggle\\\" style={menuItemStyle} row={row}>\\n              展开/收缩\\n            </Menu.Item>\\n            <Menu.Item key=\\\"export\\\" style={menuItemStyle} row={row}>\\n              导出\\n            </Menu.Item>\\n            <Menu.Item key=\\\"print\\\" style={menuItemStyle} row={row}>\\n              打印\\n            </Menu.Item>\\n          </Menu>\\n        </div>\\n      )\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          contextMenu={this.contextMenu.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        onMenuClick({\n          key,\n          item\n        }) {\n          console.log(key, item.props.row);\n        }\n\n        contextMenu(row) {\n          let menuItemStyle = {\n            height: \"auto\",\n            lineHeight: \"normal\"\n          };\n          return <div>\n    <Menu selectable={false} onClick={this.onMenuClick} mdxType=\"Menu\">\n      <Menu.Item key=\"del\" style={menuItemStyle} row={row}>\n        删除行\n      </Menu.Item>\n      <Menu.Item key=\"copy\" style={menuItemStyle} row={row}>\n        复制行\n      </Menu.Item>\n      <Menu.Item key=\"cut\" style={menuItemStyle} row={row}>\n        剪切行\n      </Menu.Item>\n      <Menu.Item key=\"pasteChildren\" style={menuItemStyle} row={row}>\n        粘贴行(下级)\n      </Menu.Item>\n      <Menu.Item key=\"selectAll\" style={menuItemStyle} row={row}>\n        全选/全否\n      </Menu.Item>\n      <Menu.Item key=\"expandToggle\" style={menuItemStyle} row={row}>\n        展开/收缩\n      </Menu.Item>\n      <Menu.Item key=\"export\" style={menuItemStyle} row={row}>\n        导出\n      </Menu.Item>\n      <Menu.Item key=\"print\" style={menuItemStyle} row={row}>\n        打印\n      </Menu.Item>\n    </Menu>\n  </div>;\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} contextMenu={this.contextMenu.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}