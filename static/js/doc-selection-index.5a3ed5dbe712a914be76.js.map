{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/Selection/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","Checkbox","style","height","columns","dataIndex","title","key","width","align","data","generateData","state","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","id","parentId","rowKey","selectMode","orderNumber","React","Component","selectOnRowClick","current","pageSize","total","disabledSelectKeys","children","checkStrictly","selectionColumn","fixed","attrs","disabled","onChange","e","target","checked","render","index","extra","isMDXComponent"],"mappings":"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","file":"static/js/doc-selection-index.d274e551.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input,Checkbox } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"用法示例\"\n    }}>{`用法示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"sy-framework/lib/widget/table\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"无选择\"\n    }}>{`无选择`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"none\\\"\\n          orderNumber={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"none\" orderNumber={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"单选模式（默认）\"\n    }}>{`单选模式（默认）`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"single\\\"\\n          orderNumber={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"single\" orderNumber={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"多选模式\"\n    }}>{`多选模式`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          selectOnRowClick={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} selectOnRowClick={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"禁止部分行选中\"\n    }}>{`禁止部分行选中`}</h2>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\'\\' + rowIndex + \\'-Col\\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data, current, pageSize, total } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          disabledSelectKeys={[\\n            \\'Row0-Col0\\',\\n            \\'Row1-Col0\\',\\n            \\'Row2-Col0\\',\\n            \\'Row3-Col0\\',\\n            \\'Row4-Col0\\',\\n          ]}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \"\" + rowIndex + \"-Col\" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data,\n            current,\n            pageSize,\n            total\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" disabledSelectKeys={[\"Row0-Col0\", \"Row1-Col0\", \"Row2-Col0\", \"Row3-Col0\", \"Row4-Col0\"]} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"树形数据多选，级联控制半选、选中状态\"\n    }}>{`树形数据多选，级联控制半选、选中状态`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          checkStrictly={true}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} checkStrictly={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义多选框列\"\n    }}>{`自定义多选框列`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          selectionColumn={{\\n            fixed: \\'left\\',\\n            title: attrs => {\\n              return (\\n                <Checkbox\\n                  {...attrs}\\n                  disabled={true}\\n                  onChange={e => {\\n                    attrs.onChange(e.target.checked)\\n                  }}\\n                />\\n              )\\n            },\\n            render: (row, index, extra) => {\\n              return (\\n                <Checkbox\\n                  {...extra}\\n                  onChange={e => {\\n                    extra.onChange(e.target.checked)\\n                  }}\\n                />\\n              )\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} selectionColumn={{\n            fixed: \"left\",\n            title: attrs => {\n              return <Checkbox {...attrs} disabled={true} onChange={e => {\n                attrs.onChange(e.target.checked);\n              }} mdxType=\"Checkbox\" />;\n            },\n            render: (row, index, extra) => {\n              return <Checkbox {...extra} onChange={e => {\n                extra.onChange(e.target.checked);\n              }} mdxType=\"Checkbox\" />;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}