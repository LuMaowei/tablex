{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/components/body.js","e:/WebRoot/tablex/packages/siteCN/doc/components/dnd.js","e:/WebRoot/tablex/packages/siteCN/doc/components/index.mdx"],"names":["DraggableRow","SortableElement","props","DraggableContainer","SortableContainer","className","children","DraggableTableRow","rowData","rowIndex","rowProps","index","data-key","id","DraggableTable","components","body","row","Demo","state","data","columns","dataIndex","key","title","validator","value","valid","message","editor","onchange","ref","defaultValue","onChange","e","target","address","width","count","prefix","Array","fill","map","reduce","column","columnIndex","parentId","generateData","this","setState","newIndex","oldIndex","array","from","to","slice","splice","length","ReactDom","findDOMNode","querySelector","rowKey","expandColumnKey","editable","selectMode","orderNumber","lockAxis","onSortEnd","bind","validateTrigger","distance","helperClass","getContainer","Component","style","useRef","useDrop","accept","hover","item","monitor","console","log","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","collect","isDragging","drag","backend","HTML5Backend","layoutProps","MDXLayout","MDXContent","mdxType","__position","__code","__scope","Playground","Props","Body","Dnd","height","parentName","isMDXComponent"],"mappings":"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","file":"static/js/doc-components-index.acfe66ed.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Table } from \"tablex\";\nimport { Input, Button } from \"antd\";\n\nimport \"./styles.css\";\n\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst DraggableRow = SortableElement(props => {\n  return <div {...props} />;\n});\n\nconst DraggableContainer = SortableContainer(({ className, children }) => {\n  return <div className={className}>{children}</div>;\n});\n\nfunction DraggableTableRow(props) {\n  let { rowData, rowIndex, rowProps } = props;\n  return <DraggableRow {...rowProps} index={rowIndex} data-key={rowData.id} />;\n}\n\nconst DraggableTable = props => {\n  return (\n    <Table\n      {...props}\n      components={{\n        body: ({ className, children }) => {\n          return (\n            <DraggableContainer className={className} {...props}>\n              {children}\n            </DraggableContainer>\n          );\n        },\n        row: DraggableTableRow\n      }}\n    />\n  );\n};\n\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\n  new Array(count).fill(0).map((row, rowIndex) => {\n    return columns.reduce(\n      (rowData, column, columnIndex) => {\n        rowData[column.dataIndex] = `Row ${rowIndex} - Col ${columnIndex}`;\n\n        if (rowIndex === 0) {\n          //rowData.children = [];\n        }\n\n        return rowData;\n      },\n      {\n        id: `${prefix}${rowIndex}`,\n        parentId: null\n      }\n    );\n  });\n\nconst arrayMove = (array, from, to) => {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n};\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let columns = [\n      {\n        dataIndex: \"column-1\",\n        key: \"column-1\",\n        title: \"column-1\",\n        validator: function(value, row) {\n          if (!value) {\n            return { valid: false, message: \"请输入\" };\n          }\n\n          return { valid: true, message: \"false\" };\n        },\n        editor: function(value, row, index, onchange, ref) {\n          return (\n            <Input\n              defaultValue={value}\n              ref={ref}\n              onChange={e =>\n                onchange([\n                  { \"column-1\": e.target.value, id: row.id },\n                  { id: \"3\", address: e.target.value }\n                ])\n              }\n            />\n          );\n        }\n      },\n      {\n        width: 150,\n        dataIndex: \"column-2\",\n        title: \"column-2\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-3\",\n        title: \"column-3\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-4\",\n        title: \"column-4\"\n      }\n    ];\n\n    const data = generateData(columns, 100);\n\n    this.setState({\n      data: data,\n      columns: columns\n    });\n  }\n\n  onSortEnd({ newIndex, oldIndex }) {\n    this.setState(({ data }) => ({\n      data: arrayMove(data, oldIndex, newIndex)\n    }));\n  }\n\n  getContainer() {\n    let el = ReactDom.findDOMNode(this);\n    return el.querySelector(\".tablex-table-body>div\");\n  }\n\n  render() {\n    return (\n      <DraggableTable\n        rowKey=\"id\"\n        expandColumnKey=\"column-1\"\n        editable={true}\n        columns={this.state.columns}\n        selectMode=\"none\"\n        data={this.state.data}\n        orderNumber={true}\n        lockAxis=\"y\"\n        onSortEnd={this.onSortEnd.bind(this)}\n        validateTrigger=\"onChange\"\n        distance={10}\n        helperClass=\"tablex-row-dragging\"\n        getContainer={this.getContainer.bind(this)}\n      />\n    );\n  }\n}\n\nexport default Demo;\n","import React, { Component, useRef } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Table } from \"tablex\";\r\nimport { Input, Button } from \"antd\";\r\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\n\r\nimport \"./styles.css\";\r\n\r\n \r\nconst DraggableRow = ({ id, className, style, index, children, data }) => {\r\n  const ref = useRef(null);\r\n  const [, drop] = useDrop({\r\n    accept: \"card\",\r\n    hover(item, monitor) {\r\n        console.log(\"hover:\",item.data,data)\r\n      if (!ref.current) {\r\n        return;\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return;\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Time to actually perform the action\r\n      // moveCard(dragIndex, hoverIndex)\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex;\r\n    }\r\n  });\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: \"card\", id:data.id,data:data, index },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(drop(ref));\r\n  return (\r\n    <div ref={ref} className={className} style={{ ...style }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n \r\n\r\nfunction DraggableTableRow(props) {\r\n  let { rowData, rowIndex, rowProps } = props;\r\n  return <DraggableRow {...rowProps} data={rowData} index={rowIndex} data-key={rowData.id} />;\r\n}\r\n\r\n \r\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\r\n  new Array(count).fill(0).map((row, rowIndex) => {\r\n    return columns.reduce(\r\n      (rowData, column, columnIndex) => {\r\n        rowData[column.dataIndex] = `Row ${rowIndex} - Col ${columnIndex}`;\r\n\r\n        if (rowIndex === 0) {\r\n          //rowData.children = [];\r\n        }\r\n\r\n        return rowData;\r\n      },\r\n      {\r\n        id: `${prefix}${rowIndex}`,\r\n        parentId: null\r\n      }\r\n    );\r\n  });\r\n\r\nconst arrayMove = (array, from, to) => {\r\n  array = array.slice();\r\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\r\n  return array;\r\n};\r\n\r\nclass Demo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let columns = [\r\n      {\r\n        dataIndex: \"column-1\",\r\n        key: \"column-1\",\r\n        title: \"column-1\",\r\n        validator: function(value, row) {\r\n          if (!value) {\r\n            return { valid: false, message: \"请输入\" };\r\n          }\r\n\r\n          return { valid: true, message: \"false\" };\r\n        },\r\n        editor: function(value, row, index, onchange, ref) {\r\n          return (\r\n            <Input\r\n              defaultValue={value}\r\n              ref={ref}\r\n              onChange={e =>\r\n                onchange([\r\n                  { \"column-1\": e.target.value, id: row.id },\r\n                  { id: \"3\", address: e.target.value }\r\n                ])\r\n              }\r\n            />\r\n          );\r\n        }\r\n      },\r\n      {\r\n        width: 150,\r\n        dataIndex: \"column-2\",\r\n        title: \"column-2\"\r\n      },\r\n      {\r\n        width: 150,\r\n        dataIndex: \"column-3\",\r\n        title: \"column-3\"\r\n      },\r\n      {\r\n        width: 150,\r\n        dataIndex: \"column-4\",\r\n        title: \"column-4\"\r\n      }\r\n    ];\r\n\r\n    const data = generateData(columns, 100);\r\n\r\n    this.setState({\r\n      data: data,\r\n      columns: columns\r\n    });\r\n  }\r\n\r\n  onSortEnd({ newIndex, oldIndex }) {\r\n    this.setState(({ data }) => ({\r\n      data: arrayMove(data, oldIndex, newIndex)\r\n    }));\r\n  }\r\n\r\n  getContainer() {\r\n    let el = ReactDom.findDOMNode(this);\r\n    return el.querySelector(\".tablex-table-body>div\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Table\r\n          rowKey=\"id\"\r\n          expandColumnKey=\"column-1\"\r\n          editable={true}\r\n          columns={this.state.columns}\r\n          selectMode=\"none\"\r\n          data={this.state.data}\r\n          orderNumber={true}\r\n          components={{\r\n            row: DraggableTableRow\r\n          }}\r\n        />\r\n      </DndProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Body from \"./body.js\";\nimport Dnd from \"./dnd.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tablecomponents\"\n    }}>{`Table.components`}</h1>\n    <h2 {...{\n      \"id\": \"行拖动\"\n    }}>{`行拖动`}</h2>\n    <Playground __position={0} __code={'<Body />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Body,\n      Dnd\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n  <Body mdxType=\"Body\" />\n    </Playground>\n    <p><inlineCode parentName=\"p\">{`js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nimport React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Table } from \"tablex\";\nimport { Input, Button } from \"antd\";\n\nimport \"./styles.css\";\n\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst DraggableRow = SortableElement(props => {\n  return <div {...props} />;\n});\n\nconst DraggableContainer = SortableContainer(({ className, children }) => {\n  return <div className={className}>{children}</div>;\n});\n\nfunction DraggableTableRow(props) {\n  let { rowData, rowIndex, rowProps } = props;\n  return <DraggableRow {...rowProps} index={rowIndex} data-key={rowData.id} />;\n}\n\nconst DraggableTable = props => {\n  return (\n    <Table\n      {...props}\n      components={{\n        body: ({ className, children }) => {\n          return (\n            <DraggableContainer className={className} {...props}>\n              {children}\n            </DraggableContainer>\n          );\n        },\n        row: DraggableTableRow\n      }}\n    />\n  );\n};\n\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\n  new Array(count).fill(0).map((row, rowIndex) => {\n    return columns.reduce(\n      (rowData, column, columnIndex) => {\n        rowData[column.dataIndex] = \\`Row \\${rowIndex} - Col \\${columnIndex}\\`;\n\n        if (rowIndex === 0) {\n          //rowData.children = [];\n        }\n\n        return rowData;\n      },\n      {\n        id: \\`\\${prefix}\\${rowIndex}\\`,\n        parentId: null\n      }\n    );\n  });\n\nconst arrayMove = (array, from, to) => {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n};\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let columns = [\n      {\n        dataIndex: \"column-1\",\n        key: \"column-1\",\n        title: \"column-1\",\n        validator: function(value, row) {\n          if (!value) {\n            return { valid: false, message: \"请输入\" };\n          }\n\n          return { valid: true, message: \"false\" };\n        },\n        editor: function(value, row, index, onchange, ref) {\n          return (\n            <Input\n              defaultValue={value}\n              ref={ref}\n              onChange={e =>\n                onchange([\n                  { \"column-1\": e.target.value, id: row.id },\n                  { id: \"3\", address: e.target.value }\n                ])\n              }\n            />\n          );\n        }\n      },\n      {\n        width: 150,\n        dataIndex: \"column-2\",\n        title: \"column-2\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-3\",\n        title: \"column-3\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-4\",\n        title: \"column-4\"\n      }\n    ];\n\n    const data = generateData(columns, 100);\n\n    this.setState({\n      data: data,\n      columns: columns\n    });\n  }\n\n  onSortEnd({ newIndex, oldIndex }) {\n    this.setState(({ data }) => ({\n      data: arrayMove(data, oldIndex, newIndex)\n    }));\n  }\n\n  getContainer() {\n    let el = ReactDom.findDOMNode(this);\n    return el.querySelector(\".tablex-table-body>div\");\n  }\n\n  render() {\n    return (\n      <DraggableTable\n        rowKey=\"id\"\n        expandColumnKey=\"column-1\"\n        editable={true}\n        columns={this.state.columns}\n        selectMode=\"none\"\n        data={this.state.data}\n        orderNumber={true}\n        lockAxis=\"y\"\n        onSortEnd={this.onSortEnd.bind(this)}\n        validateTrigger=\"onChange\"\n        distance={10}\n        helperClass=\"tablex-row-dragging\"\n        getContainer={this.getContainer.bind(this)}\n      />\n    );\n  }\n}\n\nexport default Demo;\n\n\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`styles.css`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`\n.tablex-table-row.tablex-row-dragging {\n  display: flex;\n  width: auto;\n  min-width: auto;\n  background-color: #ffffff;\n  box-shadow: 0 0px 5px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.tablex-table-row.tablex-row-dragging .tablex-table-row-cell {\n  display: flex;\n  flex: 0 0 auto;\n  box-sizing: border-box;\n  align-items: center;\n  position: relative;\n}\n\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}