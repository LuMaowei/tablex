{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/Advance/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","Checkbox","Menu","Button","style","height","columns","dataIndex","title","key","width","align","data","generateData","children","state","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","id","parentId","length","Promise","resolve","setTimeout","arr","rowKey","selectMode","orderNumber","loadChildrenData","bind","React","Component","record","index","extra","frozen","setState","expandedRowKeys","expandRowHeight","expandedRowRender","onExpandedRowsChange","summary","border","text","render","value","type","frozenRender","rowHeight","top","bottom","cellRender","maxWidth","obj","rowSpan","wordBreak","whiteSpace","margin","colSpan","overscanCount","virtual","forEach","d","orders","join","item","console","log","menuItemStyle","lineHeight","selectable","onClick","onMenuClick","Item","contextMenu","hideColumn","columnWidth","columnFixed","hidden","fixed","w","ceil","newFixed","getColumns","header","setColumnWidth","marginLeft","setColumnFixed","isMDXComponent"],"mappings":"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","file":"static/js/doc-advance-index.0531bac0.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input, Checkbox, Menu, Button } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"用法示例\"\n    }}>{`用法示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"tablex\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"异步加载子级\"\n    }}>{`异步加载子级`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      data[3].children = []\\n      data[4].children = []\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    loadChildrenData(row) {\\n      if (row.children && row.children.length > 0) {\\n        return\\n      }\\n\\n      return new Promise(resolve => {\\n        setTimeout(() => {\\n          let arr = this.generateData(\\n            this.state.columns,\\n            5,\\n            (prefix = row.id + \\'-children-\\'),\\n          )\\n          arr[0].children = []\\n          resolve(arr)\\n        }, 500)\\n      })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          loadChildrenData={this.loadChildrenData.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          data[3].children = [];\n          data[4].children = [];\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        loadChildrenData(row) {\n          if (row.children && row.children.length > 0) {\n            return;\n          }\n\n          return new Promise(resolve => {\n            setTimeout(() => {\n              let arr = this.generateData(this.state.columns, 5, prefix = row.id + \"-children-\");\n              arr[0].children = [];\n              resolve(arr);\n            }, 500);\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} loadChildrenData={this.loadChildrenData.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义展开行渲染\"\n    }}>{`自定义展开行渲染`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] = \\'id-\\' + rowIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 10)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    expandedRowRender(record, index, extra) {\\n      if (extra.frozen === \\'none\\') {\\n        return \\'expandedRowRender\\'\\n      }\\n      return null\\n    }\\n    onExpandedRowsChange(arr) {\\n      this.setState({ expandedRowKeys: arr })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          expandRowHeight={100}\\n          expandedRowRender={this.expandedRowRender.bind(this)}\\n          onExpandedRowsChange={this.onExpandedRowsChange.bind(this)}\\n          data={data}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = \"id-\" + rowIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 10);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        expandedRowRender(record, index, extra) {\n          if (extra.frozen === \"none\") {\n            return \"expandedRowRender\";\n          }\n\n          return null;\n        }\n\n        onExpandedRowsChange(arr) {\n          this.setState({\n            expandedRowKeys: arr\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} expandRowHeight={100} expandedRowRender={this.expandedRowRender.bind(this)} onExpandedRowsChange={this.onExpandedRowsChange.bind(this)} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"数据汇总\"\n    }}>{`数据汇总`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          summary={{\\n            style: { border: \\'none\\' },\\n            title: { text: \\'合计:\\', column: \\'id\\' },\\n            data: [\\n              {\\n                \\'column-1\\': \\'min\\',\\n                \\'column-2\\': \\'max\\',\\n                \\'column-3\\': \\'sum\\',\\n                \\'column-4\\': \\'avg\\',\\n              },\\n            ],\\n            render: (value, dataIndex, type, index) => {\\n              return type + \\':\\' + value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} summary={{\n            style: {\n              border: \"none\"\n            },\n            title: {\n              text: \"合计:\",\n              column: \"id\"\n            },\n            data: [{\n              \"column-1\": \"min\",\n              \"column-2\": \"max\",\n              \"column-3\": \"sum\",\n              \"column-4\": \"avg\"\n            }],\n            render: (value, dataIndex, type, index) => {\n              return type + \":\" + value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"固定数据行\"\n    }}>{`固定数据行`}</h2>\n    <p>{`无法同 summary 共存，summary 将会覆盖此配置`}</p>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"single\\\"\\n          orderNumber={false}\\n          frozenRender={{\\n            rowHeight: 40,\\n            rowKey: \\'id\\',\\n            top: [data[0], data[1]],\\n            bottom: [data[0], data[1]],\\n            cellRender: (value, row, index, extra) => {\\n              return value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"single\" orderNumber={false} frozenRender={{\n            rowHeight: 40,\n            rowKey: \"id\",\n            top: [data[0], data[1]],\n            bottom: [data[0], data[1]],\n            cellRender: (value, row, index, extra) => {\n              return value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"行、列合并\"\n    }}>{`行、列合并`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          maxWidth: 300,\\n          width: 150,\\n          align: \\'center\\',\\n          render: (value, row, index) => {\\n            const obj = {\\n              children: value,\\n              props: {},\\n            }\\n            if (index === 6) {\\n              obj.props.rowSpan = 15\\n              obj.children = (\\n                <div\\n                  style={{\\n                    width: 12,\\n                    wordBreak: \\'break-all\\',\\n                    whiteSpace: \\'pre-line\\',\\n                    margin: \\'auto\\',\\n                  }}\\n                >\\n                  行数据合并\\n                </div>\\n              )\\n            }\\n\\n            if (index === 1) {\\n              obj.props.colSpan = 2\\n              obj.children = <div>列数据合并</div>\\n            }\\n\\n            return obj\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 2000)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          overscanCount={15}\\n          virtual={true}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            width: 100\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            maxWidth: 300,\n            width: 150,\n            align: \"center\",\n            render: (value, row, index) => {\n              const obj = {\n                children: value,\n                props: {}\n              };\n\n              if (index === 6) {\n                obj.props.rowSpan = 15;\n                obj.children = <div style={{\n                  width: 12,\n                  wordBreak: \"break-all\",\n                  whiteSpace: \"pre-line\",\n                  margin: \"auto\"\n                }}>\n            行数据合并\n          </div>;\n              }\n\n              if (index === 1) {\n                obj.props.colSpan = 2;\n                obj.children = <div>列数据合并</div>;\n              }\n\n              return obj;\n            }\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 2000);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} overscanCount={15} virtual={true} data={data} selectMode=\"multiple\" orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"通过合并列实现数据分组样式\"\n    }}>{`通过合并列实现数据分组样式`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          render: (value, row, index) => {\\n            if (row.children) {\\n              let obj = {\\n                children: \\'grouped-\\' + value,\\n                props: {\\n                  colSpan: 4,\\n                },\\n              }\\n\\n              return obj\\n            }\\n\\n            return value\\n          },\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          align: \\'center\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data.forEach(d => {\\n        d.children = this.generateData(columns, 5, \\'children-\\' + d.id)\\n      })\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={{\\n            render: function(value, row, index, extra) {\\n              let { orders = [] } = extra\\n              return orders.join(\\'-\\')\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            render: (value, row, index) => {\n              if (row.children) {\n                let obj = {\n                  children: \"grouped-\" + value,\n                  props: {\n                    colSpan: 4\n                  }\n                };\n                return obj;\n              }\n\n              return value;\n            }\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            align: \"center\",\n            width: 100\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 20);\n          data.forEach(d => {\n            d.children = this.generateData(columns, 5, \"children-\" + d.id);\n          });\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={{\n            render: function (value, row, index, extra) {\n              let {\n                orders = []\n              } = extra;\n              return orders.join(\"-\");\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"右键菜单\"\n    }}>{`右键菜单`}</h2>\n    <Playground __position={6} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    onMenuClick({ key, item }) {\\n      console.log(key, item.props.row)\\n    }\\n    contextMenu(row) {\\n      let menuItemStyle = { height: \\'auto\\', lineHeight: \\'normal\\' }\\n      return (\\n        <div>\\n          <Menu selectable={false} onClick={this.onMenuClick}>\\n            <Menu.Item key=\\\"del\\\" style={menuItemStyle} row={row}>\\n              删除行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"copy\\\" style={menuItemStyle} row={row}>\\n              复制行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"cut\\\" style={menuItemStyle} row={row}>\\n              剪切行\\n            </Menu.Item>\\n            <Menu.Item key=\\\"pasteChildren\\\" style={menuItemStyle} row={row}>\\n              粘贴行(下级)\\n            </Menu.Item>\\n            <Menu.Item key=\\\"selectAll\\\" style={menuItemStyle} row={row}>\\n              全选/全否\\n            </Menu.Item>\\n            <Menu.Item key=\\\"expandToggle\\\" style={menuItemStyle} row={row}>\\n              展开/收缩\\n            </Menu.Item>\\n            <Menu.Item key=\\\"export\\\" style={menuItemStyle} row={row}>\\n              导出\\n            </Menu.Item>\\n            <Menu.Item key=\\\"print\\\" style={menuItemStyle} row={row}>\\n              打印\\n            </Menu.Item>\\n          </Menu>\\n        </div>\\n      )\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          contextMenu={this.contextMenu.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        onMenuClick({\n          key,\n          item\n        }) {\n          console.log(key, item.props.row);\n        }\n\n        contextMenu(row) {\n          let menuItemStyle = {\n            height: \"auto\",\n            lineHeight: \"normal\"\n          };\n          return <div>\n    <Menu selectable={false} onClick={this.onMenuClick} mdxType=\"Menu\">\n      <Menu.Item key=\"del\" style={menuItemStyle} row={row}>\n        删除行\n      </Menu.Item>\n      <Menu.Item key=\"copy\" style={menuItemStyle} row={row}>\n        复制行\n      </Menu.Item>\n      <Menu.Item key=\"cut\" style={menuItemStyle} row={row}>\n        剪切行\n      </Menu.Item>\n      <Menu.Item key=\"pasteChildren\" style={menuItemStyle} row={row}>\n        粘贴行(下级)\n      </Menu.Item>\n      <Menu.Item key=\"selectAll\" style={menuItemStyle} row={row}>\n        全选/全否\n      </Menu.Item>\n      <Menu.Item key=\"expandToggle\" style={menuItemStyle} row={row}>\n        展开/收缩\n      </Menu.Item>\n      <Menu.Item key=\"export\" style={menuItemStyle} row={row}>\n        导出\n      </Menu.Item>\n      <Menu.Item key=\"print\" style={menuItemStyle} row={row}>\n        打印\n      </Menu.Item>\n    </Menu>\n  </div>;\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} contextMenu={this.contextMenu.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"动态控制列属性\"\n    }}>{`动态控制列属性`}</h2>\n    <Playground __position={7} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      let data = this.generateData([], 50)\\n\\n      this.state = {\\n        data: data,\\n      }\\n    }\\n    getColumns() {\\n      let { hideColumn, columnWidth, columnFixed } = this.state\\n      let columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          hidden: !!hideColumn,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: columnWidth ? columnWidth : 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n          fixed: columnFixed ? columnFixed : false,\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      return columns\\n    }\\n    hideColumn() {\\n      this.setState({ hideColumn: !this.state.hideColumn })\\n    }\\n    setColumnWidth() {\\n      let w = Math.ceil(Math.random(9) * 100) + 100\\n      this.setState({ columnWidth: w })\\n    }\\n    setColumnFixed() {\\n      let fixed = this.state.columnFixed || false\\n      let newFixed = false\\n      if (fixed === \\'left\\') {\\n        newFixed = \\'right\\'\\n      } else if (fixed === \\'right\\') {\\n        newFixed = false\\n      } else {\\n        newFixed = \\'left\\'\\n      }\\n      this.setState({ columnFixed: newFixed })\\n    }\\n    render() {\\n      let { data } = this.state\\n      let columns = this.getColumns()\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          header={() => {\\n            return (\\n              <div>\\n                <Button onClick={this.hideColumn.bind(this)}>\\n                  显示/隐藏列\\n                </Button>\\n                <Button\\n                  onClick={this.setColumnWidth.bind(this)}\\n                  style={{ marginLeft: 5 }}\\n                >\\n                  控制列宽\\n                </Button>\\n                <Button\\n                  onClick={this.setColumnFixed.bind(this)}\\n                  style={{ marginLeft: 5 }}\\n                >\\n                  控制列固定\\n                </Button>\\n              </div>\\n            )\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox,\n      Menu,\n      Button\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          let data = this.generateData([], 50);\n          this.state = {\n            data: data\n          };\n        }\n\n        getColumns() {\n          let {\n            hideColumn,\n            columnWidth,\n            columnFixed\n          } = this.state;\n          let columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            hidden: !!hideColumn,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: columnWidth ? columnWidth : 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\",\n            fixed: columnFixed ? columnFixed : false\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          return columns;\n        }\n\n        hideColumn() {\n          this.setState({\n            hideColumn: !this.state.hideColumn\n          });\n        }\n\n        setColumnWidth() {\n          let w = Math.ceil(Math.random(9) * 100) + 100;\n          this.setState({\n            columnWidth: w\n          });\n        }\n\n        setColumnFixed() {\n          let fixed = this.state.columnFixed || false;\n          let newFixed = false;\n\n          if (fixed === \"left\") {\n            newFixed = \"right\";\n          } else if (fixed === \"right\") {\n            newFixed = false;\n          } else {\n            newFixed = \"left\";\n          }\n\n          this.setState({\n            columnFixed: newFixed\n          });\n        }\n\n        render() {\n          let {\n            data\n          } = this.state;\n          let columns = this.getColumns();\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} header={() => {\n            return <div>\n       <Button onClick={this.hideColumn.bind(this)} mdxType=\"Button\">显示/隐藏列</Button>\n        <Button onClick={this.setColumnWidth.bind(this)} style={{\n                marginLeft: 5\n              }} mdxType=\"Button\">控制列宽</Button>\n        <Button onClick={this.setColumnFixed.bind(this)} style={{\n                marginLeft: 5\n              }} mdxType=\"Button\">控制列固定</Button>\n     </div>;\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}