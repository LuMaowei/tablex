{"version":3,"sources":["e:/WebRoot/tablex/packages/site/types/Column.js","e:/WebRoot/tablex/packages/site/types/Table.js","e:/WebRoot/tablex/packages/site/types/Selection.js","e:/WebRoot/tablex/packages/site/types/Expandable.js","e:/WebRoot/tablex/packages/site/types/Editable.js","e:/WebRoot/tablex/packages/site/types/Other.js","e:/WebRoot/tablex/packages/site/examples/props.mdx"],"names":["Column","react_default","a","createElement","defaultProps","title","width","undefined","key","dataIndex","resizable","Table","props","rowKey","columns","data","orderNumber","showHeader","striped","bordered","rowHeight","Selection","selectMode","rowSelectClassName","defaultSelectedRowKeys","disabledSelectKeys","checkStrictly","Expandable","expandColumnKey","expandRowHeight","defaultExpandedRowKeys","Editable","editable","readOnly","editTools","editToolsConfig","position","itemStyle","marginLeft","editText","editIcon","addText","addIcon","deleteText","deleteIcon","okText","okIcon","cancelText","cancelIcon","defaultAddCount","isAppend","validateTrigger","validateDelay","allowSaveEmpty","dataControled","alwaysValidate","Other","pagination","loading","columnDropMenu","layoutProps","MDXLayout","MDXContent","_ref","components","Object","objectWithoutProperties","index_es","assign","mdxType","id","index_esm","of","isMDXComponent"],"mappings":"yXAGMA,EAAS,WACb,OAAOC,EAAAC,EAAAC,cAAA,aAGTH,EAAOI,aAAe,CACpBC,MAAO,GACPC,WAAOC,EACPC,IAAK,GACLC,UAAW,GACXC,WAAW,GA+CEV,0KCrDf,IAAMW,EAAQ,SAAAC,GACZ,OAAOX,EAAAC,EAAAC,cAAA,MAASS,IAGlBD,EAAMP,aAAe,CACnBS,OAAQ,MACRC,QAAS,GACTC,KAAM,GACNC,aAAa,EACbC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,UAAW,IAwDET,wKCvEf,IAAMU,EAAY,WAChB,OAAOpB,EAAAC,EAAAC,cAAA,aAGTkB,EAAUjB,aAAe,CACvBkB,WAAY,SACZC,mBAAoB,wBACpBC,uBAAwB,GACxBC,mBAAoB,GACpBC,eAAe,GAsCFL,gLC/Cf,IAAMM,EAAa,WACjB,OAAO1B,EAAAC,EAAAC,cAAA,aAGTwB,EAAWvB,aAAe,CACxBwB,gBAAiB,GACjBC,gBAAiB,IACjBC,uBAAwB,IAoCXH,kLC3Cf,IAAMI,EAAW,WACf,OAAO9B,EAAAC,EAAAC,cAAA,aAGT4B,EAAS3B,aAAe,CACtB4B,UAAU,EACVC,UAAU,EACVC,UAAW,CAAC,OAAQ,OACpBC,gBAAiB,CACfC,SAAU,SACVC,UAAW,CAAEC,WAAY,OACzBC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,OAAQ,GACRC,WAAY,GACZC,WAAY,IAEdC,gBAAiB,EACjBC,UAAU,EACVC,gBAAiB,SACjBC,cAAe,IACfC,gBAAgB,EAChBC,eAAe,EACfC,gBAAgB,GA8DHxB,8KC1Ff,IAAMyB,EAAQ,WACZ,OAAOvD,EAAAC,EAAAC,cAAA,aAGTqD,EAAMpD,aAAe,CACnBqD,YAAY,EACZC,SAAS,EACTxC,SAAS,EACTyC,gBAAgB,GAuDHH,8MCtDf,IAKMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGpD,EACFqD,OAAAC,EAAA,EAAAD,CAAAF,EAAA,gBACD,OAAOE,OAAAE,EAAA,EAAAF,CAACJ,EAADI,OAAAG,OAAA,GAAeR,EAAiBhD,EAAhC,CAAuCoD,WAAYA,EAAYK,QAAQ,cAI5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAI7D,EAAO0D,QAAQ,UAC1BJ,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAIhB,EAAOa,QAAQ,UAC1BJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAInD,EAAWgD,QAAQ,UAC9BJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAI7C,EAAY0C,QAAQ,UAC/BJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,YADR,YAGAL,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAIzC,EAAUsC,QAAQ,UAC7BJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAACM,EAAA,EAAD,CAAOC,GAAIxE,EAAQqE,QAAQ,oLAK/BP,EAAWW,gBAAiB","file":"static/js/examples-props.542e8381.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Column = () => {\r\n  return <div />;\r\n};\r\n\r\nColumn.defaultProps = {\r\n  title: \"\",\r\n  width: undefined,\r\n  key: \"\",\r\n  dataIndex: \"\",\r\n  resizable: true\r\n};\r\n\r\nColumn.propTypes = {\r\n  /** 列标题 */\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  /** 列标题自定义渲染，优先级高于title，但是不会覆盖column dropmenu下的title */\r\n  titleRender: PropTypes.func,\r\n  /** 列对齐方式 */\r\n  align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\r\n  /** 列标题对齐方式 */\r\n  halign: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\r\n  /** 最小列宽 */\r\n  minWidth: PropTypes.number,\r\n  /** 列宽 */\r\n  width: PropTypes.number.isRequired,\r\n  /** 列唯一key，如若不设置，将会以dataIndex作为唯一key */\r\n  key: PropTypes.string.isRequired,\r\n  /** 列数据字段 */\r\n  dataIndex: PropTypes.string,\r\n  /** 冻结列 */\r\n  fixed: PropTypes.oneOf([\"left\", \"right\"]),\r\n  /** 是否可拖动宽度 */\r\n  resizable: PropTypes.bool,\r\n  /** 列自定义渲染 */\r\n  render: PropTypes.func,\r\n  /** 编辑列验证  (value,row,rowIndex) => React.Element ;\r\n   */\r\n  validator: PropTypes.func,\r\n  /** 编辑列控件 (value:any,row:object,rowIndex:number,onchange:func,ref:func,validate:func) => React.Element ;\r\n   */\r\n  editor: PropTypes.func,\r\n\r\n  /** 列是否隐藏 */\r\n  hidden: PropTypes.bool,\r\n\r\n  /** 编辑时列是否可见 */\r\n  editingVisible: PropTypes.bool,\r\n\r\n  /** 列是否可配置属性 */\r\n  settable: PropTypes.bool,\r\n\r\n  /** 列是否显示列属性下拉菜单 */\r\n  dropMenu: PropTypes.bool\r\n\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * 表格组件\r\n */\r\nconst Table = props => {\r\n  return <div {...props} />;\r\n};\r\n\r\nTable.defaultProps = {\r\n  rowKey: \"key\",\r\n  columns: [],\r\n  data: [],\r\n  orderNumber: false,\r\n  showHeader: true,\r\n  striped: true,\r\n  bordered: true,\r\n  rowHeight: 40\r\n};\r\n\r\nTable.propTypes = {\r\n  /** 数据行主键字段\r\n   */\r\n  rowKey: PropTypes.string.isRequired,\r\n\r\n\r\n  /**\r\n   * 表格数据\r\n   */\r\n  data: PropTypes.array.isRequired,\r\n\r\n  /** 表格列 */\r\n  columns: PropTypes.array,\r\n\r\n  /** 额外前置添加的列 */\r\n  prependColumns: PropTypes.array,\r\n\r\n  /** 行高 */\r\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n\r\n  /** table最小高度，虚拟加载的表格依赖外部区域的高度，如果未探测到外部高度，将使用此高度 */\r\n  minHeight: PropTypes.number,\r\n\r\n  /** 自定义行样式 */\r\n  rowClassName: PropTypes.func,\r\n\r\n  /** 是否显示表头 */\r\n  showHeader: PropTypes.bool,\r\n\r\n  /** 是否显示边框 */\r\n  bordered: PropTypes.bool,\r\n\r\n  /** 鼠标hover样式 */\r\n  hoverable: PropTypes.bool,\r\n\r\n  /**\r\n   * 覆盖table元素，如：components:{row:func}\r\n   */\r\n  components: PropTypes.object,\r\n\r\n  /** 获取数据滚动区域ref */\r\n  scrollRef: PropTypes.func,\r\n\r\n  /** 获取内部表格ref */\r\n  innerRef: PropTypes.func,\r\n\r\n  /** 自定义行内渲染 */\r\n  rowRender: PropTypes.func,\r\n\r\n  /** 自定义行属性，可处理行事件 */\r\n  onRow: PropTypes.func\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Selection = () => {\r\n  return <div />;\r\n};\r\n\r\nSelection.defaultProps = {\r\n  selectMode: \"single\",\r\n  rowSelectClassName: \"tablex__row--selected\",\r\n  defaultSelectedRowKeys: [],\r\n  disabledSelectKeys: [],\r\n  checkStrictly: true\r\n};\r\n\r\nSelection.propTypes = {\r\n  /** 行选中时的样式类名 */\r\n  rowSelectClassName: PropTypes.string,\r\n  /** 选择模式：多选 单选 不可选择 */\r\n  selectMode: PropTypes.oneOf([\"multiple\", \"single\", \"none\"]),\r\n\r\n  /** 复选列配置 */\r\n  selectionColumn: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 默认选中的行键值 */\r\n  defaultSelectedRowKeys: PropTypes.array,\r\n\r\n  /** 选中的行键值 */\r\n  selectedRowKeys: PropTypes.array,\r\n  /** 将被禁用选择的行key */\r\n  disabledSelectKeys: PropTypes.array,\r\n  /**\r\n   * 行选择事件\r\n   *  (selectedKeys,selectedRows,triggerKey) => void\r\n   * */\r\n  onSelectChange: PropTypes.func,\r\n\r\n  /** 行单选事件 */\r\n  onSelect: PropTypes.func,\r\n  /** 行单选取消事件 */\r\n  onUnSelect: PropTypes.func,\r\n  /** 全选事件 */\r\n  onSelectAll: PropTypes.func,\r\n  /** 取消全选事件 */\r\n  onUnSelectAll: PropTypes.func,\r\n\r\n  /** 多选模式是否级联控制checkbox选中状态 */\r\n  checkStrictly: PropTypes.bool\r\n};\r\n\r\nexport default Selection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Expandable = () => {\r\n  return <div />;\r\n};\r\n\r\nExpandable.defaultProps = {\r\n  expandColumnKey: \"\",\r\n  expandRowHeight: 100,\r\n  defaultExpandedRowKeys: []\r\n};\r\n\r\nExpandable.propTypes = {\r\n  /** 展开行渲染 */\r\n  expandedRowRender: PropTypes.func,\r\n\r\n  /** 展开行高度 */\r\n  expandRowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n\r\n  /** 展开按钮所在的列 */\r\n  expandColumnKey: PropTypes.string,\r\n\r\n  /** 默认展开的行 */\r\n  defaultExpandedRowKeys: PropTypes.array,\r\n\r\n  /** 展开的行键值 */\r\n  expandedRowKeys: PropTypes.array,\r\n  /**\r\n   * 行展开事件\r\n   * (expandedRowKeys:Array) => void\r\n   * */\r\n  onExpandedRowsChange: PropTypes.func,\r\n\r\n  /**\r\n   * 点击展开图标时触发\r\n   */\r\n  onExpand: PropTypes.func,\r\n\r\n  /**\r\n   * 展开时加载children的方法\r\n   * (row:object) => Promise\r\n   * */\r\n  loadChildrenData: PropTypes.func\r\n};\r\n\r\nexport default Expandable;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Editable = () => {\r\n  return <div />;\r\n};\r\n\r\nEditable.defaultProps = {\r\n  editable: false,\r\n  readOnly: false,\r\n  editTools: [\"edit\", \"add\"],\r\n  editToolsConfig: {\r\n    position: \"bottom\",\r\n    itemStyle: { marginLeft: \"5px\" },\r\n    editText: \"\",\r\n    editIcon: \"\",\r\n    addText: \"\",\r\n    addIcon: \"\",\r\n    deleteText: \"\",\r\n    deleteIcon: \"\",\r\n    okText: \"\",\r\n    okIcon: \"\",\r\n    cancelText: \"\",\r\n    cancelIcon: \"\"\r\n  },\r\n  defaultAddCount: 1,\r\n  isAppend: false,\r\n  validateTrigger: \"onSave\",\r\n  validateDelay: 300,\r\n  allowSaveEmpty: false,\r\n  dataControled: false,\r\n  alwaysValidate: false\r\n};\r\n\r\nEditable.propTypes = {\r\n  /** 是否允许编辑 */\r\n  editable: PropTypes.bool,\r\n  /** 是否只读模式，只读模式下，将无法编辑，且无法触发选择事件 */\r\n  readOnly: false,\r\n  /** 工具栏，工具按钮 ['edit', 'add','delete',{icon:\"\",text:\"\",props:{},handler:Function},Function] addSingle:单行新增 */\r\n  editTools: PropTypes.array,\r\n  /** 工具栏，工具按钮属性配置{ position: \"bottom\", itemStyle: { marginRight: \"5px\" }, editText: \"\", editIcon: \"\", addText: \"\", addIcon: \"\", deleteText: \"\", deleteIcon: \"\", okText: \"\", okIcon: \"\", cancelText: \"\", cancelIcon: \"\" } */\r\n  editToolsConfig: PropTypes.object,\r\n  /** 新增行时，是追加，还是清空当前页数据 */\r\n  isAppend: PropTypes.bool,\r\n  /** 新增行时的默认条数 */\r\n  defaultAddCount: PropTypes.number,\r\n\r\n  /** 编辑确定事件 (changedRows,newRows,editType)=>void\r\n   * @param {Array} changedRows-改变的数据行\r\n   * @param {Array} newRows-改变后最新的数据\r\n   * @param {string} editType-编辑类型;\"edit\":编辑;\"add\":新增;\"delete\":删除\r\n   */\r\n  onEditSave: PropTypes.func,\r\n  /** 当没有改变行数据时，是否仍然执行onEditSave */\r\n  allowSaveEmpty: PropTypes.bool,\r\n  /** 验证时机 */\r\n  validateTrigger: PropTypes.oneOf([\"onChange\", \"onBlur\", \"onSave\"]),\r\n\r\n  /** 新增按钮前置事件，返回false不进入新增状态 ()=>bool */\r\n  onBeforeAdd: PropTypes.func,\r\n\r\n  /** 新增按钮事件 (addedData, newData)=>void\r\n   * @param {Array} addedData-添加的数据行\r\n   * @param {Array} newRows-添加后最新的数据\r\n   */\r\n  onAdd: PropTypes.func,\r\n\r\n  /** 新增时的行数据模板，可通过此项设置默认行数据 (rowIndex)=>object\r\n   * @param {numer} rowIndex\r\n   * @returns {object} 行对象\r\n   */\r\n  rowTemplate: PropTypes.func,\r\n\r\n  /** 编辑取消事件 */\r\n  onCancel: PropTypes.func,\r\n  /** 编辑按钮前置事件，返回false不进入编辑状态 */\r\n  onBeforeEdit: PropTypes.func,\r\n\r\n  /** 编辑按钮事件 */\r\n  onEdit: PropTypes.func,\r\n  /**\r\n   * 删除按钮前置事件,返回false 不可删除\r\n   */\r\n  onBeforeDelete: PropTypes.func,\r\n  /** 删除按钮事件 */\r\n  onDelete: PropTypes.func,\r\n  /** 无论是否存在输入变化，是否始终验证 */\r\n  alwaysValidate: PropTypes.bool,\r\n  /** 数据是否完全受控，如若受控，请在onEditSave、onCancel中自行更新数据源 */\r\n  dataControled: PropTypes.bool\r\n};\r\n\r\nexport default Editable;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Other = () => {\r\n  return <div />;\r\n};\r\n\r\nOther.defaultProps = {\r\n  pagination: false,\r\n  loading: false,\r\n  striped: true,\r\n  columnDropMenu: true\r\n};\r\n\r\nOther.propTypes = {\r\n  /** 数据是否加载中 */\r\n  loading: PropTypes.bool,\r\n\r\n  /** 排序列配置 */\r\n  orderNumber: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 分页 */\r\n  pagination: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 是否启用列标题配置项菜单 */\r\n  columnDropMenu: PropTypes.bool,\r\n\r\n  /** 是否可进行属性配置 */\r\n  settable: PropTypes.bool,\r\n\r\n  /** 奇偶行颜色间隔 */\r\n  striped: PropTypes.bool,\r\n\r\n  /** 表格全局id，通过此id记忆表格配置，由于采用localStorage存储配置，需保证id唯一 */\r\n  tableId: function(props, propName, componentName) {\r\n    let count = 0;\r\n    let v = props[propName];\r\n\r\n    if (typeof v !== \"undefined\" && v !== \"\") {\r\n      let tbs = document.getElementsByClassName(\"table-extend\");\r\n\r\n      for (let i = 0, len = tbs.length; i < len; i++) {\r\n        const tb = tbs[i];\r\n        if (tb) {\r\n          const t = tb.getAttribute(\"data-tableid\");\r\n          if (t === v) {\r\n            count = count + 1;\r\n\r\n            if (count > 1) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (count > 1) {\r\n      return new Error(\r\n        ` Encountered two table with the same tableId, '${v}'.The tableId must be unique in the whole application.\r\n                  We Recommended set the tableId based on file path.\r\n                  eg: platform/user/index.js =>  platform-user-xxx `\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default Other;\r\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Column from \"../types/Column.js\";\nimport Table from \"../types/Table.js\";\nimport Selection from \"../types/Selection.js\";\nimport Expandable from \"../types/Expandable.js\";\nimport Editable from \"../types/Editable.js\";\nimport Other from \"../types/Other.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <Props of={Other} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"selection\"\n    }}>{`Selection`}</h2>\n    <Props of={Selection} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"expandable\"\n    }}>{`Expandable`}</h2>\n    <Props of={Expandable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"editable\"\n    }}>{`Editable`}</h2>\n    <Props of={Editable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"column\"\n    }}>{`Column`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}