{"version":3,"sources":["e:/WebRoot/tablex/packages/site/examples/components/body.js","e:/WebRoot/tablex/packages/site/examples/components.mdx"],"names":["DraggableRow","SortableElement","props","react_default","a","createElement","DraggableBody","SortableContainer","_ref","className","children","DraggableTableRow","rowData","rowIndex","rowProps","Object","assign","index","data-key","id","DraggableTableBody","distance","helperClass","getContainer","document","getElementById","DraggableTable","lib","components","body","row","columns","count","arguments","length","undefined","prefix","Array","fill","map","column","columnIndex","objectSpread","key","concat","dataIndex","title","width","generateColumns","fixedColumns","reduce","parentId","generateData","fixed","resizable","createData","level","parentKey","maxLevel","l","data","i","k","d","column-1","age","address","push","createTreeData","maxWidth","Demo","state","loadChildrenData","record","Promise","resolve","reject","rows","_this","setTimeout","column-0","setState","scrollRef","tableScrollRef","ins","shouldCancelStart","b","c","onSortEnd","onSortOver","e","this","body_DraggableTable","rowKey","draggable","expandColumnKey","selectMode","orderNumber","disabledSelectKeys","onSelectChange","keys","console","log","Component","layoutProps","MDXLayout","MDXContent","objectWithoutProperties","index_es","mdxType","index_esm","__position","__code","__scope","Playground","Props","Body","style","height","isMDXComponent"],"mappings":"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","file":"static/js/examples-components.3a50ef75.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table } from \"tablex\";\r\n\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\n\r\nconst DraggableRow = SortableElement(props => {\r\n  return <div {...props} />;\r\n});\r\n\r\nconst DraggableBody = SortableContainer(({ className, children }) => {\r\n  return <div className={className}>{children}</div>;\r\n});\r\n\r\nfunction DraggableTableRow(props) {\r\n  let { rowData, rowIndex, rowProps } = props;\r\n  return <DraggableRow {...rowProps} index={rowIndex} data-key={rowData.id} />;\r\n}\r\n\r\nfunction DraggableTableBody(props) {\r\n  return (\r\n    <DraggableBody\r\n      {...props}\r\n      distance={10}\r\n      helperClass=\"tablex-row-dragging\"\r\n      getContainer={() => {\r\n        return document.getElementById(\"tableScroll\");\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nconst DraggableTable = props => {\r\n  return (\r\n    <Table\r\n      {...props}\r\n      components={{\r\n        body: DraggableTableBody,\r\n        row: DraggableTableRow\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst generateColumns = (count = 10, prefix = \"column-\", props) =>\r\n  new Array(count).fill(0).map((column, columnIndex) => ({\r\n    ...props,\r\n    key: `${prefix}${columnIndex}`,\r\n    dataIndex: `${prefix}${columnIndex}`,\r\n    title: `Column ${columnIndex}`,\r\n    width: 150\r\n  }));\r\n\r\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\r\n  new Array(count).fill(0).map((row, rowIndex) => {\r\n    return columns.reduce(\r\n      (rowData, column, columnIndex) => {\r\n        rowData[column.dataIndex] = `Row ${rowIndex} - Col ${columnIndex}`;\r\n\r\n        if (rowIndex === 0) {\r\n          //rowData.children = [];\r\n        }\r\n\r\n        return rowData;\r\n      },\r\n      {\r\n        id: `${prefix}${rowIndex}`,\r\n        parentId: null\r\n      }\r\n    );\r\n  });\r\n\r\nconst columns = generateColumns(10);\r\nconst data = generateData(columns, 100);\r\n\r\nlet fixedColumns = columns.map((column, columnIndex) => {\r\n  let fixed;\r\n  if (columnIndex < 2) fixed = \"left\";\r\n  if (columnIndex > 8) fixed = \"right\";\r\n\r\n  return { ...column, resizable: true, fixed };\r\n});\r\n\r\nfixedColumns = [\r\n  {\r\n    dataIndex: \"column-1\",\r\n    key: \"column-1\",\r\n    title: \"number\",\r\n    width: 200\r\n  },\r\n  {\r\n    title: \"appellation\",\r\n    width: 150,\r\n    key: \"column-11\",\r\n    children: [\r\n      {\r\n        dataIndex: \"address\",\r\n        title: \"name\",\r\n        key: \"column-2\",\r\n\r\n        width: 150\r\n      },\r\n      {\r\n        dataIndex: \"id\",\r\n        key: \"column-3\",\r\n        title: \"nick name\",\r\n        width: 150,\r\n        children: [\r\n          {\r\n            dataIndex: \"id\",\r\n            title: \"nick-1\",\r\n            key: \"column-21\",\r\n            maxWidth: 300,\r\n            width: 150\r\n          },\r\n          {\r\n            dataIndex: \"column-31\",\r\n            key: \"column-31\",\r\n            title: \"nick-2\",\r\n            width: 150\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    dataIndex: \"age\",\r\n    key: \"column-4\",\r\n    title: \"age\",\r\n    width: 150\r\n  }\r\n];\r\n\r\nfunction createData(level, parentKey, maxLevel, index) {\r\n  if (level > maxLevel) {\r\n    return;\r\n  }\r\n\r\n  let l = level;\r\n  let data = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let k = parentKey + \"-\" + level + \"-\" + i;\r\n    let d = {\r\n      id: k,\r\n      \"column-1\": \"Edward King \" + k,\r\n      age: 32,\r\n      address: \"London, Park Lane no. \" + i\r\n    };\r\n\r\n    if (i === 2) {\r\n      d.children = createData(l + 1, k, maxLevel, i);\r\n    }\r\n\r\n    data.push(d);\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction createTreeData() {\r\n  let data = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    data.push({\r\n      id: \"\" + i,\r\n      level: 0,\r\n      \"column-1\": \"Edward King \" + i,\r\n      age: 32,\r\n      address: \"London, Park Lane no. \" + i,\r\n      children: createData(0, i, 2)\r\n    });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nclass Demo extends Component {\r\n  state = {\r\n    data: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      data: createTreeData()\r\n    });\r\n  }\r\n\r\n  loadChildrenData = record => {\r\n    return new Promise((resolve, reject) => {\r\n      let rows = this.state.data;\r\n\r\n      setTimeout(() => {\r\n        let childrens = [{ id: \"123123123\", \"column-0\": \"children async\" }];\r\n        // record.isLoading=false;\r\n        record.children = childrens;\r\n        //rows[0] = Object.assign({}, record, { children: childrens });\r\n\r\n        this.setState({\r\n          data: rows\r\n        });\r\n\r\n        resolve();\r\n      }, 1300);\r\n    });\r\n  };\r\n\r\n  scrollRef = null;\r\n  tableScrollRef = ins => {\r\n    this.scrollRef = ins;\r\n    if (ins) {\r\n      ins.id = \"tableScroll\";\r\n    }\r\n  };\r\n\r\n  getContainer = a => {\r\n    return document.getElementById(\"tableScroll\") || document.body;\r\n  };\r\n\r\n  shouldCancelStart = (a, b, c) => {\r\n    return true;\r\n  };\r\n\r\n  onSortEnd = a => {};\r\n\r\n  onSortOver = (a, e) => {};\r\n\r\n  render() {\r\n    return (\r\n      <DraggableTable\r\n        distance={10}\r\n        onSortEnd={this.onSortEnd}\r\n        helperClass=\"tablex-row-dragging\"\r\n        getContainer={this.getContainer}\r\n        onSortOver={this.onSortOver}\r\n        scrollRef={this.tableScrollRef}\r\n        rowKey=\"id\"\r\n        draggable={true}\r\n        expandColumnKey=\"column-1\"\r\n        columns={fixedColumns}\r\n        selectMode=\"none\"\r\n        data={this.state.data}\r\n        orderNumber={true}\r\n        disabledSelectKeys={[]}\r\n        onSelectChange={(keys, rows) => {\r\n          console.log(\"onSelectChange:\", rows);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Body from \"./components/body.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"body--row\"\n    }}>{`body & row`}</h2>\n    <Playground __position={0} __code={'<Body />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Body\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n  <Body mdxType=\"Body\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}