{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/examples/Editable/complex/tree-data-utils.js","e:/WebRoot/tablex/packages/siteCN/examples/Editable/complex/index.js","e:/WebRoot/tablex/packages/siteCN/examples/Editable/customEdit.js","e:/WebRoot/tablex/packages/siteCN/examples/Editable/index.mdx"],"names":["getNodeDataAtTreeIndexOrNextIndex","targetIndex","node","currentIndex","getNodeKey","path","lowerSiblingCounts","ignoreCollapsed","isPseudoRoot","selfPath","treeIndex","children","expanded","nextIndex","childIndex","childCount","length","i","result","getDescendantCount","getVisibleNodeCount","treeData","reduce","total","currentNode","traverse","getVisibleNodeInfoAtIndex","index","walk","callback","walkDescendants","parentNode","map","mapDescendants","nextNode","selfInfo","child","mapResult","toggleExpandedForAll","changeNodeAtPath","newNode","currentTreeIndex","pathIndex","Error","nextTreeIndex","slice","removeNodeAtPath","removeNode","removedNode","removedTreeIndex","getNodeAtPath","foundNodeInfo","err","addNodeUnderParent","parentKey","expandParent","addAsFirstChild","insertedTreeIndex","hasBeenAdded","changedTreeData","key","insertNode","targetDepth","depth","minimumTreeIndex","insertResult","addNodeAtDepthAndIndex","isLastChild","currentDepth","n","parentPath","insertIndex","pathFragment","newChildren","getFlatDataFromTree","flattened","nodeInfo","push","getTreeFromFlatData","flatData","getKey","id","getParentKey","parentId","rootKey","childrenToParents","forEach","trav","parent","isDescendant","older","younger","some","getDepth","deepest","Math","max","find","searchQuery","searchMethod","searchFocusOffset","expandAllMatchPaths","expandFocusMatchPaths","matchCount","matches","isSelfMatch","hasFocusMatch","extraInfo","hasChildren","match","Search","Input","BaseUrl","process","Demo","columns","dataIndex","title","width","editor","value","record","onchange","ref","validate","defaultValue","onChange","v","quantities","target","onKeyDown","e","stopPropagation","unitPrice","render","row","isNaN","state","loading","getData","setState","url","options","xhr","onSuccess","data","_","uniqBy","d","code","bl","pid","len","pl","substring","unflatten","XMLHttpRequest","open","onreadystatechange","onload","status","res","responseText","JSON","parse","onerror","onError","send","scrollToItem","refs","tb","expandTo","expandAll","collapseAll","rowKey","deleteRow","api","deleteData","copiedRow","copy","rowData","k","hasOwnProperty","str","stringify","input","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","pasteChildren","targetRow","sourceRow","insertData","editing","scrollTo","isCut","cut","selectAll","selectToggle","expandToggle","onMenuClick","item","console","log","props","fn","del","export","searchIndex","searchedKey","onChangeSearch","onSearch","forceUpdate","searchedIndex","f","findData","name","indexOf","startIndex","focused","onFilter","filterData","contentMenu","menuItemProps","style","height","lineHeight","selectable","onClick","Item","editable","this","selectMode","checkStrictly","orderNumber","resizable","contextMenu","validateTrigger","isAppend","header","margin","float","placeholder","Component","tableRef","React","createRef","expandedRowKeys","align","halign","minWidth","onCell","beginEdit","validator","valid","message","address","maxWidth","createData","level","maxLevel","l","age","childrens","createTreeData","arr","current","editRows","completeEdit","cancelEdit","Date","getTime","prepend","modifyData","changedRows","newRows","editType","bind","cursor","marginLeft","allowSaveEmpty","alwaysValidate","onEditSave","selectOnRowClick","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","Table","flatten","InputNumber","Select","DatePicker","Switch","Checkbox","Button","Complex","CustomEdit","generateData","count","prefix","Array","fill","rowIndex","column","columnIndex","floor","random","newData","type","editTools","editAll","editorNoBorder","idcard","remark","newValue","number","tel","disabled","dataSource","defaultAddCount","readOnly","PureComponent","complete","onCancel","onEditCancel","tools","icon","text","handler","alert","customTools","editToolsConfig","position","editText","editIcon","isMDXComponent"],"mappings":"2mEAIA,SAASA,EAAT,GASM,IARFC,EAQC,EARDA,YACAC,EAOC,EAPDA,KACAC,EAMC,EANDA,aACAC,EAKC,EALDA,WAKC,IAJDC,YAIC,MAJM,GAIN,MAHDC,0BAGC,MAHoB,GAGpB,MAFDC,uBAEC,aADDC,aAGMC,OAFL,SAIG,GAFa,sBACTJ,GADS,CACHD,EAAW,CAAEF,OAAMQ,UAAWP,MAI5C,GAAIA,IAAiBF,EACnB,MAAO,CACLC,OACAI,qBACAD,KAAMI,GAKV,IAAKP,EAAKS,UAAaJ,IAAqC,IAAlBL,EAAKU,SAC7C,MAAO,CAAEC,UAAWV,EAAe,GAOrC,IAFA,IAAIW,EAAaX,EAAe,EAC1BY,EAAab,EAAKS,SAASK,OACxBC,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EAAG,CACtC,IAAMC,EAASlB,EAAkC,CAC/CO,kBACAH,aACAH,cACAC,KAAMA,EAAKS,SAASM,GACpBd,aAAcW,EACdR,mBAAmB,GAAD,mBAAMA,GAAN,CAA0BS,EAAaE,EAAI,IAC7DZ,KAAMI,IAGR,GAAIS,EAAOhB,KACT,OAAOgB,EAGTJ,EAAaI,EAAOL,UAItB,MAAO,CAAEA,UAAWC,GAGf,SAASK,EAAT,GAA+D,IAAjCjB,EAAgC,EAAhCA,KAAgC,IAA1BK,gBACzC,OACEP,EAAkC,CAChCI,WAAY,aACZG,qBAJ+D,SAK/DL,OACAC,aAAc,EACdF,aAAc,IACbY,UAAY,EAoLZ,SAASO,EAAT,GAA4C,IAAbC,EAAY,EAAZA,SAmBpC,OAAOA,EAASC,QACd,SAACC,EAAOC,GAAR,OAAwBD,EAnBT,SAAXE,EAAWvB,GACf,OACGA,EAAKS,WACY,IAAlBT,EAAKU,UACoB,oBAAlBV,EAAKS,SAMZ,EACAT,EAAKS,SAASW,QACZ,SAACC,EAAOC,GAAR,OAAwBD,EAAQE,EAASD,KACzC,GAPK,EAauBC,CAASD,KACzC,GAiBG,SAASE,EAAT,GAIH,IAHFL,EAGC,EAHDA,SACOpB,EAEN,EAFD0B,MACAvB,EACC,EADDA,WAEA,IAAKiB,GAAYA,EAASL,OAAS,EACjC,OAAO,KAIT,IAAME,EAASlB,EAAkC,CAC/CC,cACAG,aACAF,KAAM,CACJS,SAAUU,EACVT,UAAU,GAEZT,cAAe,EACfE,KAAM,GACNC,mBAAoB,GACpBE,cAAc,IAGhB,OAAIU,EAAOhB,KACFgB,EAGF,KAaF,SAASU,EAAT,GAKH,IAJFP,EAIC,EAJDA,SACAjB,EAGC,EAHDA,WACAyB,EAEC,EAFDA,SAEC,IADDtB,uBACC,UACIc,GAAYA,EAASL,OAAS,GAjPrC,SAASc,EAAT,GAUI,IATFD,EASC,EATDA,SACAzB,EAQC,EARDA,WACAG,EAOC,EAPDA,gBAOC,IANDC,oBAMC,SALDN,EAKC,EALDA,KAKC,IAJD6B,kBAIC,MAJY,KAIZ,EAHD5B,EAGC,EAHDA,aAGC,IAFDE,YAEC,MAFM,GAEN,MADDC,0BACC,MADoB,GACpB,EAEKG,EAAWD,EACb,GADyB,sBAErBH,GAFqB,CAEfD,EAAW,CAAEF,OAAMQ,UAAWP,MAW5C,IAAKK,IAIoB,IAHAqB,EAXRrB,EACb,KACA,CACEN,OACA6B,aACA1B,KAAMI,EACNH,qBACAI,UAAWP,IAQb,OAAO,EAKX,IACGD,EAAKS,WACa,IAAlBT,EAAKU,UAAqBL,IAAoBC,EAE/C,OAAOL,EAIT,IAAIW,EAAaX,EACXY,EAAab,EAAKS,SAASK,OACjC,GAA6B,oBAAlBd,EAAKS,SACd,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EAanC,IAAmB,KAZnBH,EAAagB,EAAgB,CAC3BD,WACAzB,aACAG,kBACAL,KAAMA,EAAKS,SAASM,GACpBc,WAAYvB,EAAe,KAAON,EAClCC,aAAcW,EAAa,EAC3BR,mBAAmB,GAAD,mBAAMA,GAAN,CAA0BS,EAAaE,EAAI,IAC7DZ,KAAMI,KAKN,OAAO,EAKb,OAAOK,EAoLPgB,CAAgB,CACdD,WACAzB,aACAG,kBACAC,cAAc,EACdN,KAAM,CAAES,SAAUU,GAClBlB,cAAe,EACfE,KAAM,GACNC,mBAAoB,KAejB,SAAS0B,EAAT,GAKH,IAJFX,EAIC,EAJDA,SACAjB,EAGC,EAHDA,WACAyB,EAEC,EAFDA,SAEC,IADDtB,uBACC,SACD,OAAKc,GAAYA,EAASL,OAAS,EAC1B,GA5LX,SAASiB,EAAT,GAUI,IATFJ,EASC,EATDA,SACAzB,EAQC,EARDA,WACAG,EAOC,EAPDA,gBAOC,IANDC,oBAMC,SALDN,EAKC,EALDA,KAKC,IAJD6B,kBAIC,MAJY,KAIZ,EAHD5B,EAGC,EAHDA,aAGC,IAFDE,YAEC,MAFM,GAEN,MADDC,0BACC,MADoB,GACpB,EACK4B,EAAQ,KAAQhC,GAGhBO,EAAWD,EACb,GADyB,sBAErBH,GAFqB,CAEfD,EAAW,CAAEF,KAAMgC,EAAUxB,UAAWP,MAChDgC,EAAW,CACfjC,KAAMgC,EACNH,aACA1B,KAAMI,EACNH,qBACAI,UAAWP,GAIb,IACG+B,EAASvB,WACa,IAAtBuB,EAAStB,UAAqBL,IAAoBC,EAEnD,MAAO,CACLE,UAAWP,EACXD,KAAM2B,EAASM,IAKnB,IAAIrB,EAAaX,EACXY,EAAamB,EAASvB,SAASK,OAmBrC,MAlBiC,oBAAtBkB,EAASvB,WAClBuB,EAASvB,SAAWuB,EAASvB,SAASqB,KAAI,SAACI,EAAOnB,GAChD,IAAMoB,EAAYJ,EAAe,CAC/BJ,WACAzB,aACAG,kBACAL,KAAMkC,EACNL,WAAYvB,EAAe,KAAO0B,EAClC/B,aAAcW,EAAa,EAC3BR,mBAAmB,GAAD,mBAAMA,GAAN,CAA0BS,EAAaE,EAAI,IAC7DZ,KAAMI,IAIR,OAFAK,EAAauB,EAAU3B,UAEhB2B,EAAUnC,SAId,CACLA,KAAM2B,EAASM,GACfzB,UAAWI,GAoINmB,CAAe,CACpBJ,WACAzB,aACAG,kBACAC,cAAc,EACdN,KAAM,CAAES,SAAUU,GAClBlB,cAAe,EACfE,KAAM,GACNC,mBAAoB,KACnBJ,KAAKS,SAWH,SAAS2B,EAAT,GAA8D,IAA9BjB,EAA6B,EAA7BA,SAA6B,IAAnBT,gBAAmB,SAClE,OAAOoB,EAAI,CACTX,WACAQ,SAAU,0BAAG3B,KAAH,CAA0BU,cACpCR,WAAY,qBAAGM,WACfH,iBAAiB,IAed,SAASgC,EAAT,GAMH,IALFlB,EAKC,EALDA,SACAhB,EAIC,EAJDA,KACAmC,EAGC,EAHDA,QACApC,EAEC,EAFDA,WAEC,IADDG,uBACC,SAmEKW,EAjEW,SAAXO,EAAY,GAKX,IAAD,IAJJjB,oBAII,SAHJN,EAGI,EAHJA,KACAuC,EAEI,EAFJA,iBACAC,EACI,EADJA,UAEA,IACGlC,GACDJ,EAAW,CAAEF,OAAMQ,UAAW+B,MAAwBpC,EAAKqC,GAE3D,MAXgB,cAclB,GAAIA,GAAarC,EAAKW,OAAS,EAE7B,MAA0B,oBAAZwB,EACVA,EAAQ,CAAEtC,OAAMQ,UAAW+B,IAC3BD,EAEN,IAAKtC,EAAKS,SAER,MAAM,IAAIgC,MAAM,sDAIlB,IADA,IAAIC,EAAgBH,EAAmB,EAC9BxB,EAAI,EAAGA,EAAIf,EAAKS,SAASK,OAAQC,GAAK,EAAG,CAChD,IAAMC,EAASO,EAAS,CACtBvB,KAAMA,EAAKS,SAASM,GACpBwB,iBAAkBG,EAClBF,UAAWA,EAAY,IAIzB,GAlCgB,gBAkCZxB,EACF,OAGS,EAAP,GACKhB,EAJHgB,EAGF,CAEEP,SAAS,GAAD,mBACHT,EAAKS,SAASkC,MAAM,EAAG5B,IADpB,CAENC,GAFM,YAGHhB,EAAKS,SAASkC,MAAM5B,EAAI,MAMjC,CAEEN,SAAS,GAAD,mBACHT,EAAKS,SAASkC,MAAM,EAAG5B,IADpB,YAEHf,EAAKS,SAASkC,MAAM5B,EAAI,OAKjC2B,GACE,EAAIzB,EAAmB,CAAEjB,KAAMA,EAAKS,SAASM,GAAIV,oBAGrD,MA9DkB,cAkELkB,CAAS,CACtBvB,KAAM,CAAES,SAAUU,GAClBoB,kBAAmB,EACnBC,WAAY,EACZlC,cAAc,IAGhB,GAzEoB,gBAyEhBU,EACF,MAAM,IAAIyB,MAAM,oCAGlB,OAAOzB,EAAOP,SAaT,SAASmC,EAAT,GAKH,IAJFzB,EAIC,EAJDA,SACAhB,EAGC,EAHDA,KACAD,EAEC,EAFDA,WAEC,IADDG,gBAEA,OAAOgC,EAAiB,CACtBlB,WACAhB,OACAD,aACAG,qBALD,SAMCiC,QAAS,OAiBN,SAASO,EAAT,GAKH,IAJF1B,EAIC,EAJDA,SACAhB,EAGC,EAHDA,KACAD,EAEC,EAFDA,WAEC,IADDG,gBAEIyC,EAAc,KACdC,EAAmB,KAevB,MAAO,CACL5B,SAfmBkB,EAAiB,CACpClB,WACAhB,OACAD,aACAG,qBAPD,SAQCiC,QAAS,YAA0B,IAAvBtC,EAAsB,EAAtBA,KAAMQ,EAAgB,EAAhBA,UAKhB,OAHAsC,EAAc9C,EACd+C,EAAmBvC,EAEZ,QAMTR,KAAM8C,EACNtC,UAAWuC,GAcR,SAASC,EAAT,GAKH,IAJF7B,EAIC,EAJDA,SACAhB,EAGC,EAHDA,KACAD,EAEC,EAFDA,WAEC,IADDG,uBACC,SACG4C,EAAgB,KAEpB,IACEZ,EAAiB,CACflB,WACAhB,OACAD,aACAG,kBACAiC,QAAS,YAA0B,IAAvBtC,EAAsB,EAAtBA,KAAMQ,EAAgB,EAAhBA,UAEhB,OADAyC,EAAgB,CAAEjD,OAAMQ,aACjBR,KAGX,MAAOkD,IAIT,OAAOD,EAkBF,SAASE,EAAT,GAQH,IAPFhC,EAOC,EAPDA,SACAmB,EAMC,EANDA,QAMC,IALDc,iBAKC,MALW,KAKX,EAJDlD,EAIC,EAJDA,WAIC,IAHDG,uBAGC,aAFDgD,oBAEC,aADDC,uBACC,SACD,GAAkB,OAAdF,EACF,MAAO,CACLjC,SAAS,GAAD,mBAAOA,GAAY,IAAnB,CAAwBmB,IAChC9B,WAAYW,GAAY,IAAIL,QAIhC,IAAIyC,EAAoB,KACpBC,GAAe,EACbC,EAAkB3B,EAAI,CAC1BX,WACAjB,aACAG,kBACAsB,SAAU,YAAgC,IAA7B3B,EAA4B,EAA5BA,KAAMQ,EAAsB,EAAtBA,UAAWL,EAAW,EAAXA,KACtBuD,EAAMvD,EAAOA,EAAKA,EAAKW,OAAS,GAAK,KAE3C,GAAI0C,GAAgBE,IAAQN,EAC1B,OAAOpD,EAETwD,GAAe,EAEf,IAAM3B,EAAU,KACX7B,GAQL,GALIqD,IACFxB,EAAWnB,UAAW,IAInBmB,EAAWpB,SAEd,OADA8C,EAAoB/C,EAAY,EACzB,EAAP,GACKqB,EADL,CAEEpB,SAAU,CAAC6B,KAIf,GAAmC,oBAAxBT,EAAWpB,SACpB,MAAM,IAAIgC,MAAM,gDAIlB,IADA,IAAIC,EAAgBlC,EAAY,EACvBO,EAAI,EAAGA,EAAIc,EAAWpB,SAASK,OAAQC,GAAK,EACnD2B,GACE,EACAzB,EAAmB,CAAEjB,KAAM6B,EAAWpB,SAASM,GAAIV,oBASvD,OANAkD,EAAoBb,EAMb,EAAP,GACKb,EADL,CAEEpB,SANe6C,EAAe,CAC3BhB,GAD2B,mBACfT,EAAWpB,WADI,sBAExBoB,EAAWpB,UAFa,CAEH6B,SASjC,IAAKkB,EACH,MAAM,IAAIf,MAAM,qCAGlB,MAAO,CACLtB,SAAUsC,EACVjD,UAAW+C,GAkMR,SAASI,EAAT,GAQH,IAPFxC,EAOC,EAPDA,SACOyC,EAMN,EANDC,MACAC,EAKC,EALDA,iBACAxB,EAIC,EAJDA,QAIC,IAHDpC,kBAGC,MAHY,aAGZ,MAFDG,uBAEC,aADDgD,oBACC,SACD,IAAKlC,GAA4B,IAAhByC,EACf,MAAO,CACLzC,SAAU,CAACmB,GACX9B,UAAW,EACXL,KAAM,CAACD,EAAW,CAAEF,KAAMsC,EAAS9B,UAAW,KAC9CqB,WAAY,MAIhB,IAAMkC,EAhNR,SAASC,EAAT,GAaI,IAZFJ,EAYC,EAZDA,YACAE,EAWC,EAXDA,iBACAxB,EAUC,EAVDA,QACAjC,EASC,EATDA,gBACAgD,EAQC,EARDA,aAQC,IAPD/C,oBAOC,SAND2D,EAMC,EANDA,YACAjE,EAKC,EALDA,KACAC,EAIC,EAJDA,aACAiE,EAGC,EAHDA,aACAhE,EAEC,EAFDA,WAEC,IADDC,YACC,MADM,GACN,EACKI,EAAW,SAAA4D,GAAC,OAChB7D,EACI,GADQ,sBAEJH,GAFI,CAEED,EAAW,CAAEF,KAAMmE,EAAG3D,UAAWP,OAGjD,GACEA,GAAgB6D,EAAmB,GAClCG,KAAiBjE,EAAKS,WAAYT,EAAKS,SAASK,QACjD,CACA,GAA6B,oBAAlBd,EAAKS,SACd,MAAM,IAAIgC,MAAM,gDAEhB,IACMT,EAAQ,KACThC,EADS,GADSqD,EAAe,CAAE3C,UAAU,GAAS,GAC7C,CAIZD,SAAUT,EAAKS,SAAL,CAAiB6B,GAAjB,mBAA6BtC,EAAKS,WAAY,CAAC6B,KAG3D,MAAO,CACLtC,KAAMgC,EACNrB,UAAWV,EAAe,EAC1BsD,kBAAmBtD,EAAe,EAClCmE,WAAY7D,EAASyB,GACrBH,WAAYvB,EAAe,KAAO0B,GAOxC,GAAIkC,GAAgBN,EAAc,EAAG,CAEnC,IACG5D,EAAKS,UACmB,oBAAlBT,EAAKS,WACO,IAAlBT,EAAKU,UAAqBL,IAAoBC,EAE/C,MAAO,CAAEN,OAAMW,UAAWV,EAAe,GAQ3C,IAHA,IAAIW,EAAaX,EAAe,EAC5BsD,EAAoB,KACpBc,EAAc,KACTtD,EAAI,EAAGA,EAAIf,EAAKS,SAASK,OAAQC,GAAK,EAAG,CAGhD,GAAIH,GAAckD,EAAkB,CAClCP,EAAoB3C,EACpByD,EAActD,EACd,MAIFH,GACE,EAAIK,EAAmB,CAAEjB,KAAMA,EAAKS,SAASM,GAAIV,oBAIrD,GAAoB,OAAhBgE,EAAsB,CAGxB,GAAIzD,EAAakD,IAAqBG,EACpC,MAAO,CAAEjE,OAAMW,UAAWC,GAI5B2C,EAAoB3C,EACpByD,EAAcrE,EAAKS,SAASK,OAI9B,IAAMkB,EAAQ,KACThC,EADS,CAEZS,SAAS,GAAD,mBACHT,EAAKS,SAASkC,MAAM,EAAG0B,IADpB,CAEN/B,GAFM,YAGHtC,EAAKS,SAASkC,MAAM0B,OAK3B,MAAO,CACLrE,KAAMgC,EACNrB,UAAWC,EACX2C,oBACAa,WAAY7D,EAASyB,GACrBH,WAAYvB,EAAe,KAAO0B,GAKtC,IACGhC,EAAKS,UACmB,oBAAlBT,EAAKS,WACO,IAAlBT,EAAKU,UAAqBL,IAAoBC,EAE/C,MAAO,CAAEN,OAAMW,UAAWV,EAAe,GAI3C,IAAIsD,EAAoB,KACpBe,EAAe,KACfzC,EAAa,KACbjB,EAAaX,EAAe,EAC5BsE,EAAcvE,EAAKS,SACI,oBAAhB8D,IACTA,EAAcA,EAAYzC,KAAI,SAACI,EAAOnB,GACpC,GAA0B,OAAtBwC,EACF,OAAOrB,EAGT,IAAMC,EAAY6B,EAAuB,CACvCJ,cACAE,mBACAxB,UACAjC,kBACAgD,eACAY,YAAaA,GAAelD,IAAMwD,EAAYzD,OAAS,EACvDd,KAAMkC,EACNjC,aAAcW,EACdsD,aAAcA,EAAe,EAC7BhE,aACAC,KAAM,KAaR,MAVI,sBAAuBgC,IAEvBoB,EAGEpB,EAHFoB,kBACA1B,EAEEM,EAFFN,WACYyC,EACVnC,EADFiC,YAIJxD,EAAauB,EAAUxB,UAEhBwB,EAAUnC,SAIrB,IAAMgC,EAAQ,KAAQhC,EAAR,CAAcS,SAAU8D,IAChCvD,EAAS,CACbhB,KAAMgC,EACNrB,UAAWC,GASb,OAN0B,OAAtB2C,IACFvC,EAAOuC,kBAAoBA,EAC3BvC,EAAOoD,WAAP,sBAAwB7D,EAASyB,IAAjC,YAA+CsC,IAC/CtD,EAAOa,WAAaA,GAGfb,EAsCcgD,CAAuB,CAC1CJ,cACAE,mBACAxB,UACAjC,kBACAgD,eACAnD,aACAI,cAAc,EACd2D,aAAa,EACbjE,KAAM,CAAES,SAAUU,GAClBlB,cAAe,EACfiE,cAAe,IAGjB,KAAM,sBAAuBH,GAC3B,MAAM,IAAItB,MAAM,yCAGlB,IAAMjC,EAAYuD,EAAaR,kBAC/B,MAAO,CACLpC,SAAU4C,EAAa/D,KAAKS,SAC5BD,YACAL,KAAK,GAAD,mBACC4D,EAAaK,YADd,CAEFlE,EAAW,CAAEF,KAAMsC,EAAS9B,gBAE9BqB,WAAYkC,EAAalC,YAiBtB,SAAS2C,EAAT,GAIH,IAHFrD,EAGC,EAHDA,SACAjB,EAEC,EAFDA,WAEC,IADDG,uBACC,SACD,IAAKc,GAAYA,EAASL,OAAS,EACjC,MAAO,GAGT,IAAM2D,EAAY,GAUlB,OATA/C,EAAK,CACHP,WACAjB,aACAG,kBACAsB,SAAU,SAAA+C,GACRD,EAAUE,KAAKD,MAIZD,EAcF,SAASG,EAAT,GAKH,IAJFC,EAIC,EAJDA,SAIC,IAHDC,cAGC,MAHQ,SAAA9E,GAAI,OAAIA,EAAK+E,IAGrB,MAFDC,oBAEC,MAFc,SAAAhF,GAAI,OAAIA,EAAKiF,UAE3B,MADDC,eACC,MADS,IACT,EACD,IAAKL,EACH,MAAO,GAGT,IAAMM,EAAoB,GAW1B,GAVAN,EAASO,SAAQ,SAAAlD,GACf,IAAMkB,EAAY4B,EAAa9C,GAE3BkB,KAAa+B,EACfA,EAAkB/B,GAAWuB,KAAKzC,GAElCiD,EAAkB/B,GAAa,CAAClB,QAI9BgD,KAAWC,GACf,MAAO,GAeT,OAAOA,EAAkBD,GAASpD,KAAI,SAAAI,GAAK,OAZ9B,SAAPmD,EAAOC,GACX,IAAMlC,EAAY0B,EAAOQ,GACzB,OAAIlC,KAAa+B,EACR,EAAP,GACKG,EADL,CAEE7E,SAAU0E,EAAkB/B,GAAWtB,KAAI,SAAAI,GAAK,OAAImD,EAAKnD,QAItD,EAAP,GAAYoD,GAGiCD,CAAKnD,MAW/C,SAASqD,EAAaC,EAAOC,GAClC,QACID,EAAM/E,UACkB,oBAAnB+E,EAAM/E,UACb+E,EAAM/E,SAASiF,MACb,SAAAxD,GAAK,OAAIA,IAAUuD,GAAWF,EAAarD,EAAOuD,MAajD,SAASE,EAAS3F,GAAkB,IAAZ6D,EAAW,uDAAH,EACrC,OAAK7D,EAAKS,SAImB,oBAAlBT,EAAKS,SACPoD,EAAQ,EAGV7D,EAAKS,SAASW,QACnB,SAACwE,EAAS1D,GAAV,OAAoB2D,KAAKC,IAAIF,EAASD,EAASzD,EAAO2B,EAAQ,MAC9DA,GATOA,EA8BJ,SAASkC,EAAT,GAQH,IAPF7F,EAOC,EAPDA,WACAiB,EAMC,EANDA,SACA6E,EAKC,EALDA,YACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,kBAGC,IAFDC,2BAEC,aADDC,6BACC,SACGC,EAAa,EAwGXrF,EAvGO,SAAPqE,EAAQ,GAA6D,IAAD,IAA1D/E,oBAA0D,SAApCN,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAA8B,IAAhBE,YAAgB,MAAT,GAAS,EACpEmG,EAAU,GACVC,GAAc,EACdC,GAAgB,EAEdjG,EAAWD,EACb,GADyB,sBAErBH,GAFqB,CAEfD,EAAW,CAAEF,OAAMQ,UAAWP,MACtCwG,EAAYnG,EACd,KACA,CACEH,KAAMI,EACNC,UAAWP,GAIXyG,EACJ1G,EAAKS,UACoB,oBAAlBT,EAAKS,UACZT,EAAKS,SAASK,OAAS,GAGpBR,GAAgB2F,EAAa,EAAD,GAAMQ,EAAN,CAAiBzG,OAAMgG,mBAClDK,IAAeH,IACjBM,GAAgB,GAKlBH,GAAc,EAMdE,GAAc,GAGhB,IAAI3F,EAAaX,EACXqC,EAAO,KAAQtC,GAwDrB,OAvDI0G,IAEFpE,EAAQ7B,SAAW6B,EAAQ7B,SAASqB,KAAI,SAAAI,GACtC,IAAMC,EAAYkD,EAAK,CACrBrF,KAAMkC,EACNjC,aAAcW,EAAa,EAC3BT,KAAMI,IA+BR,OAvBI4B,EAAUnC,KAAKU,SACjBE,EAAauB,EAAU3B,UAEvBI,GAAc,GAGZuB,EAAUmE,QAAQxF,OAAS,GAAKqB,EAAUqE,iBAC5CF,EAAO,sBAAOA,GAAP,YAAmBnE,EAAUmE,UAChCnE,EAAUqE,gBACZA,GAAgB,IAMfL,GAAuBhE,EAAUmE,QAAQxF,OAAS,IACjDqF,GAAuBC,IACvBjE,EAAUqE,iBAEZlE,EAAQ5B,UAAW,IAIhByB,EAAUnC,SAKhBM,GAAiBgC,EAAQ5B,WAC5B4F,EAAUA,EAAQxE,KAAI,SAAA6E,GAAK,YACtBA,EADsB,CAEzBnG,UAAW,WAMX+F,IACFD,EAAO,MAASG,EAAT,CAAoBzG,KAAMsC,KAA1B,mBAAwCgE,KAG1C,CACLtG,KAAMsG,EAAQxF,OAAS,EAAIwB,EAAUtC,EACrCsG,UACAE,gBACAhG,UAAWI,GAIAyE,CAAK,CAClBrF,KAAM,CAAES,SAAUU,GAClBb,cAAc,EACdL,cAAe,IAGjB,MAAO,CACLqG,QAAStF,EAAOsF,QAChBnF,SAAUH,EAAOhB,KAAKS,U,y4GCtqCpBmG,G,2CAAWC,IAAXD,QAEJE,EAAUC,U,IAkERC,E,2MACJC,QAAU,CACR,CACEC,UAAW,OACXxD,IAAK,OACLyD,MAAO,eACPC,MAAO,KAET,CACED,MAAO,eACPC,MAAO,IACP1D,IAAK,OACLwD,UAAW,QAEb,CACEA,UAAW,cACXxD,IAAK,cACLyD,MAAO,2BACPC,MAAO,KAET,CACEF,UAAW,OACXxD,IAAK,OACLyD,MAAO,eACPC,MAAO,KAET,CACEF,UAAW,aACXxD,IAAK,aACLyD,MAAO,qBACPC,MAAO,IACPC,OAAQ,SAACC,EAAOC,EAAQ9F,EAAO+F,EAAUC,EAAKC,GAC5C,OACE,kBAAC,IAAD,CACEC,aAAcL,EACdG,IAAKA,EACLG,SAAU,SAAAC,GACRL,EAAS,CAAEM,WAAYD,EAAEE,OAAOT,aAM1C,CACEJ,UAAW,YACXxD,IAAK,YACLyD,MAAO,2BACPC,MAAO,IACPC,OAAQ,SAACC,EAAOC,EAAQ9F,EAAO+F,EAAUC,EAAKC,GAC5C,OACE,kBAAC,IAAD,CACEC,aAAcL,EACdG,IAAKA,EACLO,UAAW,SAAAC,GACTA,EAAEC,mBAEJN,SAAU,SAAAK,GACRT,EAAS,CAAEW,UAAWF,SAMhC,CACEf,UAAW,aACXxD,IAAK,aACLyD,MAAO,eACPC,MAAO,IACPgB,OAAQ,SAACd,EAAOe,GACd,IAAIR,EAAIQ,EAAIF,UAAYE,EAAIP,WAC5B,OAAIQ,MAAMT,GACD,GAEFA,IAGX,CACEX,UAAW,aACXxD,IAAK,aACLyD,MAAO,qBACPC,MAAO,M,EAIXmB,MAAQ,CACNC,SAAS,EACTrH,SAAU,I,EAGZsH,QAAU,WACR,EAAKC,SAAS,CAAEF,SAAS,IAEzB,IA5JgBG,EAAKC,EACnBC,EADcF,EA6JL7B,EAAU,oBA7JA8B,EA6JqB,CACxCE,UAAW,SAAAC,GACTA,EAAOC,IAAEC,OAAOF,GAAM,SAAAG,GACpB,OAAOA,EAAEC,QAGX,IAAIC,GAAK,EAETL,EAAK3D,SAAQ,SAAA8D,GACX,IAAInE,EAAKmE,EAAEC,MAAQ,GACfE,EAAM,GACNC,EAAMvE,EAAGjE,OAGb,GAFAoI,EAAEnE,GAAKA,EAEHuE,GAAO,EAAG,CACZ,IAAIC,EAAK,EAELD,EAAM,IAAM,IACdC,EAAK,GAGI,WAAPxE,IACFqE,GAAK,GAILC,GADS,IAAPD,EACI,OAEArE,EAAGyE,UAAU,EAAGF,EAAMC,GAIhCL,EAAEG,IAAMA,KAGV,IAAIlI,EAAWsI,oBAAUV,EAAM,KAAM,OAErC,EAAKL,SAAS,CACZF,SAAS,EACTrH,SAAUA,OAnMd0H,EAAM,IAAIa,gBACVC,KAAK,MAAOhB,GAAK,GAErBE,EAAIe,mBAAqB,aAEzBf,EAAIgB,OAAS,WACX,GAAkB,KAAdhB,EAAIiB,QAC2B,oBAAtBlB,EAAQE,UAA0B,CAC3C,IAAIiB,EAAM,GACNlB,EAAImB,eACND,EAAME,KAAKC,MAAMrB,EAAImB,eAEvBpB,EAAQE,UAAUiB,KAKxBlB,EAAIsB,QAAUvB,EAAQwB,QAEtBvB,EAAIwB,Q,EAuLJC,aAAe,SAAA7I,GACT,EAAK8I,KAAKC,IACZ,EAAKD,KAAKC,GAAGF,aAAa7I,EAAO,W,EAIrCgJ,SAAW,WAAgB,IAAf5G,EAAc,uDAAN,EAClB,EAAK0G,KAAKC,GAAGC,SAAS5G,I,EAGxB6G,UAAY,WACV,EAAKH,KAAKC,GAAGE,a,EAEfC,YAAc,WACZ,EAAKJ,KAAKC,GAAGG,e,EAIfC,OAAS,K,EACTC,UAAY,SAAAxC,GACV,IACI3E,EAAM2E,EADG,EAAKuC,QAElB,EAAKL,KAAKC,GAAGM,IAAIC,WAAW,CAACrH,K,EAG/BsH,UAAY,K,EACZC,KAAO,SAAA5C,GACL,IAAI6C,EAAU,GAEd,IAAK,IAAMC,KAAK9C,EACVA,EAAI+C,eAAeD,IAAY,aAANA,IAC3BD,EAAQC,GAAK9C,EAAI8C,IAGrB,IAAIE,EAAMpB,KAAKqB,UAAUJ,GACzB,EAAKF,UAAYf,KAAKqB,UAAUJ,GAEhC,IAAMK,EAAQC,SAASC,cAAc,SACrCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,QAASP,GAC5BE,EAAMM,SACFL,SAASM,YAAY,SACvBN,SAASM,YAAY,QAEvBN,SAASE,KAAKK,YAAYR,I,EAG5BS,cAAgB,SAAAC,GACd,IAAIrB,EAAS,EAAKA,OAEdI,EAAY,EAAKA,UAErB,GAAIA,EAAW,CACb,IAAIkB,EAAYjC,KAAKC,MAAMc,GAC3BkB,EAAUtB,GAAU,cAAgBsB,EAAUtB,GAE9C,EAAKL,KAAKC,GAAGM,IAAIqB,WAAW,CAC1BpD,KAAM,CAACmD,GACP9I,UAAW6I,EAAUrB,GACrBwB,SAAS,EACTC,UAAU,IAGZ,EAAKC,OAAQ,EACb,EAAKtB,UAAY,O,EAIrBsB,OAAQ,E,EACRC,IAAM,SAAAlE,GACJ,EAAK4C,KAAK5C,GACV,EAAKiE,OAAQ,G,EAIfE,UAAY,SAAAtB,GACV,EAAKX,KAAKC,GAAGiC,aAAavB,I,EAG5BwB,aAAe,SAAAxB,GACb,EAAKX,KAAKC,GAAGkC,aAAaxB,I,EAG5ByB,YAAc,YAAoB,IAAjBjJ,EAAgB,EAAhBA,IAAKkJ,EAAW,EAAXA,KACpBC,QAAQC,IAAI,OAAQF,EAAKG,MAAM1E,KAE/B,IAUI2E,EAVU,CACZC,IAAK,EAAKpC,UACVI,KAAM,EAAKA,KACXsB,IAAK,EAAKA,IACVP,cAAe,EAAKA,cACpBQ,UAAW,EAAKA,UAChBE,aAAc,EAAKA,aACnBQ,OAAQ,UAGOxJ,GACC,oBAAPsJ,GACTA,EAAGJ,EAAKG,MAAM1E,M,EAIlB8E,aAAe,E,EACfC,YAAc,G,EACdC,eAAiB,WACf,EAAKF,YAAc,EACnB,EAAKC,YAAc,I,EAGrBE,SAAW,SAAAzF,GACT,IAAKA,EAKH,OAJA,EAAKsF,YAAc,EACnB,EAAKC,YAAc,GACnB,EAAK9C,cAAc,QACnB,EAAKiD,cAKP,EAAK7C,YAEL,IAAI8C,GAAiB,EACjBJ,EAAc,GAEdK,EAAI,EAAKlD,KAAKC,GAAGkD,UAAS,SAAAxE,GAAC,OAAIA,EAAEyE,KAAKC,QAAQ/F,IAAM,IAAG,CACzDgG,WAAY,EAAKV,YACjBW,SAAS,IAGPL,IACFD,EAAgBC,EAAEhM,MAClB2L,EAAcK,EAAEpF,IAAItD,IAGlByI,GAAiB,GACnB,EAAKL,YAAcK,EAAgB,EACnC,EAAKJ,YAAcA,IAEnB,EAAKD,aAAe,EACpB,EAAKC,YAAc,K,EAIvBW,SAAW,SAAAlG,GAAM,IACT1G,EAAa,EAAKoH,MAAlBpH,SACD0G,GAKL,EAAK0C,KAAKC,GAAGwD,YAAW,SAAA9E,GACtB,OAAOA,EAAEyE,KAAKC,QAAQ/F,IAAM,KAG9B,EAAK6C,aARH,EAAKhC,SAAS,CAAEvH,SAAUA,EAASwB,SAAW,EAAKgI,c,EAWvDsD,YAAc,SAAA5F,GACZ,IAAI6F,EAAgB,CAClBC,MAAO,CAAEC,OAAQ,OAAQC,WAAY,UACrChG,OAGF,OACE,kBAAC,IAAD,CAAMiG,YAAY,EAAOC,QAAS,EAAK5B,aACrC,kBAAC,IAAK6B,KAAN,eAAW9K,IAAI,OAAUwK,GAAzB,sBAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,QAAWwK,GAA1B,sBAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,OAAUwK,GAAzB,sBAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,iBAAoBwK,GAAnC,oCAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,aAAgBwK,GAA/B,6BAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,gBAAmBwK,GAAlC,6BAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,UAAawK,GAA5B,gBAGA,kBAAC,IAAKM,KAAN,eAAW9K,IAAI,SAAYwK,GAA3B,kB,wEAOI,IAAD,OACP,OACE,yBAAKC,MAAO,CAAEC,OAAQ,SACpB,kBAAC,QAAD,CACExD,OAAO,KACP6D,UAAU,EACVhH,IAAI,KACJe,QAASkG,KAAKnG,MAAMC,QACpBvB,QAASyH,KAAKzH,QACd0H,WAAW,WACXC,eAAe,EACf7F,KAAM2F,KAAKnG,MAAMpH,SACjB0N,YAAa,CAAEC,WAAW,GAC1BC,YAAaL,KAAKT,YAClBe,gBAAgB,WAChBC,UAAU,EACVC,OAAQ,kBACN,6BACE,kBAAC,IAAD,CAAQX,QAAS,EAAK9F,SAAtB,4BACA,kBAAC,IAAD,CAAQ8F,QAAS,EAAK7D,UAAWyD,MAAO,CAAEgB,OAAQ,UAAlD,4BAGA,kBAAC,IAAD,CACEZ,QAAS,kBAAM,EAAK9D,SAAS,IAC7B0D,MAAO,CAAEgB,OAAQ,UAFnB,wCAOA,kBAAC,IAAD,CAAQZ,QAAS,EAAK5D,aAAtB,4BACA,kBAAC/D,EAAD,CACEuH,MAAO,CAAEiB,MAAO,QAASD,OAAQ,QAAS/H,MAAO,SACjDiI,YAAY,uCACZ/B,SAAU,EAAKS,WAEjB,kBAACnH,EAAD,CACEuH,MAAO,CAAEiB,MAAO,QAASD,OAAQ,QAAS/H,MAAO,SACjDiI,YAAY,uCACZ/B,SAAU,EAAKA,SACf1F,SAAU,EAAKyF,0B,GAnXZiC,aA6XJtI,I,iNCrcTA,E,YACJ,WAAY+F,GAAQ,IAAD,8BACjB,4CAAMA,KAEDwC,SAAWC,IAAMC,YAEtB,EAAKlH,MAAQ,CACXQ,KAAM,GACNP,SAAS,EACTkH,gBAAiB,IAGnB,EAAKzI,QAAU,CACb,CACEC,UAAW,WACXxD,IAAK,WACLyD,MAAO,WACPwI,MAAO,OACPC,OAAQ,SACRC,SAAU,IACVC,OAAQ,SAACzH,EAAKf,EAAO7F,GACnB,MAAO,CACL8M,QAAS,WACP,EAAKwB,UAAU1H,MAIrB2H,UAAW,SAAS1I,EAAOe,GACzB,OAAKf,EAIE,CAAE2I,OAAO,EAAMC,QAAS,SAHtB,CAAED,OAAO,EAAOC,QAAS,uBAKpC7I,OAAQ,SAASC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC5C,OACE,kBAAC,IAAD,CACEE,aAAcL,EACdG,IAAKA,EACLG,SAAU,SAAAK,GAAC,OACTT,EAAS,CACP,CAAE,WAAYS,EAAEF,OAAOT,MAAOvC,GAAIsD,EAAItD,IACtC,CAAEA,GAAI,IAAKoL,QAASlI,EAAEF,OAAOT,cAOzC,CACEH,MAAO,cACPC,MAAO,IACPwI,OAAQ,OACRnP,SAAU,CACR,CACEyG,UAAW,UACXC,MAAO,OACPC,MAAO,IACP0I,OAAQ,SAACzH,EAAKf,EAAO7F,GACnB,MAAO,CACL8M,QAAS,WACP,EAAKwB,UAAU1H,MAIrBhB,OAAQ,SAASC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC5C,OACE,kBAAC,IAAD,CACEE,aAAcL,EACdG,IAAKA,EACLG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAAE2I,QAASlI,EAAEF,OAAOT,aAKpD,CACEH,MAAO,YACPC,MAAO,IACP3G,SAAU,CACR,CACEyG,UAAW,KACXC,MAAO,SACPiJ,SAAU,IACVhJ,MAAO,KAET,CACEF,UAAW,QACXC,MAAO,aAMjB,CACED,UAAW,KACXxD,IAAK,WACLyD,MAAO,OA/FM,E,iFAqGjB,SAASkJ,EAAWC,EAAOlN,EAAWmN,EAAU9O,GAC9C,KAAI6O,EAAQC,GAAZ,CAMA,IAFA,IAAIC,EAAIF,EACJvH,EAAO,GACFhI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIoK,EAAI/H,EAAY,IAAMkN,EAAQ,IAAMvP,EACpCmI,EAAI,CACNnE,GAAIoG,EACJ,WAAY,eAAiBA,EAC7BsF,IAAK,GACLH,MAAOA,EACPH,QAAS,yBAA2BpP,GAG5B,IAANA,IACFmI,EAAEzI,SAAW4P,EAAWG,EAAI,EAAGrF,EAAGoF,EAAUxP,IAG9CgI,EAAKpE,KAAKuE,GAEZ,OAAOH,GAyBT2F,KAAKhG,SAAS,CACZK,KAvBF,WAEE,IADA,IAAIA,EAAO,GACFhI,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAI2P,EAAYL,EAAW,EAAGtP,EAAG,GAC7BmI,EAAI,CACNnE,GAAI,GAAKhE,EACTuP,MAAO,EACP,WAAY,eAAiBvP,EAC7B0P,IAAK1P,EACLoP,QAAS,yBAA2BpP,GAGlCA,EAAI,IAAM,IACZmI,EAAEzI,SAAWiQ,GAGf3H,EAAKpE,KAAKuE,GAGZ,OAAOH,EAID4H,O,gCAIAtI,GACR,IAAIuI,EAAM,GACVA,EAAIjM,KAAK0D,EAAItD,IACb2J,KAAKa,SAASsB,QAAQ/F,IAAIgG,SAASF,K,qCAInClC,KAAKa,SAASsB,QAAQ/F,IAAIiG,iB,mCAI1BrC,KAAKa,SAASsB,QAAQ/F,IAAIkG,e,mCAI1B,IAAIJ,EAAM,GACVA,EAAIjM,KAAK,CAAEI,GAAI,iBAAkB,IAAIkM,MAAOC,YAE5CxC,KAAKa,SAASsB,QAAQ/F,IAAIqB,WAAW,CACnCpD,KAAM6H,EACNxN,UAAW,IACXgJ,SAAS,EACT+E,SAAS,EACTtD,WAAY,M,mCAKJ,GACNlJ,KAAK,CAAEI,GAAI,iBAAkB,IAAIkM,MAAOC,YAE5CxC,KAAKa,SAASsB,QAAQ/F,IAAIsG,WAAW,CACnC,CACErM,GAAI,IACJ,WAAY,eAAgB,IAAIkM,MAAOC,UACvCZ,MAAO,O,+BAMX5B,KAAKa,SAASsB,QAAQ/F,IAAIC,e,iCAGjBsG,EAAaC,EAASC,GAC/B1E,QAAQC,IAAI,0BAA2BuE,GACvCxE,QAAQC,IAAI,sBAAuBwE,GACnC5C,KAAKhG,SAAS,CAAEK,KAAMuI,M,+BAGd,IAAD,OACP,OACE,yBAAKnD,MAAO,CAAEC,OAAQ,SACpB,kBAAC,QAAD,CACEc,OAAQ,WACN,OACE,6BACE,kBAAC,IAAD,CACEX,QAAS,EAAKwC,aAAaS,KAAK,GAChCrD,MAAO,CAAEsD,OAAQ,YAFnB,iBAOA,kBAAC,IAAD,CACElD,QAAS,EAAKyC,WAAWQ,KAAK,GAC9BrD,MAAO,CAAEsD,OAAQ,UAAWC,WAAY,KAF1C,eAOA,kBAAC,IAAD,CACEnD,QAAS,EAAKpC,WAAWqF,KAAK,GAC9BrD,MAAO,CAAEsD,OAAQ,UAAWC,WAAY,KAF1C,eAOA,kBAAC,IAAD,CACEnD,QAAS,EAAK6C,WAAWI,KAAK,GAC9BrD,MAAO,CAAEsD,OAAQ,UAAWC,WAAY,KAF1C,eAOA,kBAAC,IAAD,CACEnD,QAAS,EAAI,OAAQiD,KAAK,GAC1BrD,MAAO,CAAEsD,OAAQ,UAAWC,WAAY,KAF1C,YASNjD,UAAU,EACVQ,UAAU,EACV0C,gBAAgB,EAChBC,gBAAgB,EAChBnK,IAAKiH,KAAKa,SACV3E,OAAO,KACPiH,WAAYnD,KAAKmD,WAAWL,KAAK9C,MACjCzH,QAASyH,KAAKzH,QACd0H,WAAW,WACXC,eAAe,EACf7F,KAAM2F,KAAKnG,MAAMQ,KACjBiG,gBAAgB,WAChB8C,kBAAkB,S,GArQTtC,IAAMF,WA2QVtI,I,kPCnQf,IAKM+K,EAAc,GAGdC,GAAY,UACH,SAASC,GAAT,GAGX,IAFFC,EAEC,EAFDA,WACGnF,EACF,8BACD,OAAO,YAACiF,GAAD,iBAAeD,EAAiBhF,EAAhC,CAAuCmF,WAAYA,EAAYC,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,iFAIL,iBAAQ,CACN,GAAM,8CADR,8CAGA,8BACE,iBAAGA,WAAW,cAAd,6YAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0oFAAkrFC,QAAS,CAC5tFxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAoCI,WAAYpF,GAAQ,IAAD,sBAEjB,IAAM9F,EAAU,CAAC,CACfC,UAAW,KACXC,MAAO,KACPzD,IAAK,KACL0D,MAAO,KACN,CACDF,UAAW,WACXC,MAAO,WACPC,MAAO,IACP4I,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eAClE,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,YAEb,CACDjL,UAAW,WACXC,MAAO,WACPC,MAAO,IACPuI,MAAO,UACN,CACDzI,UAAW,WACXC,MAAO,WACPwI,MAAO,SACN,CACDzI,UAAW,WACXC,MAAO,WACPC,MAAO,IACPuI,MAAO,WAEL5G,GA3CJ,4CAAMgE,KA2CUqG,aAAanM,EAAS,IA5CrB,OA6CjB8B,EAAK,GAAGtI,SAAW,EAAK2S,aAAanM,EAAS,EAAG,aACjD,EAAKsB,MAAQ,CACXQ,KAAMA,EACN9B,QAASA,GAhDM,EApCvB,0EAmBiBA,GAAsC,IAA7BoM,EAA4B,uDAApB,GAAIC,EAAgB,uDAAP,MACzC,OAAO,IAAIC,MAAMF,GAAOG,KAAK,GAAG1R,KAAI,SAACuG,EAAKoL,GACxC,OAAOxM,EAAQ7F,QAAO,SAAC8J,EAASwI,EAAQC,GAOtC,MANyB,OAArBD,EAAOxM,UACTgE,EAAQwI,EAAOxM,WAAarB,KAAK+N,MAAsB,IAAhB/N,KAAKgO,SAAiB,GAE7D3I,EAAQwI,EAAOxM,WAAaoM,EAAS,IAAMG,EAAW,UAAYE,EAG7DzI,IACN,CACDnG,GAAIuO,EAASG,EACbxO,SAAU,cA/BpB,gDAwFeoM,EAAayC,EAASC,GAC/BlH,QAAQC,IAAI,cAAegH,GAC3BpF,KAAKhG,SAAS,CACZK,KAAM+K,MA3Fd,+BA+Fc,IAAD,EAIHpF,KAAKnG,MAFPtB,EAFK,EAELA,QACA8B,EAHK,EAGLA,KAEF,OAAO,YAAC,IAAD,CAAO6B,OAAO,KAAK3D,QAASA,EAAS+H,gBAAgB,WAAWjG,KAAMA,EAAM0F,UAAU,EAAME,WAAY,WAAYC,eAAe,EAAOoF,UAAW,CAAC,OAAQ,MAAO,UAAWnC,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOyD,QAAQ,cApG7O,GAkBiB3C,IAAMF,YAuFvB,iBAAQ,CACN,GAAM,wCADR,wCAGA,8BACE,iBAAG8C,WAAW,cAAd,+OAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,06JAAo7JC,QAAS,CAC99JxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAoCI,WAAYpF,GAAQ,IAAD,sBAEjB,IAAM9F,EAAU,CAAC,CACfC,UAAW,KACXC,MAAO,KACPzD,IAAK,KACL0D,MAAO,KACN,CACDF,UAAW,WACXC,MAAO,WACPC,MAAO,IACP4I,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eAClE,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,YAEb,CACDjL,UAAW,WACXC,MAAO,WACPC,MAAO,IACPuI,MAAO,SACPK,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAaE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eACxE,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,kBAEb,CACDjL,UAAW,WACXC,MAAO,WACPwI,MAAO,QACPK,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAQE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eACnE,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,aAEb,CACDjL,UAAW,WACXC,MAAO,WACPC,MAAO,IACPuI,MAAO,SACPK,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAY4H,YAAY,GAAG5H,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eACjE,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,iBAEb,CACDjL,UAAW,WACXC,MAAO,WACPC,MAAO,IACPuI,MAAO,SACPK,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAQA,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,eAC9C,WAAaS,EAAEF,OAAOT,SACrB6K,QAAQ,cAGZpJ,GAxHJ,4CAAMgE,KAwHUqG,aAAanM,EAAS,IAzHrB,OA0HjB8B,EAAK,GAAGtI,SAAW,EAAK2S,aAAanM,EAAS,EAAG,aACjD,EAAKsB,MAAQ,CACXQ,KAAMA,EACN9B,QAASA,GA7HM,EApCvB,0EAmBiBA,GAAsC,IAA7BoM,EAA4B,uDAApB,GAAIC,EAAgB,uDAAP,MACzC,OAAO,IAAIC,MAAMF,GAAOG,KAAK,GAAG1R,KAAI,SAACuG,EAAKoL,GACxC,OAAOxM,EAAQ7F,QAAO,SAAC8J,EAASwI,EAAQC,GAOtC,MANyB,OAArBD,EAAOxM,UACTgE,EAAQwI,EAAOxM,WAAarB,KAAK+N,MAAsB,IAAhB/N,KAAKgO,SAAiB,GAE7D3I,EAAQwI,EAAOxM,WAAaoM,EAAS,IAAMG,EAAW,UAAYE,EAG7DzI,IACN,CACDnG,GAAIuO,EAASG,EACbxO,SAAU,cA/BpB,gDAqKeoM,EAAayC,EAASC,GAC/BlH,QAAQC,IAAI,cAAegH,GAC3BpF,KAAKhG,SAAS,CACZK,KAAM+K,MAxKd,0CA6KMpF,KAAKnE,KAAKgF,SAASzE,IAAImJ,YA7K7B,+BAgLc,IAAD,EAIHvF,KAAKnG,MAFPtB,EAFK,EAELA,QACA8B,EAHK,EAGLA,KAEF,OAAO,YAAC,IAAD,CAAO6B,OAAO,KAAKnD,IAAI,WAAWR,QAASA,EAAS+H,gBAAgB,WAAWjG,KAAMA,EAAMmL,gBAAgB,EAAMzF,UAAU,EAAME,WAAY,WAAYC,eAAe,EAAOoF,UAAW,CAAC,OAAQ,MAAO,UAAWnC,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOyD,QAAQ,cArLlR,GAkBiB3C,IAAMF,YAwKvB,iBAAQ,CACN,GAAM,4BADR,4BAGA,8BACE,iBAAG8C,WAAW,cAAd,qJAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yiIAAy9HC,QAAS,CACngIxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAmBI,WAAYpF,GAAQ,IAAD,gCACjB,4CAAMA,KACDxE,MAAQ,CACXQ,KAAM,CAAC,CACLhE,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,4BACP,CACDrP,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,8BAGZ,EAAKnN,QAAU,CAAC,CACdC,UAAW,KACXC,MAAO,eACPC,MAAO,IACP4I,UAAW,SAAC1I,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,KASf7I,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GACrD,IAAIoM,EAAWpM,EAAEF,OAAOT,MACxBE,EAAS,CACP8M,OAAQD,KAETlC,QAAQ,aAvBA,GA0Bb/K,MAAO,IACPF,UAAW,OACXC,MAAO,gBA5BM,sBA6BN,KA7BM,2BA8BF,SAACG,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,OAlCF,wBA2CL,SAAC5I,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GACrD,IAAIoM,EAAWpM,EAAEF,OAAOT,MACxBE,EAAS,CACPmG,KAAM0G,KAEPlC,QAAQ,aAjDA,GAmDZ,CACDjL,UAAW,MACXC,MAAO,eACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnEiJ,IAAKxI,EAAEF,OAAOT,MACd6M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,qBACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAC5D2M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,MACXC,MAAO,2BACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnE+M,IAAKtM,EAAEF,OAAOT,SACZ6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,eACPE,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAK+M,UAAU,EAAMrC,QAAQ,aApGjD,EAnBvB,wEA4Hed,EAAayC,EAASC,GAC/BrF,KAAKhG,SAAS,CACZK,KAAM+K,MA9Hd,+BAkIc,IAAD,EAIHpF,KAAKnG,MAFPQ,EAFK,EAELA,KAFK,EAGLsK,MAEF,OAAO,YAAC,IAAD,CAAOW,UAAW,CAAC,OAAQ,MAAO,UAAWvM,IAAI,SAASR,QAASyH,KAAKzH,QAASwN,WAAY1L,EAAM2L,gBAAiB,EAAG7C,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOO,UAAU,EAAM2C,gBAAgB,EAAM5C,gBAAgB,WAAW2F,UAAU,EAAMhG,WAAW,WAAW/D,OAAO,KAAKuH,QAAQ,cAvIvS,GAkBsB3C,IAAMoF,gBA2H5B,iBAAQ,CACN,GAAM,4BADR,4BAGA,8BACE,iBAAGxC,WAAW,cAAd,mFAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oiKAA08JC,QAAS,CACp/JxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChB,QAAQ,cAfX,YAiBI,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KACDxE,MAAQ,CACX8K,MAAO,EACPtK,KAAM,CAAC,CACLhE,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,4BACP,CACDrP,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,8BAGZ,EAAKnN,QAAU,CAAC,CACdC,UAAW,KACXC,MAAO,eACPC,MAAO,KACN,CACDF,UAAW,OACXC,MAAO,eACPC,MAAO,IACP4I,UAAW,SAAC1I,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,KASf7I,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAC9C,IAAIoM,EAAWpM,EAAEF,OAAOT,MACxBe,EAAIsF,KAAO0G,EACX,EAAK3L,SAAS,CACZ2K,MAAOgB,IACN,WACD7M,EAAS,CACPmG,KAAM0G,EACND,OAAQ,eAAOC,QAGlBlC,QAAQ,YAEZ,CACDjL,UAAW,MACXC,MAAO,eACPC,MAAO,IACP4I,UAAW,SAAC1I,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,KASf7I,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnEiJ,IAAKxI,EAAEF,OAAOT,MACd6M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,qBACPC,MAAO,IACP4I,UAAW,SAAC1I,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,KASf7I,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAC5D2M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,MACXC,MAAO,2BACPC,MAAO,IACP4I,UAAW,SAAC1I,EAAOe,GACjB,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,IARF,CACLD,OAAO,EACPC,QAAS,KASf7I,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnE+M,IAAKtM,EAAEF,OAAOT,SACZ6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,eACPE,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAK+M,UAAU,EAAMrC,QAAQ,aA5HjD,EAjBvB,sEAkJalK,GACP,IAAIX,EAAQW,EAAEF,OAAOT,MADX,EAKNoH,KAAKnG,MAFPQ,EAHQ,EAGRA,KAGE+K,GANM,EAIRT,MAES,YAAOtK,IAClB+K,EAAQ1O,SAAQ,SAAA8D,GACdA,EAAEyE,KAAOrG,KAEXoH,KAAKhG,SAAS,CACZ2K,MAAO/L,EACPyB,KAAM+K,MA9Jd,iCAkKezC,EAAayC,EAASC,GAC/BrF,KAAKhG,SAAS,CACZK,KAAM+K,MApKd,iCAyKMpF,KAAKnE,KAAL,OAAoBwG,iBAzK1B,+BA4Kc,IAAD,EAIHrC,KAAKnG,MAFPQ,EAFK,EAELA,KACAsK,EAHK,EAGLA,MAEF,OAAO,uBACT,YAAC,IAAD,CAAO/L,MAAO+L,EAAOzL,SAAU8G,KAAK9G,SAAS4J,KAAK9C,MAAOP,MAAO,CAC1DgB,OAAQ,UACPgD,QAAQ,UACf,YAAC,IAAD,CAAQ5D,QAASG,KAAKmG,SAASrD,KAAK9C,MAAOP,MAAO,CAC5CgB,OAAQ,UACPgD,QAAQ,UAFf,gBAGA,mBAAKhE,MAAO,CACNC,OAAQ,MAEV,YAAC,IAAD,CAAO3G,IAAI,SAASR,QAASyH,KAAKzH,QAASwN,WAAY1L,EAAM0F,UAAU,EAAMiG,gBAAiB,EAAG7C,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOO,UAAU,EAAM2C,gBAAgB,EAAM5C,gBAAgB,WAAWpE,OAAO,KAAKuH,QAAQ,gBA3LtO,GAgBsB3C,IAAMoF,gBAoL5B,iBAAQ,CACN,GAAM,4BADR,4BAGA,YAAC,IAAD,CAAYvC,WAAY,EAAGC,OAAQ,g2GAA4vGC,QAAS,CACtyGxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAmBI,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KACDxE,MAAQ,CACXQ,KAAM,CAAC,CACLhE,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,4BACP,CACDrP,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,8BAGZ,EAAKnN,QAAU,CAAC,CACdC,UAAW,KACXC,MAAO,eACPC,MAAO,KACN,CACDF,UAAW,OACXC,MAAO,eACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GACrD,IAAIoM,EAAWpM,EAAEF,OAAOT,MACxBE,EAAS,CACPmG,KAAM0G,EACND,OAAQ,eAAOC,KAEhBlC,QAAQ,YAEZ,CACDjL,UAAW,MACXC,MAAO,eACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnEiJ,IAAKxI,EAAEF,OAAOT,MACd6M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,qBACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAC5D2M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,MACXC,MAAO,2BACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnE+M,IAAKtM,EAAEF,OAAOT,SACZ6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,eACPE,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAK+M,UAAU,EAAMrC,QAAQ,aAlEjD,EAnBvB,wEA0Fed,EAAayC,EAASC,GAC/BrF,KAAKhG,SAAS,CACZK,KAAM+K,MA5Fd,qCAiGMjH,QAAQC,IAAI,kBAjGlB,+BAoGc,IAAD,EAIH4B,KAAKnG,MAFPQ,EAFK,EAELA,KAFK,EAGLsK,MAEF,OAAO,YAAC,IAAD,CAAO5L,IAAI,SAASR,QAASyH,KAAKzH,QAASwN,WAAY1L,EAAM0F,UAAU,EAAMiG,gBAAiB,EAAG7C,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOoG,SAAUpG,KAAKqG,aAAc9F,UAAU,EAAM0C,gBAAgB,EAAOC,gBAAgB,EAAM5C,gBAAgB,WAAWpE,OAAO,KAAKuH,QAAQ,cAzG/R,GAkBsB3C,IAAMoF,gBA6F5B,iBAAQ,CACN,GAAM,wCADR,wCAGA,YAAC,IAAD,CAAYvC,WAAY,EAAGC,OAAQ,y1HAAmoHC,QAAS,CAC7qHxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAmBI,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KACDxE,MAAQ,CACXQ,KAAM,CAAC,CACLhE,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,4BACP,CACDrP,GAAI,IACJ4I,KAAM,eACN8C,IAAK,GACL0D,OAAQ,qBACRC,OAAQ,8BAGZ,EAAKnN,QAAU,CAAC,CACdC,UAAW,KACXC,MAAO,eACPC,MAAO,KACN,CACDF,UAAW,OACXC,MAAO,eACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GACrD,IAAIoM,EAAWpM,EAAEF,OAAOT,MACxBE,EAAS,CACPmG,KAAM0G,EACND,OAAQ,eAAOC,KAEhBlC,QAAQ,YAEZ,CACDjL,UAAW,MACXC,MAAO,eACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnEiJ,IAAKxI,EAAEF,OAAOT,MACd6M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,qBACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAC5D2M,OAAQlM,EAAEF,OAAOT,SACf6K,QAAQ,YAEb,CACDjL,UAAW,MACXC,MAAO,2BACPC,MAAO,IACPC,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnE+M,IAAKtM,EAAEF,OAAOT,SACZ6K,QAAQ,YAEb,CACDjL,UAAW,SACXC,MAAO,eACPE,OAAQ,SAACC,EAAOe,EAAK5G,EAAO+F,EAAUC,GACpC,OAAO,YAAC,IAAD,CAAOH,MAAOA,EAAOG,IAAKA,EAAK+M,UAAU,EAAMrC,QAAQ,aAlEjD,EAnBvB,wEA0Fed,EAAayC,EAASC,GAC/BrF,KAAKhG,SAAS,CACZK,KAAM+K,MA5Fd,oCAiGM,OAAO,YAAC,IAAD,CAAQ3B,QAAQ,UAAhB,mCAjGb,+BAoGc,IAAD,EAIHzD,KAAKnG,MAFPQ,EAFK,EAELA,KAGEiM,GALG,EAGL3B,MAEU,CAAC,MAAO,OAAQ,SAAU,CACpC4B,KAAM,UACNC,KAAM,2BACNC,QAAS,WACPC,MAAM,sDAEP1G,KAAK2G,cACR,OAAO,YAAC,IAAD,CAAO5N,IAAI,SAASR,QAASyH,KAAKzH,QAASwN,WAAY1L,EAAM0F,UAAU,EAAMiG,gBAAiB,EAAG7C,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOO,UAAU,EAAM2C,gBAAgB,EAAM5C,gBAAgB,WAAWgF,UAAWgB,EAAOM,gBAAiB,CAClPC,SAAU,MACVC,SAAU,+DACVC,SAAU,WACT7K,OAAO,KAAKuH,QAAQ,cApH7B,GAkBsB3C,IAAMoF,gBAwG5B,iBAAQ,CACN,GAAM,kCADR,kCAGA,8BACE,iBAAGxC,WAAW,cAAd,kDAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,wwNAAk1NC,QAAS,CAC53NxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cAjBX,YAmBI,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KACDwC,SAAWC,IAAMC,YACtB,EAAKlH,MAAQ,CACXQ,KAAM,GACNP,SAAS,EACTkH,gBAAiB,IAEnB,EAAKzI,QAAU,CAAC,CACdC,UAAW,WACXxD,IAAK,WACLyD,MAAO,WACPwI,MAAO,OACPC,OAAQ,SACRC,SAAU,IACVC,OAAQ,SAACzH,EAAKf,EAAO7F,GACnB,MAAO,CACL8M,QAAS,WACP,EAAKwB,UAAU1H,MAIrB2H,UAAW,SAAU1I,EAAOe,GAC1B,OAAKf,EAOE,CACL2I,OAAO,EACPC,QAAS,SARF,CACLD,OAAO,EACPC,QAAS,uBASf7I,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CAAC,CACpE,WAAYS,EAAEF,OAAOT,MACrBvC,GAAIsD,EAAItD,IACP,CACDA,GAAI,IACJoL,QAASlI,EAAEF,OAAOT,UACf6K,QAAQ,YAEd,CACDhL,MAAO,cACPC,MAAO,IACPwI,OAAQ,OACRnP,SAAU,CAAC,CACTyG,UAAW,UACXC,MAAO,OACPC,MAAO,IACP0I,OAAQ,SAACzH,EAAKf,EAAO7F,GACnB,MAAO,CACL8M,QAAS,WACP,EAAKwB,UAAU1H,MAIrBhB,OAAQ,SAAUC,EAAOe,EAAK5G,EAAO+F,EAAUC,GAC7C,OAAO,YAAC,IAAD,CAAOE,aAAcL,EAAOG,IAAKA,EAAKG,SAAU,SAAAK,GAAC,OAAIT,EAAS,CACnE2I,QAASlI,EAAEF,OAAOT,SAChB6K,QAAQ,YAEb,CACDhL,MAAO,YACPC,MAAO,IACP3G,SAAU,CAAC,CACTyG,UAAW,KACXC,MAAO,SACPiJ,SAAU,IACVhJ,MAAO,KACN,CACDF,UAAW,QACXC,MAAO,aAGV,CACDD,UAAW,KACXxD,IAAK,WACLyD,MAAO,OAhFQ,EAnBvB,iFAwGM,SAASkJ,EAAWC,EAAOlN,EAAWmN,EAAU9O,GAC9C,KAAI6O,EAAQC,GAAZ,CAOA,IAHA,IAAIC,EAAIF,EACJvH,EAAO,GAEFhI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIoK,EAAI/H,EAAY,IAAMkN,EAAQ,IAAMvP,EACpCmI,EAAI,CACNnE,GAAIoG,EACJ,WAAY,eAAiBA,EAC7BsF,IAAK,GACLH,MAAOA,EACPH,QAAS,yBAA2BpP,GAG5B,IAANA,IACFmI,EAAEzI,SAAW4P,EAAWG,EAAI,EAAGrF,EAAGoF,EAAUxP,IAG9CgI,EAAKpE,KAAKuE,GAGZ,OAAOH,GA0BT2F,KAAKhG,SAAS,CACZK,KAxBF,WAGE,IAFA,IAAIA,EAAO,GAEFhI,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAI2P,EAAYL,EAAW,EAAGtP,EAAG,GAC7BmI,EAAI,CACNnE,GAAI,GAAKhE,EACTuP,MAAO,EACP,WAAY,eAAiBvP,EAC7B0P,IAAK1P,EACLoP,QAAS,yBAA2BpP,GAGlCA,EAAI,IAAM,IACZmI,EAAEzI,SAAWiQ,GAGf3H,EAAKpE,KAAKuE,GAGZ,OAAOH,EAID4H,OA5Jd,gCAgKctI,GACR,IAAIuI,EAAM,GACVA,EAAIjM,KAAK0D,EAAItD,IACb2J,KAAKa,SAASsB,QAAQ/F,IAAIgG,SAASF,KAnKzC,qCAuKMlC,KAAKa,SAASsB,QAAQ/F,IAAIiG,iBAvKhC,mCA2KMrC,KAAKa,SAASsB,QAAQ/F,IAAIkG,eA3KhC,mCA+KM,IAAIJ,EAAM,GACVA,EAAIjM,KAAK,CACPI,GAAI,iBAAkB,IAAIkM,MAAOC,YAEnCxC,KAAKa,SAASsB,QAAQ/F,IAAIqB,WAAW,CACnCpD,KAAM6H,EACNxN,UAAW,IACXgJ,SAAS,EACT+E,SAAS,EACTtD,WAAY,MAxLpB,mCA6LgB,GACNlJ,KAAK,CACPI,GAAI,iBAAkB,IAAIkM,MAAOC,YAEnCxC,KAAKa,SAASsB,QAAQ/F,IAAIsG,WAAW,CAAC,CACpCrM,GAAI,IACJ,WAAY,eAAgB,IAAIkM,MAAOC,UACvCZ,MAAO,OApMf,+BAyMM5B,KAAKa,SAASsB,QAAQ/F,IAAIC,eAzMhC,iCA4MesG,EAAaC,EAASC,GAC/B1E,QAAQC,IAAI,0BAA2BuE,GACvCxE,QAAQC,IAAI,sBAAuBwE,GACnC5C,KAAKhG,SAAS,CACZK,KAAMuI,MAhNd,+BAoNc,IAAD,OACP,OAAO,mBAAKnD,MAAO,CACjBC,OAAQ,SAEhB,YAAC,IAAD,CAAOc,OAAQ,WACL,OAAO,uBACT,YAAC,IAAD,CAAQX,QAAS,EAAKwC,aAAaS,KAAK,GAAOrD,MAAO,CAChDsD,OAAQ,WACPU,QAAQ,UAFf,iBAMA,YAAC,IAAD,CAAQ5D,QAAS,EAAKyC,WAAWQ,KAAK,GAAOrD,MAAO,CAC9CsD,OAAQ,UACRC,WAAY,IACXS,QAAQ,UAHf,eAOA,YAAC,IAAD,CAAQ5D,QAAS,EAAKpC,WAAWqF,KAAK,GAAOrD,MAAO,CAC9CsD,OAAQ,UACRC,WAAY,IACXS,QAAQ,UAHf,eAOA,YAAC,IAAD,CAAQ5D,QAAS,EAAK6C,WAAWI,KAAK,GAAOrD,MAAO,CAC9CsD,OAAQ,UACRC,WAAY,IACXS,QAAQ,UAHf,eAOA,YAAC,IAAD,CAAQ5D,QAAS,EAAI,OAAQiD,KAAK,GAAOrD,MAAO,CAC1CsD,OAAQ,UACRC,WAAY,IACXS,QAAQ,UAHf,YAOG1D,UAAU,EAAOQ,UAAU,EAAM0C,gBAAgB,EAAMC,gBAAgB,EAAMnK,IAAKiH,KAAKa,SAAU3E,OAAO,KAAKiH,WAAYnD,KAAKmD,WAAWL,KAAK9C,MAAOzH,QAASyH,KAAKzH,QAAS0H,WAAW,WAAWC,eAAe,EAAO7F,KAAM2F,KAAKnG,MAAMQ,KAAMiG,gBAAgB,WAAW8C,kBAAkB,EAAOK,QAAQ,eA5PtT,GAkBsB3C,IAAMF,YAgP5B,iBAAQ,CACN,GAAM,gEADR,gEAGA,8BACE,iBAAG8C,WAAW,cAAd,kDAEF,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,cAAeC,QAAS,CACzDxF,MAAO2B,KAAOA,KAAK3B,MAAQA,EAC3ByF,eACAC,UACAC,UACAC,kBACA9L,UACA+L,gBACAC,WACAC,eACAC,WACAC,aACAC,WACAC,UACAC,cACChF,MAAO,CACRC,OAAQ,KACP+D,QAAQ,cACb,YAAC,EAAD,CAASA,QAAQ,c,wLAMnBF,GAAWyD,gBAAiB","file":"static/js/examples-editable-index.63cdce40.js","sourcesContent":["/**\n * Performs a depth-first traversal over all of the node descendants,\n * incrementing currentIndex by 1 for each\n */\nfunction getNodeDataAtTreeIndexOrNextIndex({\n    targetIndex,\n    node,\n    currentIndex,\n    getNodeKey,\n    path = [],\n    lowerSiblingCounts = [],\n    ignoreCollapsed = true,\n    isPseudoRoot = false,\n  }) {\n    // The pseudo-root is not considered in the path\n    const selfPath = !isPseudoRoot\n      ? [...path, getNodeKey({ node, treeIndex: currentIndex })]\n      : [];\n  \n    // Return target node when found\n    if (currentIndex === targetIndex) {\n      return {\n        node,\n        lowerSiblingCounts,\n        path: selfPath,\n      };\n    }\n  \n    // Add one and continue for nodes with no children or hidden children\n    if (!node.children || (ignoreCollapsed && node.expanded !== true)) {\n      return { nextIndex: currentIndex + 1 };\n    }\n  \n    // Iterate over each child and their descendants and return the\n    // target node if childIndex reaches the targetIndex\n    let childIndex = currentIndex + 1;\n    const childCount = node.children.length;\n    for (let i = 0; i < childCount; i += 1) {\n      const result = getNodeDataAtTreeIndexOrNextIndex({\n        ignoreCollapsed,\n        getNodeKey,\n        targetIndex,\n        node: node.children[i],\n        currentIndex: childIndex,\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n        path: selfPath,\n      });\n  \n      if (result.node) {\n        return result;\n      }\n  \n      childIndex = result.nextIndex;\n    }\n  \n    // If the target node is not found, return the farthest traversed index\n    return { nextIndex: childIndex };\n  }\n  \n  export function getDescendantCount({ node, ignoreCollapsed = true }) {\n    return (\n      getNodeDataAtTreeIndexOrNextIndex({\n        getNodeKey: () => {},\n        ignoreCollapsed,\n        node,\n        currentIndex: 0,\n        targetIndex: -1,\n      }).nextIndex - 1\n    );\n  }\n  \n  /**\n   * Walk all descendants of the given node, depth-first\n   *\n   * @param {Object} args - Function parameters\n   * @param {function} args.callback - Function to call on each node\n   * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\n   *                                        as the parent of all the nodes in the tree\n   * @param {Object} args.node - A tree node\n   * @param {Object=} args.parentNode - The parent node of `node`\n   * @param {number} args.currentIndex - The treeIndex of `node`\n   * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\n   * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\n   *                                             previous nodes in this path\n   *\n   * @return {number|false} nextIndex - Index of the next sibling of `node`,\n   *                                    or false if the walk should be terminated\n   */\n  function walkDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot = false,\n    node,\n    parentNode = null,\n    currentIndex,\n    path = [],\n    lowerSiblingCounts = [],\n  }) {\n    // The pseudo-root is not considered in the path\n    const selfPath = isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node, treeIndex: currentIndex })];\n    const selfInfo = isPseudoRoot\n      ? null\n      : {\n          node,\n          parentNode,\n          path: selfPath,\n          lowerSiblingCounts,\n          treeIndex: currentIndex,\n        };\n  \n    if (!isPseudoRoot) {\n      const callbackResult = callback(selfInfo);\n  \n      // Cut walk short if the callback returned false\n      if (callbackResult === false) {\n        return false;\n      }\n    }\n  \n    // Return self on nodes with no children or hidden children\n    if (\n      !node.children ||\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n    ) {\n      return currentIndex;\n    }\n  \n    // Get all descendants\n    let childIndex = currentIndex;\n    const childCount = node.children.length;\n    if (typeof node.children !== 'function') {\n      for (let i = 0; i < childCount; i += 1) {\n        childIndex = walkDescendants({\n          callback,\n          getNodeKey,\n          ignoreCollapsed,\n          node: node.children[i],\n          parentNode: isPseudoRoot ? null : node,\n          currentIndex: childIndex + 1,\n          lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n          path: selfPath,\n        });\n  \n        // Cut walk short if the callback returned false\n        if (childIndex === false) {\n          return false;\n        }\n      }\n    }\n  \n    return childIndex;\n  }\n  \n  /**\n   * Perform a change on the given node and all its descendants, traversing the tree depth-first\n   *\n   * @param {Object} args - Function parameters\n   * @param {function} args.callback - Function to call on each node\n   * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\n   *                                        as the parent of all the nodes in the tree\n   * @param {Object} args.node - A tree node\n   * @param {Object=} args.parentNode - The parent node of `node`\n   * @param {number} args.currentIndex - The treeIndex of `node`\n   * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\n   * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\n   *                                             previous nodes in this path\n   *\n   * @return {number|false} nextIndex - Index of the next sibling of `node`,\n   *                                    or false if the walk should be terminated\n   */\n  function mapDescendants({\n    callback,\n    getNodeKey,\n    ignoreCollapsed,\n    isPseudoRoot = false,\n    node,\n    parentNode = null,\n    currentIndex,\n    path = [],\n    lowerSiblingCounts = [],\n  }) {\n    const nextNode = { ...node };\n  \n    // The pseudo-root is not considered in the path\n    const selfPath = isPseudoRoot\n      ? []\n      : [...path, getNodeKey({ node: nextNode, treeIndex: currentIndex })];\n    const selfInfo = {\n      node: nextNode,\n      parentNode,\n      path: selfPath,\n      lowerSiblingCounts,\n      treeIndex: currentIndex,\n    };\n  \n    // Return self on nodes with no children or hidden children\n    if (\n      !nextNode.children ||\n      (nextNode.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n    ) {\n      return {\n        treeIndex: currentIndex,\n        node: callback(selfInfo),\n      };\n    }\n  \n    // Get all descendants\n    let childIndex = currentIndex;\n    const childCount = nextNode.children.length;\n    if (typeof nextNode.children !== 'function') {\n      nextNode.children = nextNode.children.map((child, i) => {\n        const mapResult = mapDescendants({\n          callback,\n          getNodeKey,\n          ignoreCollapsed,\n          node: child,\n          parentNode: isPseudoRoot ? null : nextNode,\n          currentIndex: childIndex + 1,\n          lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\n          path: selfPath,\n        });\n        childIndex = mapResult.treeIndex;\n  \n        return mapResult.node;\n      });\n    }\n  \n    return {\n      node: callback(selfInfo),\n      treeIndex: childIndex,\n    };\n  }\n  \n  /**\n   * Count all the visible (expanded) descendants in the tree data.\n   *\n   * @param {!Object[]} treeData - Tree data\n   *\n   * @return {number} count\n   */\n  export function getVisibleNodeCount({ treeData }) {\n    const traverse = node => {\n      if (\n        !node.children ||\n        node.expanded !== true ||\n        typeof node.children === 'function'\n      ) {\n        return 1;\n      }\n  \n      return (\n        1 +\n        node.children.reduce(\n          (total, currentNode) => total + traverse(currentNode),\n          0\n        )\n      );\n    };\n  \n    return treeData.reduce(\n      (total, currentNode) => total + traverse(currentNode),\n      0\n    );\n  }\n  \n  /**\n   * Get the <targetIndex>th visible node in the tree data.\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {!number} targetIndex - The index of the node to search for\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   *\n   * @return {{\n   *      node: Object,\n   *      path: []string|[]number,\n   *      lowerSiblingCounts: []number\n   *  }|null} node - The node at targetIndex, or null if not found\n   */\n  export function getVisibleNodeInfoAtIndex({\n    treeData,\n    index: targetIndex,\n    getNodeKey,\n  }) {\n    if (!treeData || treeData.length < 1) {\n      return null;\n    }\n  \n    // Call the tree traversal with a pseudo-root node\n    const result = getNodeDataAtTreeIndexOrNextIndex({\n      targetIndex,\n      getNodeKey,\n      node: {\n        children: treeData,\n        expanded: true,\n      },\n      currentIndex: -1,\n      path: [],\n      lowerSiblingCounts: [],\n      isPseudoRoot: true,\n    });\n  \n    if (result.node) {\n      return result;\n    }\n  \n    return null;\n  }\n  \n  /**\n   * Walk descendants depth-first and call a callback on each\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {function} callback - Function to call on each node\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return void\n   */\n  export function walk({\n    treeData,\n    getNodeKey,\n    callback,\n    ignoreCollapsed = true,\n  }) {\n    if (!treeData || treeData.length < 1) {\n      return;\n    }\n  \n    walkDescendants({\n      callback,\n      getNodeKey,\n      ignoreCollapsed,\n      isPseudoRoot: true,\n      node: { children: treeData },\n      currentIndex: -1,\n      path: [],\n      lowerSiblingCounts: [],\n    });\n  }\n  \n  /**\n   * Perform a depth-first transversal of the descendants and\n   *  make a change to every node in the tree\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {function} callback - Function to call on each node\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {Object[]} changedTreeData - The changed tree data\n   */\n  export function map({\n    treeData,\n    getNodeKey,\n    callback,\n    ignoreCollapsed = true,\n  }) {\n    if (!treeData || treeData.length < 1) {\n      return [];\n    }\n  \n    return mapDescendants({\n      callback,\n      getNodeKey,\n      ignoreCollapsed,\n      isPseudoRoot: true,\n      node: { children: treeData },\n      currentIndex: -1,\n      path: [],\n      lowerSiblingCounts: [],\n    }).node.children;\n  }\n  \n  /**\n   * Expand or close every node in the tree\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {?boolean} expanded - Whether the node is expanded or not\n   *\n   * @return {Object[]} changedTreeData - The changed tree data\n   */\n  export function toggleExpandedForAll({ treeData, expanded = true }) {\n    return map({\n      treeData,\n      callback: ({ node }) => ({ ...node, expanded }),\n      getNodeKey: ({ treeIndex }) => treeIndex,\n      ignoreCollapsed: false,\n    });\n  }\n  \n  /**\n   * Replaces node at path with object, or callback-defined object\n   *\n   * @param {!Object[]} treeData\n   * @param {number[]|string[]} path - Array of keys leading up to node to be changed\n   * @param {function|any} newNode - Node to replace the node at the path with, or a function producing the new node\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {Object[]} changedTreeData - The changed tree data\n   */\n  export function changeNodeAtPath({\n    treeData,\n    path,\n    newNode,\n    getNodeKey,\n    ignoreCollapsed = true,\n  }) {\n    const RESULT_MISS = 'RESULT_MISS';\n    const traverse = ({\n      isPseudoRoot = false,\n      node,\n      currentTreeIndex,\n      pathIndex,\n    }) => {\n      if (\n        !isPseudoRoot &&\n        getNodeKey({ node, treeIndex: currentTreeIndex }) !== path[pathIndex]\n      ) {\n        return RESULT_MISS;\n      }\n  \n      if (pathIndex >= path.length - 1) {\n        // If this is the final location in the path, return its changed form\n        return typeof newNode === 'function'\n          ? newNode({ node, treeIndex: currentTreeIndex })\n          : newNode;\n      }\n      if (!node.children) {\n        // If this node is part of the path, but has no children, return the unchanged node\n        throw new Error('Path referenced children of node with no children.');\n      }\n  \n      let nextTreeIndex = currentTreeIndex + 1;\n      for (let i = 0; i < node.children.length; i += 1) {\n        const result = traverse({\n          node: node.children[i],\n          currentTreeIndex: nextTreeIndex,\n          pathIndex: pathIndex + 1,\n        });\n  \n        // If the result went down the correct path\n        if (result !== RESULT_MISS) {\n          if (result) {\n            // If the result was truthy (in this case, an object),\n            //  pass it to the next level of recursion up\n            return {\n              ...node,\n              children: [\n                ...node.children.slice(0, i),\n                result,\n                ...node.children.slice(i + 1),\n              ],\n            };\n          }\n          // If the result was falsy (returned from the newNode function), then\n          //  delete the node from the array.\n          return {\n            ...node,\n            children: [\n              ...node.children.slice(0, i),\n              ...node.children.slice(i + 1),\n            ],\n          };\n        }\n  \n        nextTreeIndex +=\n          1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\n      }\n  \n      return RESULT_MISS;\n    };\n  \n    // Use a pseudo-root node in the beginning traversal\n    const result = traverse({\n      node: { children: treeData },\n      currentTreeIndex: -1,\n      pathIndex: -1,\n      isPseudoRoot: true,\n    });\n  \n    if (result === RESULT_MISS) {\n      throw new Error('No node found at the given path.');\n    }\n  \n    return result.children;\n  }\n  \n  /**\n   * Removes the node at the specified path and returns the resulting treeData.\n   *\n   * @param {!Object[]} treeData\n   * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {Object[]} changedTreeData - The tree data with the node removed\n   */\n  export function removeNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed = true,\n  }) {\n    return changeNodeAtPath({\n      treeData,\n      path,\n      getNodeKey,\n      ignoreCollapsed,\n      newNode: null, // Delete the node\n    });\n  }\n  \n  /**\n   * Removes the node at the specified path and returns the resulting treeData.\n   *\n   * @param {!Object[]} treeData\n   * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {Object} result\n   * @return {Object[]} result.treeData - The tree data with the node removed\n   * @return {Object} result.node - The node that was removed\n   * @return {number} result.treeIndex - The previous treeIndex of the removed node\n   */\n  export function removeNode({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed = true,\n  }) {\n    let removedNode = null;\n    let removedTreeIndex = null;\n    const nextTreeData = changeNodeAtPath({\n      treeData,\n      path,\n      getNodeKey,\n      ignoreCollapsed,\n      newNode: ({ node, treeIndex }) => {\n        // Store the target node and delete it from the tree\n        removedNode = node;\n        removedTreeIndex = treeIndex;\n  \n        return null;\n      },\n    });\n  \n    return {\n      treeData: nextTreeData,\n      node: removedNode,\n      treeIndex: removedTreeIndex,\n    };\n  }\n  \n  /**\n   * Gets the node at the specified path\n   *\n   * @param {!Object[]} treeData\n   * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {Object|null} nodeInfo - The node info at the given path, or null if not found\n   */\n  export function getNodeAtPath({\n    treeData,\n    path,\n    getNodeKey,\n    ignoreCollapsed = true,\n  }) {\n    let foundNodeInfo = null;\n  \n    try {\n      changeNodeAtPath({\n        treeData,\n        path,\n        getNodeKey,\n        ignoreCollapsed,\n        newNode: ({ node, treeIndex }) => {\n          foundNodeInfo = { node, treeIndex };\n          return node;\n        },\n      });\n    } catch (err) {\n      // Ignore the error -- the null return will be explanation enough\n    }\n  \n    return foundNodeInfo;\n  }\n  \n  /**\n   * Adds the node to the specified parent and returns the resulting treeData.\n   *\n   * @param {!Object[]} treeData\n   * @param {!Object} newNode - The node to insert\n   * @param {number|string} parentKey - The key of the to-be parentNode of the node\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   * @param {boolean=} expandParent - If true, expands the parentNode specified by parentPath\n   * @param {boolean=} addAsFirstChild - If true, adds new node as first child of tree\n   *\n   * @return {Object} result\n   * @return {Object[]} result.treeData - The updated tree data\n   * @return {number} result.treeIndex - The tree index at which the node was inserted\n   */\n  export function addNodeUnderParent({\n    treeData,\n    newNode,\n    parentKey = null,\n    getNodeKey,\n    ignoreCollapsed = true,\n    expandParent = false,\n    addAsFirstChild = false,\n  }) {\n    if (parentKey === null) {\n      return {\n        treeData: [...(treeData || []), newNode],\n        treeIndex: (treeData || []).length,\n      };\n    }\n  \n    let insertedTreeIndex = null;\n    let hasBeenAdded = false;\n    const changedTreeData = map({\n      treeData,\n      getNodeKey,\n      ignoreCollapsed,\n      callback: ({ node, treeIndex, path }) => {\n        const key = path ? path[path.length - 1] : null;\n        // Return nodes that are not the parent as-is\n        if (hasBeenAdded || key !== parentKey) {\n          return node;\n        }\n        hasBeenAdded = true;\n  \n        const parentNode = {\n          ...node,\n        };\n  \n        if (expandParent) {\n          parentNode.expanded = true;\n        }\n  \n        // If no children exist yet, just add the single newNode\n        if (!parentNode.children) {\n          insertedTreeIndex = treeIndex + 1;\n          return {\n            ...parentNode,\n            children: [newNode],\n          };\n        }\n  \n        if (typeof parentNode.children === 'function') {\n          throw new Error('Cannot add to children defined by a function');\n        }\n  \n        let nextTreeIndex = treeIndex + 1;\n        for (let i = 0; i < parentNode.children.length; i += 1) {\n          nextTreeIndex +=\n            1 +\n            getDescendantCount({ node: parentNode.children[i], ignoreCollapsed });\n        }\n  \n        insertedTreeIndex = nextTreeIndex;\n  \n        const children = addAsFirstChild\n          ? [newNode, ...parentNode.children]\n          : [...parentNode.children, newNode];\n  \n        return {\n          ...parentNode,\n          children,\n        };\n      },\n    });\n  \n    if (!hasBeenAdded) {\n      throw new Error('No node found with the given key.');\n    }\n  \n    return {\n      treeData: changedTreeData,\n      treeIndex: insertedTreeIndex,\n    };\n  }\n  \n  function addNodeAtDepthAndIndex({\n    targetDepth,\n    minimumTreeIndex,\n    newNode,\n    ignoreCollapsed,\n    expandParent,\n    isPseudoRoot = false,\n    isLastChild,\n    node,\n    currentIndex,\n    currentDepth,\n    getNodeKey,\n    path = [],\n  }) {\n    const selfPath = n =>\n      isPseudoRoot\n        ? []\n        : [...path, getNodeKey({ node: n, treeIndex: currentIndex })];\n  \n    // If the current position is the only possible place to add, add it\n    if (\n      currentIndex >= minimumTreeIndex - 1 ||\n      (isLastChild && !(node.children && node.children.length))\n    ) {\n      if (typeof node.children === 'function') {\n        throw new Error('Cannot add to children defined by a function');\n      } else {\n        const extraNodeProps = expandParent ? { expanded: true } : {};\n        const nextNode = {\n          ...node,\n  \n          ...extraNodeProps,\n          children: node.children ? [newNode, ...node.children] : [newNode],\n        };\n  \n        return {\n          node: nextNode,\n          nextIndex: currentIndex + 2,\n          insertedTreeIndex: currentIndex + 1,\n          parentPath: selfPath(nextNode),\n          parentNode: isPseudoRoot ? null : nextNode,\n        };\n      }\n    }\n  \n    // If this is the target depth for the insertion,\n    // i.e., where the newNode can be added to the current node's children\n    if (currentDepth >= targetDepth - 1) {\n      // Skip over nodes with no children or hidden children\n      if (\n        !node.children ||\n        typeof node.children === 'function' ||\n        (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n      ) {\n        return { node, nextIndex: currentIndex + 1 };\n      }\n  \n      // Scan over the children to see if there's a place among them that fulfills\n      // the minimumTreeIndex requirement\n      let childIndex = currentIndex + 1;\n      let insertedTreeIndex = null;\n      let insertIndex = null;\n      for (let i = 0; i < node.children.length; i += 1) {\n        // If a valid location is found, mark it as the insertion location and\n        // break out of the loop\n        if (childIndex >= minimumTreeIndex) {\n          insertedTreeIndex = childIndex;\n          insertIndex = i;\n          break;\n        }\n  \n        // Increment the index by the child itself plus the number of descendants it has\n        childIndex +=\n          1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\n      }\n  \n      // If no valid indices to add the node were found\n      if (insertIndex === null) {\n        // If the last position in this node's children is less than the minimum index\n        // and there are more children on the level of this node, return without insertion\n        if (childIndex < minimumTreeIndex && !isLastChild) {\n          return { node, nextIndex: childIndex };\n        }\n  \n        // Use the last position in the children array to insert the newNode\n        insertedTreeIndex = childIndex;\n        insertIndex = node.children.length;\n      }\n  \n      // Insert the newNode at the insertIndex\n      const nextNode = {\n        ...node,\n        children: [\n          ...node.children.slice(0, insertIndex),\n          newNode,\n          ...node.children.slice(insertIndex),\n        ],\n      };\n  \n      // Return node with successful insert result\n      return {\n        node: nextNode,\n        nextIndex: childIndex,\n        insertedTreeIndex,\n        parentPath: selfPath(nextNode),\n        parentNode: isPseudoRoot ? null : nextNode,\n      };\n    }\n  \n    // Skip over nodes with no children or hidden children\n    if (\n      !node.children ||\n      typeof node.children === 'function' ||\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\n    ) {\n      return { node, nextIndex: currentIndex + 1 };\n    }\n  \n    // Get all descendants\n    let insertedTreeIndex = null;\n    let pathFragment = null;\n    let parentNode = null;\n    let childIndex = currentIndex + 1;\n    let newChildren = node.children;\n    if (typeof newChildren !== 'function') {\n      newChildren = newChildren.map((child, i) => {\n        if (insertedTreeIndex !== null) {\n          return child;\n        }\n  \n        const mapResult = addNodeAtDepthAndIndex({\n          targetDepth,\n          minimumTreeIndex,\n          newNode,\n          ignoreCollapsed,\n          expandParent,\n          isLastChild: isLastChild && i === newChildren.length - 1,\n          node: child,\n          currentIndex: childIndex,\n          currentDepth: currentDepth + 1,\n          getNodeKey,\n          path: [], // Cannot determine the parent path until the children have been processed\n        });\n  \n        if ('insertedTreeIndex' in mapResult) {\n          ({\n            insertedTreeIndex,\n            parentNode,\n            parentPath: pathFragment,\n          } = mapResult);\n        }\n  \n        childIndex = mapResult.nextIndex;\n  \n        return mapResult.node;\n      });\n    }\n  \n    const nextNode = { ...node, children: newChildren };\n    const result = {\n      node: nextNode,\n      nextIndex: childIndex,\n    };\n  \n    if (insertedTreeIndex !== null) {\n      result.insertedTreeIndex = insertedTreeIndex;\n      result.parentPath = [...selfPath(nextNode), ...pathFragment];\n      result.parentNode = parentNode;\n    }\n  \n    return result;\n  }\n  \n  /**\n   * Insert a node into the tree at the given depth, after the minimum index\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {!number} depth - The depth to insert the node at (the first level of the array being depth 0)\n   * @param {!number} minimumTreeIndex - The lowest possible treeIndex to insert the node at\n   * @param {!Object} newNode - The node to insert into the tree\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   * @param {boolean=} expandParent - If true, expands the parent of the inserted node\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   *\n   * @return {Object} result\n   * @return {Object[]} result.treeData - The tree data with the node added\n   * @return {number} result.treeIndex - The tree index at which the node was inserted\n   * @return {number[]|string[]} result.path - Array of keys leading to the node location after insertion\n   * @return {Object} result.parentNode - The parent node of the inserted node\n   */\n  export function insertNode({\n    treeData,\n    depth: targetDepth,\n    minimumTreeIndex,\n    newNode,\n    getNodeKey = () => {},\n    ignoreCollapsed = true,\n    expandParent = false,\n  }) {\n    if (!treeData && targetDepth === 0) {\n      return {\n        treeData: [newNode],\n        treeIndex: 0,\n        path: [getNodeKey({ node: newNode, treeIndex: 0 })],\n        parentNode: null,\n      };\n    }\n  \n    const insertResult = addNodeAtDepthAndIndex({\n      targetDepth,\n      minimumTreeIndex,\n      newNode,\n      ignoreCollapsed,\n      expandParent,\n      getNodeKey,\n      isPseudoRoot: true,\n      isLastChild: true,\n      node: { children: treeData },\n      currentIndex: -1,\n      currentDepth: -1,\n    });\n  \n    if (!('insertedTreeIndex' in insertResult)) {\n      throw new Error('No suitable position found to insert.');\n    }\n  \n    const treeIndex = insertResult.insertedTreeIndex;\n    return {\n      treeData: insertResult.node.children,\n      treeIndex,\n      path: [\n        ...insertResult.parentPath,\n        getNodeKey({ node: newNode, treeIndex }),\n      ],\n      parentNode: insertResult.parentNode,\n    };\n  }\n  \n  /**\n   * Get tree data flattened.\n   *\n   * @param {!Object[]} treeData - Tree data\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\n   *\n   * @return {{\n   *      node: Object,\n   *      path: []string|[]number,\n   *      lowerSiblingCounts: []number\n   *  }}[] nodes - The node array\n   */\n  export function getFlatDataFromTree({\n    treeData,\n    getNodeKey,\n    ignoreCollapsed = true,\n  }) {\n    if (!treeData || treeData.length < 1) {\n      return [];\n    }\n  \n    const flattened = [];\n    walk({\n      treeData,\n      getNodeKey,\n      ignoreCollapsed,\n      callback: nodeInfo => {\n        flattened.push(nodeInfo);\n      },\n    });\n  \n    return flattened;\n  }\n  \n  /**\n   * Generate a tree structure from flat data.\n   *\n   * @param {!Object[]} flatData\n   * @param {!function=} getKey - Function to get the key from the nodeData\n   * @param {!function=} getParentKey - Function to get the parent key from the nodeData\n   * @param {string|number=} rootKey - The value returned by `getParentKey` that corresponds to the root node.\n   *                                  For example, if your nodes have id 1-99, you might use rootKey = 0\n   *\n   * @return {Object[]} treeData - The flat data represented as a tree\n   */\n  export function getTreeFromFlatData({\n    flatData,\n    getKey = node => node.id,\n    getParentKey = node => node.parentId,\n    rootKey = '0',\n  }) {\n    if (!flatData) {\n      return [];\n    }\n  \n    const childrenToParents = {};\n    flatData.forEach(child => {\n      const parentKey = getParentKey(child);\n  \n      if (parentKey in childrenToParents) {\n        childrenToParents[parentKey].push(child);\n      } else {\n        childrenToParents[parentKey] = [child];\n      }\n    });\n  \n    if (!(rootKey in childrenToParents)) {\n      return [];\n    }\n  \n    const trav = parent => {\n      const parentKey = getKey(parent);\n      if (parentKey in childrenToParents) {\n        return {\n          ...parent,\n          children: childrenToParents[parentKey].map(child => trav(child)),\n        };\n      }\n  \n      return { ...parent };\n    };\n  \n    return childrenToParents[rootKey].map(child => trav(child));\n  }\n  \n  /**\n   * Check if a node is a descendant of another node.\n   *\n   * @param {!Object} older - Potential ancestor of younger node\n   * @param {!Object} younger - Potential descendant of older node\n   *\n   * @return {boolean}\n   */\n  export function isDescendant(older, younger) {\n    return (\n      !!older.children &&\n      typeof older.children !== 'function' &&\n      older.children.some(\n        child => child === younger || isDescendant(child, younger)\n      )\n    );\n  }\n  \n  /**\n   * Get the maximum depth of the children (the depth of the root node is 0).\n   *\n   * @param {!Object} node - Node in the tree\n   * @param {?number} depth - The current depth\n   *\n   * @return {number} maxDepth - The deepest depth in the tree\n   */\n  export function getDepth(node, depth = 0) {\n    if (!node.children) {\n      return depth;\n    }\n  \n    if (typeof node.children === 'function') {\n      return depth + 1;\n    }\n  \n    return node.children.reduce(\n      (deepest, child) => Math.max(deepest, getDepth(child, depth + 1)),\n      depth\n    );\n  }\n  \n  /**\n   * Find nodes matching a search query in the tree,\n   *\n   * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\n   * @param {!Object[]} treeData - Tree data\n   * @param {?string|number} searchQuery - Function returning a boolean to indicate whether the node is a match or not\n   * @param {!function} searchMethod - Function returning a boolean to indicate whether the node is a match or not\n   * @param {?number} searchFocusOffset - The offset of the match to focus on\n   *                                      (e.g., 0 focuses on the first match, 1 on the second)\n   * @param {boolean=} expandAllMatchPaths - If true, expands the paths to any matched node\n   * @param {boolean=} expandFocusMatchPaths - If true, expands the path to the focused node\n   *\n   * @return {Object[]} matches - An array of objects containing the matching `node`s, their `path`s and `treeIndex`s\n   * @return {Object[]} treeData - The original tree data with all relevant nodes expanded.\n   *                               If expandAllMatchPaths and expandFocusMatchPaths are both false,\n   *                               it will be the same as the original tree data.\n   */\n  export function find({\n    getNodeKey,\n    treeData,\n    searchQuery,\n    searchMethod,\n    searchFocusOffset,\n    expandAllMatchPaths = false,\n    expandFocusMatchPaths = true,\n  }) {\n    let matchCount = 0;\n    const trav = ({ isPseudoRoot = false, node, currentIndex, path = [] }) => {\n      let matches = [];\n      let isSelfMatch = false;\n      let hasFocusMatch = false;\n      // The pseudo-root is not considered in the path\n      const selfPath = isPseudoRoot\n        ? []\n        : [...path, getNodeKey({ node, treeIndex: currentIndex })];\n      const extraInfo = isPseudoRoot\n        ? null\n        : {\n            path: selfPath,\n            treeIndex: currentIndex,\n          };\n  \n      // Nodes with with children that aren't lazy\n      const hasChildren =\n        node.children &&\n        typeof node.children !== 'function' &&\n        node.children.length > 0;\n  \n      // Examine the current node to see if it is a match\n      if (!isPseudoRoot && searchMethod({ ...extraInfo, node, searchQuery })) {\n        if (matchCount === searchFocusOffset) {\n          hasFocusMatch = true;\n        }\n  \n        // Keep track of the number of matching nodes, so we know when the searchFocusOffset\n        //  is reached\n        matchCount += 1;\n  \n        // We cannot add this node to the matches right away, as it may be changed\n        //  during the search of the descendants. The entire node is used in\n        //  comparisons between nodes inside the `matches` and `treeData` results\n        //  of this method (`find`)\n        isSelfMatch = true;\n      }\n  \n      let childIndex = currentIndex;\n      const newNode = { ...node };\n      if (hasChildren) {\n        // Get all descendants\n        newNode.children = newNode.children.map(child => {\n          const mapResult = trav({\n            node: child,\n            currentIndex: childIndex + 1,\n            path: selfPath,\n          });\n  \n          // Ignore hidden nodes by only advancing the index counter to the returned treeIndex\n          // if the child is expanded.\n          //\n          // The child could have been expanded from the start,\n          // or expanded due to a matching node being found in its descendants\n          if (mapResult.node.expanded) {\n            childIndex = mapResult.treeIndex;\n          } else {\n            childIndex += 1;\n          }\n  \n          if (mapResult.matches.length > 0 || mapResult.hasFocusMatch) {\n            matches = [...matches, ...mapResult.matches];\n            if (mapResult.hasFocusMatch) {\n              hasFocusMatch = true;\n            }\n  \n            // Expand the current node if it has descendants matching the search\n            // and the settings are set to do so.\n            if (\n              (expandAllMatchPaths && mapResult.matches.length > 0) ||\n              ((expandAllMatchPaths || expandFocusMatchPaths) &&\n                mapResult.hasFocusMatch)\n            ) {\n              newNode.expanded = true;\n            }\n          }\n  \n          return mapResult.node;\n        });\n      }\n  \n      // Cannot assign a treeIndex to hidden nodes\n      if (!isPseudoRoot && !newNode.expanded) {\n        matches = matches.map(match => ({\n          ...match,\n          treeIndex: null,\n        }));\n      }\n  \n      // Add this node to the matches if it fits the search criteria.\n      // This is performed at the last minute so newNode can be sent in its final form.\n      if (isSelfMatch) {\n        matches = [{ ...extraInfo, node: newNode }, ...matches];\n      }\n  \n      return {\n        node: matches.length > 0 ? newNode : node,\n        matches,\n        hasFocusMatch,\n        treeIndex: childIndex,\n      };\n    };\n  \n    const result = trav({\n      node: { children: treeData },\n      isPseudoRoot: true,\n      currentIndex: -1,\n    });\n  \n    return {\n      matches: result.matches,\n      treeData: result.node.children,\n    };\n  }","import React, { Component } from \"react\";\nimport { Table, unflatten, flatten } from \"tablex\";\nimport { Button, Input, Menu, InputNumber } from \"antd\";\nimport { find } from \"./tree-data-utils\";\nimport _ from \"lodash\";\nimport \"./index.css\";\n\nconst { Search } = Input;\n\nlet BaseUrl = process.env.DOCZ_BASE || \"\";\n\nfunction requestGet(url, options) {\n  let xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", url, true);\n\n  xhr.onreadystatechange = function () { };\n\n  xhr.onload = function () {\n    if (xhr.status == 200) {\n      if (typeof options.onSuccess === \"function\") {\n        var res = {};\n        if (xhr.responseText) {\n          res = JSON.parse(xhr.responseText);\n        }\n        options.onSuccess(res);\n      }\n    }\n  };\n\n  xhr.onerror = options.onError;\n\n  xhr.send();\n}\n\nfunction createData(level, parentKey, maxLevel, index) {\n  if (level > maxLevel) {\n    return;\n  }\n\n  let l = level;\n  let data = [];\n  for (let i = 0; i < 5; i++) {\n    let k = parentKey + \"-\" + level + \"-\" + i;\n    let d = {\n      id: k,\n      name: \"Edward King \" + k,\n      age: 32,\n      address: \"London, Park Lane no. \" + i\n    };\n\n    if (i % 2 === 0) {\n      d.children = createData(l + 1, k, maxLevel, i);\n    }\n\n    data.push(d);\n  }\n  return data;\n}\n\nfunction createTreeData() {\n  let data = [];\n  for (let i = 0; i < 100; i++) {\n    data.push({\n      id: \"\" + i,\n      level: 0,\n      name: \"Edward King \" + i,\n      age: 32,\n      address: \"London, Park Lane no. \" + i,\n      children: createData(0, i, 4)\n    });\n  }\n\n  return data;\n}\n\nclass Demo extends Component {\n  columns = [\n    {\n      dataIndex: \"code\",\n      key: \"code\",\n      title: \"编码\",\n      width: 200\n    },\n    {\n      title: \"名称\",\n      width: 150,\n      key: \"name\",\n      dataIndex: \"name\"\n    },\n    {\n      dataIndex: \"description\",\n      key: \"description\",\n      title: \"特征描述\",\n      width: 150\n    },\n    {\n      dataIndex: \"unit\",\n      key: \"unit\",\n      title: \"单位\",\n      width: 150\n    },\n    {\n      dataIndex: \"quantities\",\n      key: \"quantities\",\n      title: \"工程量\",\n      width: 150,\n      editor: (value, record, index, onchange, ref, validate) => {\n        return (\n          <Input\n            defaultValue={value}\n            ref={ref}\n            onChange={v => {\n              onchange({ quantities: v.target.value });\n            }}\n          />\n        );\n      }\n    },\n    {\n      dataIndex: \"unitPrice\",\n      key: \"unitPrice\",\n      title: \"综合单价\",\n      width: 150,\n      editor: (value, record, index, onchange, ref, validate) => {\n        return (\n          <InputNumber\n            defaultValue={value}\n            ref={ref}\n            onKeyDown={e => {\n              e.stopPropagation();\n            }}\n            onChange={e => {\n              onchange({ unitPrice: e });\n            }}\n          />\n        );\n      }\n    },\n    {\n      dataIndex: \"totalPrice\",\n      key: \"totalPrice\",\n      title: \"合价\",\n      width: 150,\n      render: (value, row) => {\n        let v = row.unitPrice * row.quantities;\n        if (isNaN(v)) {\n          return \"\";\n        }\n        return v;\n      }\n    },\n    {\n      dataIndex: \"evaluation\",\n      key: \"evaluation\",\n      title: \"暂估价\",\n      width: 150\n    }\n  ];\n\n  state = {\n    loading: false,\n    treeData: []\n  };\n\n  getData = () => {\n    this.setState({ loading: true });\n\n    let c = 0;\n    requestGet(BaseUrl + \"/public/data.json\", {\n      onSuccess: data => {\n        data = _.uniqBy(data, d => {\n          return d.code;\n        });\n\n        let bl = false;\n\n        data.forEach(d => {\n          let id = d.code || \"\";\n          let pid = \"\";\n          let len = id.length;\n          d.id = id;\n\n          if (len >= 2) {\n            let pl = 2;\n\n            if (len % 2 !== 0) {\n              pl = 3;\n            }\n\n            if (id === \"040704\") {\n              bl = true;\n            }\n\n            if (bl === true) {\n              pid = \"0407\";\n            } else {\n              pid = id.substring(0, len - pl);\n            }\n          }\n\n          d.pid = pid;\n        });\n\n        let treeData = unflatten(data, \"id\", \"pid\");\n\n        this.setState({\n          loading: false,\n          treeData: treeData \n        });\n      }\n    });\n  };\n\n\n  scrollToItem = index => {\n    if (this.refs.tb) {\n      this.refs.tb.scrollToItem(index, \"center\");\n    }\n  };\n\n  expandTo = (depth = 1) => {\n    this.refs.tb.expandTo(depth);\n  };\n\n  expandAll = () => {\n    this.refs.tb.expandAll();\n  };\n  collapseAll = () => {\n    this.refs.tb.collapseAll();\n  };\n\n\n  rowKey = \"id\";\n  deleteRow = row => {\n    let rowKey = this.rowKey;\n    let key = row[rowKey];\n    this.refs.tb.api.deleteData([key]);\n  };\n\n  copiedRow = null;\n  copy = row => {\n    let rowData = {};\n\n    for (const k in row) {\n      if (row.hasOwnProperty(k) && k !== \"children\") {\n        rowData[k] = row[k];\n      }\n    }\n    let str = JSON.stringify(rowData);\n    this.copiedRow = JSON.stringify(rowData);\n\n    const input = document.createElement(\"input\");\n    document.body.appendChild(input);\n    input.setAttribute(\"value\", str);\n    input.select();\n    if (document.execCommand(\"copy\")) {\n      document.execCommand(\"copy\");\n    }\n    document.body.removeChild(input);\n  };\n\n  pasteChildren = targetRow => {\n    let rowKey = this.rowKey;\n\n    let copiedRow = this.copiedRow;\n\n    if (copiedRow) {\n      let sourceRow = JSON.parse(copiedRow);\n      sourceRow[rowKey] = \"copied_row_\" + sourceRow[rowKey];\n\n      this.refs.tb.api.insertData({\n        data: [sourceRow],\n        parentKey: targetRow[rowKey],\n        editing: true,\n        scrollTo: false\n      });\n\n      this.isCut = false;\n      this.copiedRow = null;\n    }\n  };\n\n  isCut = false;\n  cut = row => {\n    this.copy(row);\n    this.isCut = true;\n  };\n\n\n  selectAll = rowData => {\n    this.refs.tb.selectToggle(rowData);\n  };\n\n  expandToggle = rowData => {\n    this.refs.tb.expandToggle(rowData);\n  };\n\n  onMenuClick = ({ key, item }) => {\n    console.log(\"key:\", item.props.row);\n\n    let actions = {\n      del: this.deleteRow,\n      copy: this.copy,\n      cut: this.cut,\n      pasteChildren: this.pasteChildren,\n      selectAll: this.selectAll,\n      expandToggle: this.expandToggle,\n      export: this.export\n    };\n\n    let fn = actions[key];\n    if (typeof fn === \"function\") {\n      fn(item.props.row);\n    }\n  };\n\n  searchIndex = -1;\n  searchedKey = \"\";\n  onChangeSearch = () => {\n    this.searchIndex = 0;\n    this.searchedKey = \"\";\n  };\n\n  onSearch = v => {\n    if (!v) {\n      this.searchIndex = 0;\n      this.searchedKey = \"\";\n      this.scrollToItem(-1);\n      this.forceUpdate();\n      return;\n    }\n\n    //先展开所有以便查询定位\n    this.expandAll();\n\n    let searchedIndex = -1;\n    let searchedKey = \"\";\n\n    let f = this.refs.tb.findData(d => d.name.indexOf(v) > -1, {\n      startIndex: this.searchIndex,\n      focused: true\n    });\n\n    if (f) {\n      searchedIndex = f.index;\n      searchedKey = f.row.id;\n    }\n\n    if (searchedIndex > -1) {\n      this.searchIndex = searchedIndex + 1;\n      this.searchedKey = searchedKey;\n    } else {\n      this.searchIndex = -1;\n      this.searchedKey = \"\";\n    }\n  };\n\n  onFilter = v => {\n    let { treeData } = this.state;\n    if (!v) {\n      this.setState({ treeData: treeData.slice() }, this.collapseAll);\n      return;\n    }\n\n    this.refs.tb.filterData(d => {\n      return d.name.indexOf(v) > -1;\n    });\n\n    this.expandAll();\n  };\n\n  contentMenu = row => {\n    let menuItemProps = {\n      style: { height: \"auto\", lineHeight: \"normal\" },\n      row\n    };\n\n    return (\n      <Menu selectable={false} onClick={this.onMenuClick}>\n        <Menu.Item key=\"del\" {...menuItemProps}>\n          删除行\n        </Menu.Item>\n        <Menu.Item key=\"copy\" {...menuItemProps}>\n          复制行\n        </Menu.Item>\n        <Menu.Item key=\"cut\" {...menuItemProps}>\n          剪切行\n        </Menu.Item>\n        <Menu.Item key=\"pasteChildren\" {...menuItemProps}>\n          粘贴行(下级)\n        </Menu.Item>\n        <Menu.Item key=\"selectAll\" {...menuItemProps}>\n          全选/全否\n        </Menu.Item>\n        <Menu.Item key=\"expandToggle\" {...menuItemProps}>\n          展开/收缩\n        </Menu.Item>\n        <Menu.Item key=\"export\" {...menuItemProps}>\n          导出\n        </Menu.Item>\n        <Menu.Item key=\"print\" {...menuItemProps}>\n          打印\n        </Menu.Item>\n      </Menu>\n    );\n  };\n\n  render() {\n    return (\n      <div style={{ height: \"100%\" }}>\n        <Table\n          rowKey=\"id\"\n          editable={true}\n          ref=\"tb\"\n          loading={this.state.loading}\n          columns={this.columns}\n          selectMode=\"multiple\"\n          checkStrictly={false}\n          data={this.state.treeData}\n          orderNumber={{ resizable: true }}\n          contextMenu={this.contentMenu}\n          validateTrigger=\"onChange\"\n          isAppend={true}\n          header={() => (\n            <div>\n              <Button onClick={this.getData}>获取数据</Button>\n              <Button onClick={this.expandAll} style={{ margin: \"0 5px\" }}>\n                展开所有\n              </Button>\n              <Button\n                onClick={() => this.expandTo(1)}\n                style={{ margin: \"0 5px\" }}\n              >\n                展开至第二级\n              </Button>\n\n              <Button onClick={this.collapseAll}>折叠所有</Button>\n              <Search\n                style={{ float: \"right\", margin: \"0 5px\", width: \"150px\" }}\n                placeholder=\"输入名称过滤\"\n                onSearch={this.onFilter}\n              />\n              <Search\n                style={{ float: \"right\", margin: \"0 5px\", width: \"150px\" }}\n                placeholder=\"输入名称查找\"\n                onSearch={this.onSearch}\n                onChange={this.onChangeSearch}\n              />\n            </div>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Demo;\n","import React, { Component } from \"react\";\nimport { Table } from \"tablex\";\nimport { Input, Button } from \"antd\";\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tableRef = React.createRef();\n\n    this.state = {\n      data: [],\n      loading: false,\n      expandedRowKeys: []\n    };\n\n    this.columns = [\n      {\n        dataIndex: \"column-1\",\n        key: \"column-1\",\n        title: \"column-1\",\n        align: \"left\",\n        halign: \"center\",\n        minWidth: 300,\n        onCell: (row, value, index) => {\n          return {\n            onClick: () => {\n              this.beginEdit(row);\n            }\n          };\n        },\n        validator: function(value, row) {\n          if (!value) {\n            return { valid: false, message: \"请输入\" };\n          }\n\n          return { valid: true, message: \"false\" };\n        },\n        editor: function(value, row, index, onchange, ref) {\n          return (\n            <Input\n              defaultValue={value}\n              ref={ref}\n              onChange={e =>\n                onchange([\n                  { \"column-1\": e.target.value, id: row.id },\n                  { id: \"3\", address: e.target.value }\n                ])\n              }\n            />\n          );\n        }\n      },\n      {\n        title: \"appellation\",\n        width: 150,\n        halign: \"left\",\n        children: [\n          {\n            dataIndex: \"address\",\n            title: \"name\",\n            width: 200,\n            onCell: (row, value, index) => {\n              return {\n                onClick: () => {\n                  this.beginEdit(row);\n                }\n              };\n            },\n            editor: function(value, row, index, onchange, ref) {\n              return (\n                <Input\n                  defaultValue={value}\n                  ref={ref}\n                  onChange={e => onchange({ address: e.target.value })}\n                />\n              );\n            }\n          },\n          {\n            title: \"nick name\",\n            width: 150,\n            children: [\n              {\n                dataIndex: \"id\",\n                title: \"nick-1\",\n                maxWidth: 300,\n                width: 150\n              },\n              {\n                dataIndex: \"level\",\n                title: \"level\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        dataIndex: \"id\",\n        key: \"column-4\",\n        title: \"id\"\n      }\n    ];\n  }\n\n  componentDidMount() {\n    function createData(level, parentKey, maxLevel, index) {\n      if (level > maxLevel) {\n        return;\n      }\n\n      let l = level;\n      let data = [];\n      for (let i = 0; i < 3; i++) {\n        let k = parentKey + \"-\" + level + \"-\" + i;\n        let d = {\n          id: k,\n          \"column-1\": \"Edward King \" + k,\n          age: 32,\n          level: level,\n          address: \"London, Park Lane no. \" + i\n        };\n\n        if (i === 2) {\n          d.children = createData(l + 1, k, maxLevel, i);\n        }\n\n        data.push(d);\n      }\n      return data;\n    }\n\n    function createTreeData() {\n      let data = [];\n      for (let i = 0; i < 10; i++) {\n        let childrens = createData(0, i, 2);\n        let d = {\n          id: \"\" + i,\n          level: 0,\n          \"column-1\": \"Edward King \" + i,\n          age: i,\n          address: \"London, Park Lane no. \" + i\n        };\n\n        if (i % 3 === 0) {\n          d.children = childrens;\n        }\n\n        data.push(d);\n      }\n\n      return data;\n    }\n\n    this.setState({\n      data: createTreeData()\n    });\n  }\n\n  beginEdit(row) {\n    let arr = [];\n    arr.push(row.id);\n    this.tableRef.current.api.editRows(arr);\n  }\n\n  completeEdit() {\n    this.tableRef.current.api.completeEdit();\n  }\n\n  cancelEdit() {\n    this.tableRef.current.api.cancelEdit();\n  }\n\n  insertData() {\n    let arr = [];\n    arr.push({ id: \"inserted-row-\" + new Date().getTime() });\n\n    this.tableRef.current.api.insertData({\n      data: arr,\n      parentKey: \"3\",\n      editing: true,\n      prepend: false,\n      startIndex: 2\n    });\n  }\n\n  modifyData() {\n    let arr = [];\n    arr.push({ id: \"inserted-row-\" + new Date().getTime() });\n\n    this.tableRef.current.api.modifyData([\n      {\n        id: \"3\",\n        \"column-1\": \"modifyData-\" + new Date().getTime(),\n        level: 3\n      }\n    ]);\n  }\n\n  delete() {\n    this.tableRef.current.api.deleteData();\n  }\n\n  onEditSave(changedRows, newRows, editType) {\n    console.log(\"onEditSave changedRows:\", changedRows);\n    console.log(\"onEditSave newRows:\", newRows);\n    this.setState({ data: newRows });\n  }\n\n  render() {\n    return (\n      <div style={{ height: \"100%\" }}>\n        <Table\n          header={() => {\n            return (\n              <div>\n                <Button\n                  onClick={this.completeEdit.bind(this)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  complete edit\n                </Button>\n\n                <Button\n                  onClick={this.cancelEdit.bind(this)}\n                  style={{ cursor: \"pointer\", marginLeft: 10 }}\n                >\n                  cancel edit\n                </Button>\n\n                <Button\n                  onClick={this.insertData.bind(this)}\n                  style={{ cursor: \"pointer\", marginLeft: 10 }}\n                >\n                  insert data\n                </Button>\n\n                <Button\n                  onClick={this.modifyData.bind(this)}\n                  style={{ cursor: \"pointer\", marginLeft: 10 }}\n                >\n                  modify data\n                </Button>\n\n                <Button\n                  onClick={this.delete.bind(this)}\n                  style={{ cursor: \"pointer\", marginLeft: 10 }}\n                >\n                  delete\n                </Button>\n              </div>\n            );\n          }}\n          editable={false}\n          isAppend={false}\n          allowSaveEmpty={true}\n          alwaysValidate={true}\n          ref={this.tableRef}\n          rowKey=\"id\"\n          onEditSave={this.onEditSave.bind(this)}\n          columns={this.columns}\n          selectMode=\"multiple\"\n          checkStrictly={false}\n          data={this.state.data}\n          validateTrigger=\"onChange\"\n          selectOnRowClick={false}\n        />\n      </div>\n    );\n  }\n}\nexport default Demo;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input, InputNumber, Select, DatePicker, Switch, Checkbox,Button } from \"antd\";\nimport Complex from \"./complex\";\nimport CustomEdit from \"./customEdit\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"用法示例\"\n    }}>{`用法示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"sy-framework/lib/widget/table\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"基本编辑及验证\"\n    }}>{`基本编辑及验证`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`编辑有追加模式、非追加模式两种，通过isAppend=true|false 控制，追加模式不会更改当前表格视图的显示数据，否则将会清空当前表格数据视图（不影响数据）`}</p>\n    </blockquote>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-1\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 10)\\n\\n      data[1].children = this.generateData(columns, 3, \\'children-\\')\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    onEditSave(changedRows, newData, type) {\\n      console.log(\\'onEditSave:\\', newData)\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          validateTrigger=\\\"onChange\\\"\\n          data={data}\\n          editable={true}\\n          selectMode={\\'multiple\\'}\\n          checkStrictly={false}\\n          editTools={[\\'edit\\', \\'add\\', \\'delete\\']}\\n          onEditSave={this.onEditSave.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            title: \"column-1\",\n            width: 100,\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                [\"column-1\"]: e.target.value\n              })} mdxType=\"Input\" />;\n            }\n          }, {\n            dataIndex: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 10);\n          data[1].children = this.generateData(columns, 3, \"children-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        onEditSave(changedRows, newData, type) {\n          console.log(\"onEditSave:\", newData);\n          this.setState({\n            data: newData\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} validateTrigger=\"onChange\" data={data} editable={true} selectMode={\"multiple\"} checkStrictly={false} editTools={['edit', 'add', 'delete']} onEditSave={this.onEditSave.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"编辑器无边框\"\n    }}>{`编辑器无边框`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`此模式，只对antd内置的input、datepicker、inputnumber、select生效。若想自定义，可通过自定义样式进行覆盖`}</p>\n    </blockquote>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-1\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <InputNumber\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-2\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <Select\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-3\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <DatePicker\\n                placeholder=\\\"\\\"\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-4\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <Switch\\n                ref={ref}\\n                onChange={e => onchange({ [\\'column-5\\']: e.target.value })}\\n              />\\n            )\\n          },\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 10)\\n\\n      data[1].children = this.generateData(columns, 3, \\'children-\\')\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    onEditSave(changedRows, newData, type) {\\n      console.log(\\'onEditSave:\\', newData)\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n    componentDidMount() {\\n      this.refs.tableRef.api.editAll()\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          ref=\\\"tableRef\\\"\\n          columns={columns}\\n          validateTrigger=\\\"onChange\\\"\\n          data={data}\\n          editorNoBorder={true}\\n          editable={true}\\n          selectMode={\\'multiple\\'}\\n          checkStrictly={false}\\n          editTools={[\\'edit\\', \\'add\\', \\'delete\\']}\\n          onEditSave={this.onEditSave.bind(this)}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            title: \"column-1\",\n            width: 100,\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                [\"column-1\"]: e.target.value\n              })} mdxType=\"Input\" />;\n            }\n          }, {\n            dataIndex: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\",\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <InputNumber defaultValue={value} ref={ref} onChange={e => onchange({\n                [\"column-2\"]: e.target.value\n              })} mdxType=\"InputNumber\" />;\n            }\n          }, {\n            dataIndex: \"column-3\",\n            title: \"column-3\",\n            align: \"right\",\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <Select defaultValue={value} ref={ref} onChange={e => onchange({\n                [\"column-3\"]: e.target.value\n              })} mdxType=\"Select\" />;\n            }\n          }, {\n            dataIndex: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\",\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <DatePicker placeholder=\"\" ref={ref} onChange={e => onchange({\n                [\"column-4\"]: e.target.value\n              })} mdxType=\"DatePicker\" />;\n            }\n          }, {\n            dataIndex: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\",\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <Switch ref={ref} onChange={e => onchange({\n                [\"column-5\"]: e.target.value\n              })} mdxType=\"Switch\" />;\n            }\n          }];\n          let data = this.generateData(columns, 10);\n          data[1].children = this.generateData(columns, 3, \"children-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        onEditSave(changedRows, newData, type) {\n          console.log(\"onEditSave:\", newData);\n          this.setState({\n            data: newData\n          });\n        }\n\n        componentDidMount() {\n          this.refs.tableRef.api.editAll();\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" ref=\"tableRef\" columns={columns} validateTrigger=\"onChange\" data={data} editorNoBorder={true} editable={true} selectMode={\"multiple\"} checkStrictly={false} editTools={['edit', 'add', 'delete']} onEditSave={this.onEditSave.bind(this)} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"只读模式\"\n    }}>{`只读模式`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`只读模式将不显示编辑栏及复选框，也无法进行行选择`}</p>\n    </blockquote>\n    <Playground __position={2} __code={'class Demo extends React.PureComponent {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        data: [\\n          {\\n            id: \\'1\\',\\n            name: \\'张三\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是张三\\',\\n          },\\n          {\\n            id: \\'2\\',\\n            name: \\'李四\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是李四\\',\\n          },\\n        ],\\n      }\\n\\n      this.columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'编号\\',\\n          width: 200,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => {\\n                  let newValue = e.target.value\\n                  onchange({ number: newValue })\\n                }}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          width: 150,\\n          dataIndex: \\'name\\',\\n          title: \\'姓名\\',\\n          width: 150,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => {\\n                  let newValue = e.target.value\\n                  onchange({ name: newValue })\\n                }}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'age\\',\\n          title: \\'年龄\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e =>\\n                  onchange({ age: e.target.value, idcard: e.target.value })\\n                }\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'idcard\\',\\n          title: \\'身份证\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                value={value}\\n                ref={ref}\\n                onChange={e => onchange({ idcard: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'tel\\',\\n          title: \\'电话号码\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ tel: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'remark\\',\\n          title: \\'备注\\',\\n          editor: (value, row, index, onchange, ref) => {\\n            return <Input value={value} ref={ref} disabled={true}></Input>\\n          },\\n        },\\n      ]\\n    }\\n    onEditSave(changedRows, newData, type) {\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n\\n    render() {\\n      let { data, count } = this.state\\n\\n      return (\\n        <Table\\n          editTools={[\\'edit\\', \\'add\\', \\'delete\\']}\\n          ref=\\\"etable\\\"\\n          columns={this.columns}\\n          dataSource={data}\\n          defaultAddCount={1}\\n          onEditSave={this.onEditSave.bind(this)}\\n          isAppend={true}\\n          alwaysValidate={true}\\n          validateTrigger=\\\"onChange\\\"\\n          readOnly={true}\\n          selectMode=\\\"multiple\\\"\\n          rowKey=\\\"id\\\"\\n        ></Table>\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n      {class Demo extends React.PureComponent {\n        constructor(props) {\n          super(props);\n          this.state = {\n            data: [{\n              id: \"1\",\n              name: \"张三\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是张三\"\n            }, {\n              id: \"2\",\n              name: \"李四\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是李四\"\n            }]\n          };\n          this.columns = [{\n            dataIndex: \"id\",\n            title: \"编号\",\n            width: 200,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => {\n                let newValue = e.target.value;\n                onchange({\n                  number: newValue\n                });\n              }} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            width: 150,\n            dataIndex: \"name\",\n            title: \"姓名\",\n            width: 150,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => {\n                let newValue = e.target.value;\n                onchange({\n                  name: newValue\n                });\n              }} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"age\",\n            title: \"年龄\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                age: e.target.value,\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"idcard\",\n            title: \"身份证\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} onChange={e => onchange({\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"tel\",\n            title: \"电话号码\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                tel: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"remark\",\n            title: \"备注\",\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} disabled={true} mdxType=\"Input\"></Input>;\n            }\n          }];\n        }\n\n        onEditSave(changedRows, newData, type) {\n          this.setState({\n            data: newData\n          });\n        }\n\n        render() {\n          let {\n            data,\n            count\n          } = this.state;\n          return <Table editTools={[\"edit\", \"add\", \"delete\"]} ref=\"etable\" columns={this.columns} dataSource={data} defaultAddCount={1} onEditSave={this.onEditSave.bind(this)} isAppend={true} alwaysValidate={true} validateTrigger=\"onChange\" readOnly={true} selectMode=\"multiple\" rowKey=\"id\" mdxType=\"Table\">\n            </Table>;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"数据联动\"\n    }}>{`数据联动`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`外部数据同表格数据相互联动`}</p>\n    </blockquote>\n    <Playground __position={3} __code={'class Demo extends React.PureComponent {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        count: 0,\\n        data: [\\n          {\\n            id: \\'1\\',\\n            name: \\'张三\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是张三\\',\\n          },\\n          {\\n            id: \\'2\\',\\n            name: \\'李四\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是李四\\',\\n          },\\n        ],\\n      }\\n\\n      this.columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'编号\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'name\\',\\n          title: \\'姓名\\',\\n          width: 150,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                value={value}\\n                ref={ref}\\n                onChange={e => {\\n                  let newValue = e.target.value\\n\\n                  row.name = newValue\\n\\n                  this.setState(\\n                    {\\n                      count: newValue,\\n                    },\\n                    () => {\\n                      onchange({ name: newValue, remark: \\'我是\\' + newValue })\\n                    },\\n                  )\\n                }}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'age\\',\\n          title: \\'年龄\\',\\n          width: 150,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e =>\\n                  onchange({ age: e.target.value, idcard: e.target.value })\\n                }\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'idcard\\',\\n          title: \\'身份证\\',\\n          width: 150,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                value={value}\\n                ref={ref}\\n                onChange={e => onchange({ idcard: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'tel\\',\\n          title: \\'电话号码\\',\\n          width: 150,\\n          validator: (value, row) => {\\n            if (!value) {\\n              return { valid: false, message: \\'\\' }\\n            }\\n\\n            return { valid: true, message: \\'\\' }\\n          },\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ tel: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'remark\\',\\n          title: \\'备注\\',\\n          editor: (value, row, index, onchange, ref) => {\\n            return <Input value={value} ref={ref} disabled={true}></Input>\\n          },\\n        },\\n      ]\\n    }\\n    onChange(e) {\\n      let value = e.target.value\\n\\n      let { data, count } = this.state\\n\\n      let newData = [...data]\\n\\n      newData.forEach(d => {\\n        d.name = value\\n      })\\n\\n      this.setState({\\n        count: value,\\n        data: newData,\\n      })\\n    }\\n\\n    onEditSave(changedRows, newData, type) {\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n\\n    complete() {\\n      this.refs[\\'etable\\'].completeEdit()\\n    }\\n\\n    render() {\\n      let { data, count } = this.state\\n\\n      return (\\n        <div>\\n          <Input\\n            value={count}\\n            onChange={this.onChange.bind(this)}\\n            style={{ margin: \\'10px 0\\' }}\\n          ></Input>\\n          <Button\\n            onClick={this.complete.bind(this)}\\n            style={{ margin: \\'10px 0\\' }}\\n          >\\n            完成\\n          </Button>\\n          <div style={{ height: 400 }}>\\n            <Table\\n              ref=\\\"etable\\\"\\n              columns={this.columns}\\n              dataSource={data}\\n              editable={true}\\n              defaultAddCount={1}\\n              onEditSave={this.onEditSave.bind(this)}\\n              isAppend={true}\\n              alwaysValidate={true}\\n              validateTrigger=\\\"onChange\\\"\\n              rowKey=\\\"id\\\"\\n            ></Table>\\n          </div>\\n        </div>\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} mdxType=\"Playground\">\n      {class Demo extends React.PureComponent {\n        constructor(props) {\n          super(props);\n          this.state = {\n            count: 0,\n            data: [{\n              id: \"1\",\n              name: \"张三\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是张三\"\n            }, {\n              id: \"2\",\n              name: \"李四\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是李四\"\n            }]\n          };\n          this.columns = [{\n            dataIndex: \"id\",\n            title: \"编号\",\n            width: 200\n          }, {\n            dataIndex: \"name\",\n            title: \"姓名\",\n            width: 150,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} onChange={e => {\n                let newValue = e.target.value;\n                row.name = newValue;\n                this.setState({\n                  count: newValue\n                }, () => {\n                  onchange({\n                    name: newValue,\n                    remark: \"我是\" + newValue\n                  });\n                });\n              }} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"age\",\n            title: \"年龄\",\n            width: 150,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                age: e.target.value,\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"idcard\",\n            title: \"身份证\",\n            width: 150,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} onChange={e => onchange({\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"tel\",\n            title: \"电话号码\",\n            width: 150,\n            validator: (value, row) => {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"\"\n              };\n            },\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                tel: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"remark\",\n            title: \"备注\",\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} disabled={true} mdxType=\"Input\"></Input>;\n            }\n          }];\n        }\n\n        onChange(e) {\n          let value = e.target.value;\n          let {\n            data,\n            count\n          } = this.state;\n          let newData = [...data];\n          newData.forEach(d => {\n            d.name = value;\n          });\n          this.setState({\n            count: value,\n            data: newData\n          });\n        }\n\n        onEditSave(changedRows, newData, type) {\n          this.setState({\n            data: newData\n          });\n        }\n\n        complete() {\n          this.refs[\"etable\"].completeEdit();\n        }\n\n        render() {\n          let {\n            data,\n            count\n          } = this.state;\n          return <div>\n        <Input value={count} onChange={this.onChange.bind(this)} style={{\n              margin: \"10px 0\"\n            }} mdxType=\"Input\"></Input>\n        <Button onClick={this.complete.bind(this)} style={{\n              margin: \"10px 0\"\n            }} mdxType=\"Button\">完成</Button>\n        <div style={{\n              height: 400\n            }}>\n            <Table ref=\"etable\" columns={this.columns} dataSource={data} editable={true} defaultAddCount={1} onEditSave={this.onEditSave.bind(this)} isAppend={true} alwaysValidate={true} validateTrigger=\"onChange\" rowKey=\"id\" mdxType=\"Table\">\n            </Table>\n        </div>\n\n    </div>;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"新增多行\"\n    }}>{`新增多行`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.PureComponent {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        data: [\\n          {\\n            id: \\'1\\',\\n            name: \\'张三\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是张三\\',\\n          },\\n          {\\n            id: \\'2\\',\\n            name: \\'李四\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是李四\\',\\n          },\\n        ],\\n      }\\n\\n      this.columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'编号\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'name\\',\\n          title: \\'姓名\\',\\n          width: 150,\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => {\\n                  let newValue = e.target.value\\n                  onchange({ name: newValue, remark: \\'我是\\' + newValue })\\n                }}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'age\\',\\n          title: \\'年龄\\',\\n          width: 150,\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e =>\\n                  onchange({ age: e.target.value, idcard: e.target.value })\\n                }\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'idcard\\',\\n          title: \\'身份证\\',\\n          width: 150,\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                value={value}\\n                ref={ref}\\n                onChange={e => onchange({ idcard: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'tel\\',\\n          title: \\'电话号码\\',\\n          width: 150,\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ tel: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'remark\\',\\n          title: \\'备注\\',\\n          editor: (value, row, index, onchange, ref) => {\\n            return <Input value={value} ref={ref} disabled={true}></Input>\\n          },\\n        },\\n      ]\\n    }\\n    onEditSave(changedRows, newData, type) {\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n    onEditCancel() {\\n      console.log(\\'onEditCancel\\')\\n    }\\n    render() {\\n      let { data, count } = this.state\\n\\n      return (\\n        <Table\\n          ref=\\\"etable\\\"\\n          columns={this.columns}\\n          dataSource={data}\\n          editable={true}\\n          defaultAddCount={5}\\n          onEditSave={this.onEditSave.bind(this)}\\n          onCancel={this.onEditCancel}\\n          isAppend={true}\\n          allowSaveEmpty={false}\\n          alwaysValidate={true}\\n          validateTrigger=\\\"onChange\\\"\\n          rowKey=\\\"id\\\"\\n        ></Table>\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n      {class Demo extends React.PureComponent {\n        constructor(props) {\n          super(props);\n          this.state = {\n            data: [{\n              id: \"1\",\n              name: \"张三\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是张三\"\n            }, {\n              id: \"2\",\n              name: \"李四\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是李四\"\n            }]\n          };\n          this.columns = [{\n            dataIndex: \"id\",\n            title: \"编号\",\n            width: 200\n          }, {\n            dataIndex: \"name\",\n            title: \"姓名\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => {\n                let newValue = e.target.value;\n                onchange({\n                  name: newValue,\n                  remark: \"我是\" + newValue\n                });\n              }} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"age\",\n            title: \"年龄\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                age: e.target.value,\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"idcard\",\n            title: \"身份证\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} onChange={e => onchange({\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"tel\",\n            title: \"电话号码\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                tel: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"remark\",\n            title: \"备注\",\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} disabled={true} mdxType=\"Input\"></Input>;\n            }\n          }];\n        }\n\n        onEditSave(changedRows, newData, type) {\n          this.setState({\n            data: newData\n          });\n        }\n\n        onEditCancel() {\n          console.log(\"onEditCancel\");\n        }\n\n        render() {\n          let {\n            data,\n            count\n          } = this.state;\n          return <Table ref=\"etable\" columns={this.columns} dataSource={data} editable={true} defaultAddCount={5} onEditSave={this.onEditSave.bind(this)} onCancel={this.onEditCancel} isAppend={true} allowSaveEmpty={false} alwaysValidate={true} validateTrigger=\"onChange\" rowKey=\"id\" mdxType=\"Table\">\n            </Table>;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义工具栏\"\n    }}>{`自定义工具栏`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.PureComponent {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        data: [\\n          {\\n            id: \\'1\\',\\n            name: \\'张三\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是张三\\',\\n          },\\n          {\\n            id: \\'2\\',\\n            name: \\'李四\\',\\n            age: 20,\\n            idcard: \\'512878211145551112\\',\\n            remark: \\'我是李四\\',\\n          },\\n        ],\\n      }\\n\\n      this.columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'编号\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'name\\',\\n          title: \\'姓名\\',\\n          width: 150,\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => {\\n                  let newValue = e.target.value\\n                  onchange({ name: newValue, remark: \\'我是\\' + newValue })\\n                }}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'age\\',\\n          title: \\'年龄\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e =>\\n                  onchange({ age: e.target.value, idcard: e.target.value })\\n                }\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'idcard\\',\\n          title: \\'身份证\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                value={value}\\n                ref={ref}\\n                onChange={e => onchange({ idcard: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'tel\\',\\n          title: \\'电话号码\\',\\n          width: 150,\\n\\n          editor: (value, row, index, onchange, ref) => {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e => onchange({ tel: e.target.value })}\\n              ></Input>\\n            )\\n          },\\n        },\\n        {\\n          dataIndex: \\'remark\\',\\n          title: \\'备注\\',\\n          editor: (value, row, index, onchange, ref) => {\\n            return <Input value={value} ref={ref} disabled={true}></Input>\\n          },\\n        },\\n      ]\\n    }\\n    onEditSave(changedRows, newData, type) {\\n      this.setState({\\n        data: newData,\\n      })\\n    }\\n\\n    customTools() {\\n      return <Button>tools传递函数</Button>\\n    }\\n\\n    render() {\\n      let { data, count } = this.state\\n\\n      let tools = [\\n        \\'add\\',\\n        \\'edit\\',\\n        \\'delete\\',\\n        {\\n          icon: \\'message\\',\\n          text: \\'查看消息\\',\\n          handler: () => {\\n            alert(\\'点击了自定义按钮\\')\\n          },\\n        },\\n        this.customTools,\\n      ]\\n\\n      return (\\n        <Table\\n          ref=\\\"etable\\\"\\n          columns={this.columns}\\n          dataSource={data}\\n          editable={true}\\n          defaultAddCount={1}\\n          onEditSave={this.onEditSave.bind(this)}\\n          isAppend={true}\\n          alwaysValidate={true}\\n          validateTrigger=\\\"onChange\\\"\\n          editTools={tools}\\n          editToolsConfig={{\\n            position: \\'top\\',\\n            editText: \\'自定义编辑按钮及图标\\',\\n            editIcon: \\'message\\',\\n          }}\\n          rowKey=\\\"id\\\"\\n        ></Table>\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n      {class Demo extends React.PureComponent {\n        constructor(props) {\n          super(props);\n          this.state = {\n            data: [{\n              id: \"1\",\n              name: \"张三\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是张三\"\n            }, {\n              id: \"2\",\n              name: \"李四\",\n              age: 20,\n              idcard: \"512878211145551112\",\n              remark: \"我是李四\"\n            }]\n          };\n          this.columns = [{\n            dataIndex: \"id\",\n            title: \"编号\",\n            width: 200\n          }, {\n            dataIndex: \"name\",\n            title: \"姓名\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => {\n                let newValue = e.target.value;\n                onchange({\n                  name: newValue,\n                  remark: \"我是\" + newValue\n                });\n              }} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"age\",\n            title: \"年龄\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                age: e.target.value,\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"idcard\",\n            title: \"身份证\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} onChange={e => onchange({\n                idcard: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"tel\",\n            title: \"电话号码\",\n            width: 150,\n            editor: (value, row, index, onchange, ref) => {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                tel: e.target.value\n              })} mdxType=\"Input\"></Input>;\n            }\n          }, {\n            dataIndex: \"remark\",\n            title: \"备注\",\n            editor: (value, row, index, onchange, ref) => {\n              return <Input value={value} ref={ref} disabled={true} mdxType=\"Input\"></Input>;\n            }\n          }];\n        }\n\n        onEditSave(changedRows, newData, type) {\n          this.setState({\n            data: newData\n          });\n        }\n\n        customTools() {\n          return <Button mdxType=\"Button\">tools传递函数</Button>;\n        }\n\n        render() {\n          let {\n            data,\n            count\n          } = this.state;\n          let tools = [\"add\", \"edit\", \"delete\", {\n            icon: \"message\",\n            text: \"查看消息\",\n            handler: () => {\n              alert(\"点击了自定义按钮\");\n            }\n          }, this.customTools];\n          return <Table ref=\"etable\" columns={this.columns} dataSource={data} editable={true} defaultAddCount={1} onEditSave={this.onEditSave.bind(this)} isAppend={true} alwaysValidate={true} validateTrigger=\"onChange\" editTools={tools} editToolsConfig={{\n            position: \"top\",\n            editText: \"自定义编辑按钮及图标\",\n            editIcon: \"message\"\n          }} rowKey=\"id\" mdxType=\"Table\">\n          </Table>;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义编辑\"\n    }}>{`自定义编辑`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`使用表格内置的API`}</p>\n    </blockquote>\n    <Playground __position={6} __code={'class Demo extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.tableRef = React.createRef()\\n\\n      this.state = {\\n        data: [],\\n        loading: false,\\n        expandedRowKeys: [],\\n      }\\n\\n      this.columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          align: \\'left\\',\\n          halign: \\'center\\',\\n          minWidth: 300,\\n          onCell: (row, value, index) => {\\n            return {\\n              onClick: () => {\\n                this.beginEdit(row)\\n              },\\n            }\\n          },\\n          validator: function(value, row) {\\n            if (!value) {\\n              return { valid: false, message: \\'请输入\\' }\\n            }\\n\\n            return { valid: true, message: \\'false\\' }\\n          },\\n          editor: function(value, row, index, onchange, ref) {\\n            return (\\n              <Input\\n                defaultValue={value}\\n                ref={ref}\\n                onChange={e =>\\n                  onchange([\\n                    { \\'column-1\\': e.target.value, id: row.id },\\n                    { id: \\'3\\', address: e.target.value },\\n                  ])\\n                }\\n              />\\n            )\\n          },\\n        },\\n        {\\n          title: \\'appellation\\',\\n          width: 150,\\n          halign: \\'left\\',\\n          children: [\\n            {\\n              dataIndex: \\'address\\',\\n              title: \\'name\\',\\n              width: 200,\\n              onCell: (row, value, index) => {\\n                return {\\n                  onClick: () => {\\n                    this.beginEdit(row)\\n                  },\\n                }\\n              },\\n              editor: function(value, row, index, onchange, ref) {\\n                return (\\n                  <Input\\n                    defaultValue={value}\\n                    ref={ref}\\n                    onChange={e => onchange({ address: e.target.value })}\\n                  />\\n                )\\n              },\\n            },\\n            {\\n              title: \\'nick name\\',\\n              width: 150,\\n              children: [\\n                {\\n                  dataIndex: \\'id\\',\\n                  title: \\'nick-1\\',\\n                  maxWidth: 300,\\n                  width: 150,\\n                },\\n                {\\n                  dataIndex: \\'level\\',\\n                  title: \\'level\\',\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          key: \\'column-4\\',\\n          title: \\'id\\',\\n        },\\n      ]\\n    }\\n    componentDidMount() {\\n      function createData(level, parentKey, maxLevel, index) {\\n        if (level > maxLevel) {\\n          return\\n        }\\n        let l = level\\n        let data = []\\n        for (let i = 0; i < 3; i++) {\\n          let k = parentKey + \\'-\\' + level + \\'-\\' + i\\n          let d = {\\n            id: k,\\n            \\'column-1\\': \\'Edward King \\' + k,\\n            age: 32,\\n            level: level,\\n            address: \\'London, Park Lane no. \\' + i,\\n          }\\n\\n          if (i === 2) {\\n            d.children = createData(l + 1, k, maxLevel, i)\\n          }\\n\\n          data.push(d)\\n        }\\n        return data\\n      }\\n\\n      function createTreeData() {\\n        let data = []\\n        for (let i = 0; i < 10; i++) {\\n          let childrens = createData(0, i, 2)\\n          let d = {\\n            id: \\'\\' + i,\\n            level: 0,\\n            \\'column-1\\': \\'Edward King \\' + i,\\n            age: i,\\n            address: \\'London, Park Lane no. \\' + i,\\n          }\\n\\n          if (i % 3 === 0) {\\n            d.children = childrens\\n          }\\n\\n          data.push(d)\\n        }\\n\\n        return data\\n      }\\n\\n      this.setState({\\n        data: createTreeData(),\\n      })\\n    }\\n    beginEdit(row) {\\n      let arr = []\\n      arr.push(row.id)\\n      this.tableRef.current.api.editRows(arr)\\n    }\\n    completeEdit() {\\n      this.tableRef.current.api.completeEdit()\\n    }\\n    cancelEdit() {\\n      this.tableRef.current.api.cancelEdit()\\n    }\\n    insertData() {\\n      let arr = []\\n      arr.push({ id: \\'inserted-row-\\' + new Date().getTime() })\\n      this.tableRef.current.api.insertData({\\n        data: arr,\\n        parentKey: \\'3\\',\\n        editing: true,\\n        prepend: false,\\n        startIndex: 2,\\n      })\\n    }\\n    modifyData() {\\n      let arr = []\\n      arr.push({ id: \\'inserted-row-\\' + new Date().getTime() })\\n      this.tableRef.current.api.modifyData([\\n        {\\n          id: \\'3\\',\\n          \\'column-1\\': \\'modifyData-\\' + new Date().getTime(),\\n          level: 3,\\n        },\\n      ])\\n    }\\n    delete() {\\n      this.tableRef.current.api.deleteData()\\n    }\\n    onEditSave(changedRows, newRows, editType) {\\n      console.log(\\'onEditSave changedRows:\\', changedRows)\\n      console.log(\\'onEditSave newRows:\\', newRows)\\n      this.setState({ data: newRows })\\n    }\\n    render() {\\n      return (\\n        <div style={{ height: \\'100%\\' }}>\\n          <Table\\n            header={() => {\\n              return (\\n                <div>\\n                  <Button\\n                    onClick={this.completeEdit.bind(this)}\\n                    style={{ cursor: \\'pointer\\' }}\\n                  >\\n                    complete edit\\n                  </Button>\\n\\n                  <Button\\n                    onClick={this.cancelEdit.bind(this)}\\n                    style={{ cursor: \\'pointer\\', marginLeft: 10 }}\\n                  >\\n                    cancel edit\\n                  </Button>\\n\\n                  <Button\\n                    onClick={this.insertData.bind(this)}\\n                    style={{ cursor: \\'pointer\\', marginLeft: 10 }}\\n                  >\\n                    insert data\\n                  </Button>\\n\\n                  <Button\\n                    onClick={this.modifyData.bind(this)}\\n                    style={{ cursor: \\'pointer\\', marginLeft: 10 }}\\n                  >\\n                    modify data\\n                  </Button>\\n\\n                  <Button\\n                    onClick={this.delete.bind(this)}\\n                    style={{ cursor: \\'pointer\\', marginLeft: 10 }}\\n                  >\\n                    delete\\n                  </Button>\\n                </div>\\n              )\\n            }}\\n            editable={false}\\n            isAppend={true}\\n            allowSaveEmpty={true}\\n            alwaysValidate={true}\\n            ref={this.tableRef}\\n            rowKey=\\\"id\\\"\\n            onEditSave={this.onEditSave.bind(this)}\\n            columns={this.columns}\\n            selectMode=\\\"multiple\\\"\\n            checkStrictly={false}\\n            data={this.state.data}\\n            validateTrigger=\\\"onChange\\\"\\n            selectOnRowClick={false}\\n          />\\n        </div>\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n      {class Demo extends React.Component {\n        constructor(props) {\n          super(props);\n          this.tableRef = React.createRef();\n          this.state = {\n            data: [],\n            loading: false,\n            expandedRowKeys: []\n          };\n          this.columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            align: \"left\",\n            halign: \"center\",\n            minWidth: 300,\n            onCell: (row, value, index) => {\n              return {\n                onClick: () => {\n                  this.beginEdit(row);\n                }\n              };\n            },\n            validator: function (value, row) {\n              if (!value) {\n                return {\n                  valid: false,\n                  message: \"请输入\"\n                };\n              }\n\n              return {\n                valid: true,\n                message: \"false\"\n              };\n            },\n            editor: function (value, row, index, onchange, ref) {\n              return <Input defaultValue={value} ref={ref} onChange={e => onchange([{\n                \"column-1\": e.target.value,\n                id: row.id\n              }, {\n                id: \"3\",\n                address: e.target.value\n              }])} mdxType=\"Input\" />;\n            }\n          }, {\n            title: \"appellation\",\n            width: 150,\n            halign: \"left\",\n            children: [{\n              dataIndex: \"address\",\n              title: \"name\",\n              width: 200,\n              onCell: (row, value, index) => {\n                return {\n                  onClick: () => {\n                    this.beginEdit(row);\n                  }\n                };\n              },\n              editor: function (value, row, index, onchange, ref) {\n                return <Input defaultValue={value} ref={ref} onChange={e => onchange({\n                  address: e.target.value\n                })} mdxType=\"Input\" />;\n              }\n            }, {\n              title: \"nick name\",\n              width: 150,\n              children: [{\n                dataIndex: \"id\",\n                title: \"nick-1\",\n                maxWidth: 300,\n                width: 150\n              }, {\n                dataIndex: \"level\",\n                title: \"level\"\n              }]\n            }]\n          }, {\n            dataIndex: \"id\",\n            key: \"column-4\",\n            title: \"id\"\n          }];\n        }\n\n        componentDidMount() {\n          function createData(level, parentKey, maxLevel, index) {\n            if (level > maxLevel) {\n              return;\n            }\n\n            let l = level;\n            let data = [];\n\n            for (let i = 0; i < 3; i++) {\n              let k = parentKey + \"-\" + level + \"-\" + i;\n              let d = {\n                id: k,\n                \"column-1\": \"Edward King \" + k,\n                age: 32,\n                level: level,\n                address: \"London, Park Lane no. \" + i\n              };\n\n              if (i === 2) {\n                d.children = createData(l + 1, k, maxLevel, i);\n              }\n\n              data.push(d);\n            }\n\n            return data;\n          }\n\n          function createTreeData() {\n            let data = [];\n\n            for (let i = 0; i < 10; i++) {\n              let childrens = createData(0, i, 2);\n              let d = {\n                id: \"\" + i,\n                level: 0,\n                \"column-1\": \"Edward King \" + i,\n                age: i,\n                address: \"London, Park Lane no. \" + i\n              };\n\n              if (i % 3 === 0) {\n                d.children = childrens;\n              }\n\n              data.push(d);\n            }\n\n            return data;\n          }\n\n          this.setState({\n            data: createTreeData()\n          });\n        }\n\n        beginEdit(row) {\n          let arr = [];\n          arr.push(row.id);\n          this.tableRef.current.api.editRows(arr);\n        }\n\n        completeEdit() {\n          this.tableRef.current.api.completeEdit();\n        }\n\n        cancelEdit() {\n          this.tableRef.current.api.cancelEdit();\n        }\n\n        insertData() {\n          let arr = [];\n          arr.push({\n            id: \"inserted-row-\" + new Date().getTime()\n          });\n          this.tableRef.current.api.insertData({\n            data: arr,\n            parentKey: \"3\",\n            editing: true,\n            prepend: false,\n            startIndex: 2\n          });\n        }\n\n        modifyData() {\n          let arr = [];\n          arr.push({\n            id: \"inserted-row-\" + new Date().getTime()\n          });\n          this.tableRef.current.api.modifyData([{\n            id: \"3\",\n            \"column-1\": \"modifyData-\" + new Date().getTime(),\n            level: 3\n          }]);\n        }\n\n        delete() {\n          this.tableRef.current.api.deleteData();\n        }\n\n        onEditSave(changedRows, newRows, editType) {\n          console.log(\"onEditSave changedRows:\", changedRows);\n          console.log(\"onEditSave newRows:\", newRows);\n          this.setState({\n            data: newRows\n          });\n        }\n\n        render() {\n          return <div style={{\n            height: \"100%\"\n          }}>\n    <Table header={() => {\n              return <div>\n            <Button onClick={this.completeEdit.bind(this)} style={{\n                  cursor: \"pointer\"\n                }} mdxType=\"Button\">\n              complete edit\n            </Button>\n\n            <Button onClick={this.cancelEdit.bind(this)} style={{\n                  cursor: \"pointer\",\n                  marginLeft: 10\n                }} mdxType=\"Button\">\n              cancel edit\n            </Button>\n\n            <Button onClick={this.insertData.bind(this)} style={{\n                  cursor: \"pointer\",\n                  marginLeft: 10\n                }} mdxType=\"Button\">\n              insert data\n            </Button>\n\n            <Button onClick={this.modifyData.bind(this)} style={{\n                  cursor: \"pointer\",\n                  marginLeft: 10\n                }} mdxType=\"Button\">\n              modify data\n            </Button>\n\n            <Button onClick={this.delete.bind(this)} style={{\n                  cursor: \"pointer\",\n                  marginLeft: 10\n                }} mdxType=\"Button\">\n              delete\n            </Button>\n          </div>;\n            }} editable={false} isAppend={true} allowSaveEmpty={true} alwaysValidate={true} ref={this.tableRef} rowKey=\"id\" onEditSave={this.onEditSave.bind(this)} columns={this.columns} selectMode=\"multiple\" checkStrictly={false} data={this.state.data} validateTrigger=\"onChange\" selectOnRowClick={false} mdxType=\"Table\" />\n  </div>;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"大数据量树形数据编辑\"\n    }}>{`大数据量树形数据编辑`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`使用表格内置的API`}</p>\n    </blockquote>\n    <Playground __position={7} __code={'<Complex />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      InputNumber,\n      Select,\n      DatePicker,\n      Switch,\n      Checkbox,\n      Button,\n      Complex,\n      CustomEdit\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n  <Complex mdxType=\"Complex\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}