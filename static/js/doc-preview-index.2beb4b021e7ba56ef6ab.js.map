{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/Preview/autoexpandheight.js","e:/WebRoot/tablex/packages/siteCN/doc/Preview/index.mdx"],"names":["Demo","props","expandAll","ins","refs","console","log","api","columns","dataIndex","title","key","width","align","data","generateData","state","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","id","parentId","record","i","extra","frozen","strArr","join","arr","this","setState","expandedRowKeys","style","height","onClick","rowKey","ref","autoRowHeight","expandRowHeight","expandedRowRender","bind","onExpandedRowsChange","React","Component","layoutProps","MDXLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Preview","isMDXComponent"],"mappings":"s/BAIMA,E,YAmBJ,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAoDRC,UAAY,WACV,IAAIC,EAAM,EAAKC,KAAL,MACVC,QAAQC,IAAI,aAAcH,EAAII,IAAIL,WAC9BC,GACFA,EAAII,IAAIL,aAvDV,IAAMM,EAAU,CACd,CACEC,UAAW,KACXC,MAAO,KACPC,IAAK,KACLC,MAAO,IACPC,MAAO,UAET,CACEJ,UAAW,WACXC,MAAO,WACPE,MAAO,KAGT,CACEH,UAAW,WACXC,MAAO,WACPE,MAAO,IACPC,MAAO,UAGT,CACEJ,UAAW,WACXC,MAAO,WACPG,MAAO,SAET,CACEJ,UAAW,WACXC,MAAO,WACPE,MAAO,IACPC,MAAO,WAIPC,EAAO,EAAKC,aAAaP,EAAS,IApCrB,OAsCjB,EAAKQ,MAAQ,CACXF,KAAMA,EACNN,QAASA,GAxCM,E,0EAlBNA,GAAsC,IAA7BS,EAA4B,uDAApB,GAAIC,EAAgB,uDAAP,MACzC,OAAO,IAAIC,MAAMF,GAAOG,KAAK,GAAGC,KAAI,SAACC,EAAKC,GACxC,OAAOf,EAAQgB,QACb,SAACC,EAASC,EAAQC,GAMhB,MALyB,OAArBD,EAAOjB,UACTgB,EAAQC,EAAOjB,WAAamB,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAE7DL,EAAQC,EAAOjB,WAAa,MAAQc,EAE/BE,IAET,CACEM,GAAIb,EAASK,EACbS,SAAU,c,uDAgDAC,EAAQC,EAAGC,GAC3B,GAAqB,SAAjBA,EAAMC,OAAmB,CACzB,IAAIC,EAAO,IAAIlB,MAAM,GAAK,GAAFe,GAAMd,KAAK,qBAAqBkB,KAAK,IACjE,OAAO,6BAAMD,GAEb,OAAO,O,2CAEYE,GACnBC,KAAKC,SAAS,CAAEC,gBAAiBH,M,+BASzB,IAAD,EACiBC,KAAKxB,MAAvBR,EADC,EACDA,QAASM,EADR,EACQA,KACf,OACE,yBAAK6B,MAAO,CAAEC,OAAQ,MACpB,kBAAC,IAAD,CAAQC,QAASL,KAAKtC,WAAtB,cACA,kBAAC,QAAD,CACE4C,OAAO,KACPC,IAAI,QACJC,eAAe,EACfxC,QAASA,EACTyC,gBAAiB,IACjBC,kBAAmBV,KAAKU,kBAAkBC,KAAKX,MAC/CY,qBAAsBZ,KAAKY,qBAAqBD,KAAKX,MACrD1B,KAAMA,S,GA5FGuC,IAAMC,WAmGVtD,I,iPC7Ff,IAKMuD,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGzD,EACF,8BACD,OAAO,YAACuD,EAAD,iBAAeD,EAAiBtD,EAAhC,CAAuCyD,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,cAAeC,QAAS,CACzD7D,MAAOuC,KAAOA,KAAKvC,MAAQA,EAC3B8D,eACAC,UACAC,WACCN,QAAQ,cACb,YAAC,EAAD,CAASA,QAAQ,c,6KAMnBF,EAAWS,gBAAiB","file":"static/js/doc-preview-index.fef62250.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table } from \"tablex\";\r\nimport { Button, Popover } from \"antd\";\r\n\r\nclass Demo extends React.Component {\r\n  generateData(columns, count = 20, prefix = \"Row\") {\r\n    return new Array(count).fill(0).map((row, rowIndex) => {\r\n      return columns.reduce(\r\n        (rowData, column, columnIndex) => {\r\n          if (column.dataIndex !== \"id\") {\r\n            rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\r\n          } else {\r\n            rowData[column.dataIndex] = \"id-\" + rowIndex;\r\n          }\r\n          return rowData;\r\n        },\r\n        {\r\n          id: prefix + rowIndex,\r\n          parentId: null\r\n        }\r\n      );\r\n    });\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    const columns = [\r\n      {\r\n        dataIndex: \"id\",\r\n        title: \"id\",\r\n        key: \"id\",\r\n        width: 150,\r\n        align: \"center\"\r\n      },\r\n      {\r\n        dataIndex: \"column-1\",\r\n        title: \"column-1\",\r\n        width: 100\r\n      },\r\n\r\n      {\r\n        dataIndex: \"column-2\",\r\n        title: \"column-2\",\r\n        width: 150,\r\n        align: \"center\"\r\n      },\r\n\r\n      {\r\n        dataIndex: \"column-3\",\r\n        title: \"column-3\",\r\n        align: \"right\"\r\n      },\r\n      {\r\n        dataIndex: \"column-4\",\r\n        title: \"column-4\",\r\n        width: 100,\r\n        align: \"center\"\r\n      }\r\n    ];\r\n\r\n    let data = this.generateData(columns, 10);\r\n\r\n    this.state = {\r\n      data: data,\r\n      columns: columns\r\n    };\r\n  }\r\n  expandedRowRender(record, i, extra) {\r\n    if (extra.frozen === \"none\") {\r\n        let strArr=new Array(10+i*10).fill(\"expandedRowRender\").join(\"\");\r\n    return <div>{strArr}</div>;\r\n    }\r\n    return null;\r\n  }\r\n  onExpandedRowsChange(arr) {\r\n    this.setState({ expandedRowKeys: arr });\r\n  }\r\n  expandAll = () => {\r\n    let ins = this.refs[\"table\"];\r\n    console.log(\"expandAll:\", ins.api.expandAll);\r\n    if (ins) {\r\n      ins.api.expandAll();\r\n    }\r\n  };\r\n  render() {\r\n    let { columns, data } = this.state;\r\n    return (\r\n      <div style={{ height: 400 }}>\r\n        <Button onClick={this.expandAll}>expand all</Button>\r\n        <Table\r\n          rowKey=\"id\"\r\n          ref=\"table\"\r\n          autoRowHeight={true}\r\n          columns={columns}\r\n          expandRowHeight={100}\r\n          expandedRowRender={this.expandedRowRender.bind(this)}\r\n          onExpandedRowsChange={this.onExpandedRowsChange.bind(this)}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport 'antd/dist/antd.css';\nimport Preview from \"./autoexpandheight.js\";\n //import Preview from \"./selection.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"features-preview\"\n    }}>{`Features Preview`}</h1>\n    <h2 {...{\n      \"id\": \"示例\"\n    }}>{`示例`}</h2>\n    <Playground __position={0} __code={'<Preview />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Preview\n    }} mdxType=\"Playground\">\n  <Preview mdxType=\"Preview\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}