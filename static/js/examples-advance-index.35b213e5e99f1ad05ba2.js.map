{"version":3,"sources":["e:/WebRoot/tablex/packages/site/examples/Advance/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_8__","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","Checkbox","style","height","_React$Component","Demo","_this","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","columns","dataIndex","title","key","width","align","data","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","generateData","state","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","value","count","arguments","length","undefined","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","parentId","record","index","extra","frozen","arr","setState","expandedRowKeys","_this$state","tablex__WEBPACK_IMPORTED_MODULE_9___default","a","rowKey","expandRowHeight","expandedRowRender","bind","onExpandedRowsChange","React","Component","_React$Component2","_this2","_this$state2","selectMode","orderNumber","summary","border","text","column-1","column-2","column-3","column-4","render","type","_React$Component3","_this3","_this$state3","frozenRender","rowHeight","top","bottom","cellRender","_React$Component4","_this4","maxWidth","obj","children","rowSpan","wordBreak","whiteSpace","margin","colSpan","_this$state4","_React$Component5","_this5","forEach","d","_this$state5","_extra$orders","orders","join","isMDXComponent"],"mappings":"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","file":"static/js/examples-advance-index.04e43975.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input, Checkbox } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"tablex\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"expandedrowrender\"\n    }}>{`expandedRowRender`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] = \\'id-\\' + rowIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 10)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    expandedRowRender(record, index, extra) {\\n      if (extra.frozen === \\'none\\') {\\n        return \\'expandedRowRender\\'\\n      }\\n      return null\\n    }\\n    onExpandedRowsChange(arr) {\\n      this.setState({ expandedRowKeys: arr })\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          expandRowHeight={100}\\n          expandedRowRender={this.expandedRowRender.bind(this)}\\n          onExpandedRowsChange={this.onExpandedRowsChange.bind(this)}\\n          data={data}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = \"id-\" + rowIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 10);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        expandedRowRender(record, index, extra) {\n          if (extra.frozen === \"none\") {\n            return \"expandedRowRender\";\n          }\n\n          return null;\n        }\n\n        onExpandedRowsChange(arr) {\n          this.setState({\n            expandedRowKeys: arr\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} expandRowHeight={100} expandedRowRender={this.expandedRowRender.bind(this)} onExpandedRowsChange={this.onExpandedRowsChange.bind(this)} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`summary`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n          summary={{\\n            style: { border: \\'none\\' },\\n            title: { text: \\'合计:\\', column: \\'id\\' },\\n            data: [\\n              {\\n                \\'column-1\\': \\'min\\',\\n                \\'column-2\\': \\'max\\',\\n                \\'column-3\\': \\'sum\\',\\n                \\'column-4\\': \\'avg\\',\\n              },\\n            ],\\n            render: (value, dataIndex, type, index) => {\\n              return type + \\':\\' + value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} summary={{\n            style: {\n              border: \"none\"\n            },\n            title: {\n              text: \"合计:\",\n              column: \"id\"\n            },\n            data: [{\n              \"column-1\": \"min\",\n              \"column-2\": \"max\",\n              \"column-3\": \"sum\",\n              \"column-4\": \"avg\"\n            }],\n            render: (value, dataIndex, type, index) => {\n              return type + \":\" + value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"frozenrender\"\n    }}>{`frozenRender`}</h2>\n    <p>{`无法同summary共存，summary将会覆盖此配置`}</p>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"single\\\"\\n          orderNumber={false}\\n          frozenRender={{\\n            rowHeight: 40,\\n            rowKey: \\'id\\',\\n            top: [data[0], data[1]],\\n            bottom: [data[0], data[1]],\\n            cellRender: (value, row, index, extra) => {\\n              return value\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"single\" orderNumber={false} frozenRender={{\n            rowHeight: 40,\n            rowKey: \"id\",\n            top: [data[0], data[1]],\n            bottom: [data[0], data[1]],\n            cellRender: (value, row, index, extra) => {\n              return value;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"rowspan--colspan\"\n    }}>{`rowSpan & colSpan`}</h2>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          maxWidth: 300,\\n          width: 150,\\n          align: \\'center\\',\\n          render: (value, row, index) => {\\n            const obj = {\\n              children: value,\\n              props: {},\\n            }\\n            if (index === 5) {\\n              obj.props.rowSpan = 5\\n              obj.children = (\\n                <div\\n                  style={{\\n                    width: 12,\\n                    wordBreak: \\'break-all\\',\\n                    whiteSpace: \\'pre-line\\',\\n                    margin: \\'auto\\',\\n                  }}\\n                >\\n                  行数据合并\\n                </div>\\n              )\\n            }\\n\\n            if (index === 1) {\\n              obj.props.colSpan = 2\\n              obj.children = <div>列数据合并</div>\\n            }\\n\\n            return obj\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={true}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            width: 100\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            maxWidth: 300,\n            width: 150,\n            align: \"center\",\n            render: (value, row, index) => {\n              const obj = {\n                children: value,\n                props: {}\n              };\n\n              if (index === 5) {\n                obj.props.rowSpan = 5;\n                obj.children = <div style={{\n                  width: 12,\n                  wordBreak: \"break-all\",\n                  whiteSpace: \"pre-line\",\n                  margin: \"auto\"\n                }}>\n            行数据合并\n          </div>;\n              }\n\n              if (index === 1) {\n                obj.props.colSpan = 2;\n                obj.children = <div>列数据合并</div>;\n              }\n\n              return obj;\n            }\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"group-data-with-colspan\"\n    }}>{`group data with colSpan`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          render: (value, row, index) => {\\n            if (row.children) {\\n              let obj = {\\n                children: \\'grouped-\\' + value,\\n                props: {\\n                  colSpan: 4,\\n                },\\n              }\\n\\n              return obj\\n            }\\n\\n            return value\\n          },\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          align: \\'center\\',\\n          width: 100,\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data.forEach(d => {\\n        d.children = this.generateData(columns, 5, \\'children-\\' + d.id)\\n      })\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={{\\n            render: function(value, row, index, extra) {\\n              let { orders = [] } = extra\\n              return orders.join(\\'-\\')\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            render: (value, row, index) => {\n              if (row.children) {\n                let obj = {\n                  children: \"grouped-\" + value,\n                  props: {\n                    colSpan: 4\n                  }\n                };\n                return obj;\n              }\n\n              return value;\n            }\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            align: \"center\",\n            width: 100\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\"\n          }];\n          let data = this.generateData(columns, 20);\n          data.forEach(d => {\n            d.children = this.generateData(columns, 5, \"children-\" + d.id);\n          });\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={{\n            render: function (value, row, index, extra) {\n              let {\n                orders = []\n              } = extra;\n              return orders.join(\"-\");\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}