{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/Basic/Simple.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","style","height","columns","dataIndex","title","key","width","align","data","generateData","state","count","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","id","parentId","rowKey","React","Component","orderNumber","forEach","d","children","selectMode","resizable","fixed","render","value","index","extra","orders","join","rowHeight","current","pageSize","total","length","pageIndex","setState","checkStrictly","onSelectChange","a","b","c","console","log","pagination","onPageChange","bind","onRefresh","titleRender","color","onHeaderCell","backgroundColor","onClick","alert","headerRowHeight","showHeader","bordered","striped","hoverable","indentSize","autoHeight","isMDXComponent"],"mappings":"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","file":"static/js/doc-basic-simple.cf113f20.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"用法示例\"\n    }}>{`用法示例`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"tablex\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"简单用例\"\n    }}>{`简单用例`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return <Table rowKey=\\\"id\\\" columns={columns} data={data} />\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"添加序号\"\n    }}>{`添加序号`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} orderNumber={true} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义序号列\"\n    }}>{`自定义序号列`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            rowData[column.dataIndex] =\\n              prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'number\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'nick-1\\',\\n          key: \\'column-21\\',\\n          align: \\'center\\',\\n          width: 200,\\n        },\\n        {\\n          dataIndex: \\'column-31\\',\\n          key: \\'column-31\\',\\n          title: \\'nick-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'age\\',\\n          key: \\'column-4\\',\\n          title: \\'age\\',\\n          align: \\'right\\',\\n          width: 200,\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data.forEach(d => {\\n        d.children = this.generateData(columns, 5, \\'children-\\' + d.id)\\n      })\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={{\\n            width: 100,\\n            title: \\'No.\\',\\n            align: \\'left\\',\\n            resizable: true,\\n            fixed: \\'left\\',\\n            render: function(value, row, index, extra) {\\n              let { orders = [] } = extra\\n              return orders.join(\\'-\\')\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 600\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"number\",\n            width: 200\n          }, {\n            dataIndex: \"id\",\n            title: \"nick-1\",\n            key: \"column-21\",\n            align: \"center\",\n            width: 200\n          }, {\n            dataIndex: \"column-31\",\n            key: \"column-31\",\n            title: \"nick-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"age\",\n            key: \"column-4\",\n            title: \"age\",\n            align: \"right\",\n            width: 200\n          }];\n          let data = this.generateData(columns, 20);\n          data.forEach(d => {\n            d.children = this.generateData(columns, 5, \"children-\" + d.id);\n          });\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={{\n            width: 100,\n            title: \"No.\",\n            align: \"left\",\n            resizable: true,\n            fixed: \"left\",\n            render: function (value, row, index, extra) {\n              let {\n                orders = []\n              } = extra;\n              return orders.join(\"-\");\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"行高设置\"\n    }}>{`行高设置`}</h2>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          rowHeight={(row, index) => {\\n            if (index % 2 === 0) {\\n              return 80\\n            }\\n            return 30\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} rowHeight={(row, index) => {\n            if (index % 2 === 0) {\n              return 80;\n            }\n\n            return 30;\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"分页\"\n    }}>{`分页`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n        current: 1,\\n        pageSize: 10,\\n        total: data.length,\\n      }\\n    }\\n    onPageChange(pageIndex, pageSize) {\\n      this.setState({\\n        current: pageIndex,\\n        pageSize,\\n      })\\n    }\\n    onRefresh(pageIndex, pageSize) {\\n      this.setState({\\n        current: pageIndex,\\n        pageSize,\\n      })\\n    }\\n    render() {\\n      let { columns, data, current, pageSize, total } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          selectMode=\\\"multiple\\\"\\n          checkStrictly={true}\\n          onSelectChange={function(a, b, c, d) {\\n            console.log(\\'onSelectChange rows2:\\', a, b, c)\\n            return true\\n          }}\\n          data={data}\\n          pagination={{\\n            current,\\n            pageSize,\\n            total,\\n            onPageChange: this.onPageChange.bind(this),\\n            onRefresh: this.onRefresh.bind(this),\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns,\n            current: 1,\n            pageSize: 10,\n            total: data.length\n          };\n        }\n\n        onPageChange(pageIndex, pageSize) {\n          this.setState({\n            current: pageIndex,\n            pageSize\n          });\n        }\n\n        onRefresh(pageIndex, pageSize) {\n          this.setState({\n            current: pageIndex,\n            pageSize\n          });\n        }\n\n        render() {\n          let {\n            columns,\n            data,\n            current,\n            pageSize,\n            total\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} selectMode=\"multiple\" checkStrictly={true} onSelectChange={function (a, b, c, d) {\n            console.log(\"onSelectChange rows2:\", a, b, c);\n            return true;\n          }} data={data} pagination={{\n            current,\n            pageSize,\n            total,\n            onPageChange: this.onPageChange.bind(this),\n            onRefresh: this.onRefresh.bind(this)\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义表头标题\"\n    }}>{`自定义表头标题`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n          titleRender: function() {\\n            return <span style={{ color: \\'#ccc\\' }}>titleRender</span>\\n          },\\n        },\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} orderNumber={true} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\",\n            titleRender: function () {\n              return <span style={{\n                color: \"#ccc\"\n              }}>titleRender</span>;\n            }\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"多表头\"\n    }}>{`多表头`}</h2>\n    <Playground __position={6} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n          onHeaderCell: function() {\\n            console.log(\\'onHeadCell\\')\\n            return {\\n              style: {\\n                backgroundColor: \\'#eaeaea\\',\\n              },\\n              onClick: () => {\\n                alert(\\'clicked the header cell id\\')\\n              },\\n            }\\n          },\\n        },\\n        {\\n          key: \\'column-group-1\\',\\n          title: \\'column group\\',\\n          onHeaderCell: function() {\\n            return {\\n              style: {\\n                backgroundColor: \\'#eaeaea\\',\\n              },\\n              onClick: () => {\\n                alert(\\'clicked the header cell column-group-1\\')\\n              },\\n            }\\n          },\\n          children: [\\n            {\\n              dataIndex: \\'column-1\\',\\n              key: \\'column-1\\',\\n              title: \\'column-1\\',\\n              width: 100,\\n            },\\n            {\\n              dataIndex: \\'column-2\\',\\n              key: \\'column-2\\',\\n              title: \\'column-2\\',\\n              width: 100,\\n              children: [\\n                {\\n                  dataIndex: \\'column-3\\',\\n                  key: \\'column-3\\',\\n                  title: \\'column-3\\',\\n                  width: 100,\\n                },\\n                {\\n                  dataIndex: \\'column-4\\',\\n                  key: \\'column-4\\',\\n                  title: \\'column-4\\',\\n                  width: 100,\\n                  onHeaderCell: function() {\\n                    return {\\n                      style: {\\n                        backgroundColor: \\'#eaeaea\\',\\n                      },\\n                      onClick: () => {\\n                        alert(\\'clicked the header cell column-4\\')\\n                      },\\n                    }\\n                  },\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} orderNumber={true} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\",\n            onHeaderCell: function () {\n              console.log(\"onHeadCell\");\n              return {\n                style: {\n                  backgroundColor: \"#eaeaea\"\n                },\n                onClick: () => {\n                  alert(\"clicked the header cell id\");\n                }\n              };\n            }\n          }, {\n            key: \"column-group-1\",\n            title: \"column group\",\n            onHeaderCell: function () {\n              return {\n                style: {\n                  backgroundColor: \"#eaeaea\"\n                },\n                onClick: () => {\n                  alert(\"clicked the header cell column-group-1\");\n                }\n              };\n            },\n            children: [{\n              dataIndex: \"column-1\",\n              key: \"column-1\",\n              title: \"column-1\",\n              width: 100\n            }, {\n              dataIndex: \"column-2\",\n              key: \"column-2\",\n              title: \"column-2\",\n              width: 100,\n              children: [{\n                dataIndex: \"column-3\",\n                key: \"column-3\",\n                title: \"column-3\",\n                width: 100\n              }, {\n                dataIndex: \"column-4\",\n                key: \"column-4\",\n                title: \"column-4\",\n                width: 100,\n                onHeaderCell: function () {\n                  return {\n                    style: {\n                      backgroundColor: \"#eaeaea\"\n                    },\n                    onClick: () => {\n                      alert(\"clicked the header cell column-4\");\n                    }\n                  };\n                }\n              }]\n            }]\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"多表头设置表头高度\"\n    }}>{`多表头设置表头高度`}</h2>\n    <Playground __position={7} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          key: \\'column-group-1\\',\\n          title: \\'column group\\',\\n          children: [\\n            {\\n              dataIndex: \\'column-1\\',\\n              key: \\'column-1\\',\\n              title: \\'column-1\\',\\n              width: 100,\\n            },\\n            {\\n              dataIndex: \\'column-2\\',\\n              key: \\'column-2\\',\\n              title: \\'column-2\\',\\n              width: 100,\\n              children: [\\n                {\\n                  dataIndex: \\'column-3\\',\\n                  key: \\'column-3\\',\\n                  title: \\'column-3\\',\\n                  width: 100,\\n                },\\n                {\\n                  dataIndex: \\'column-4\\',\\n                  key: \\'column-4\\',\\n                  title: \\'column-4\\',\\n                  width: 100,\\n                },\\n              ],\\n            },\\n          ],\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          orderNumber={true}\\n          headerRowHeight={[30, 50, 70]}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            key: \"column-group-1\",\n            title: \"column group\",\n            children: [{\n              dataIndex: \"column-1\",\n              key: \"column-1\",\n              title: \"column-1\",\n              width: 100\n            }, {\n              dataIndex: \"column-2\",\n              key: \"column-2\",\n              title: \"column-2\",\n              width: 100,\n              children: [{\n                dataIndex: \"column-3\",\n                key: \"column-3\",\n                title: \"column-3\",\n                width: 100\n              }, {\n                dataIndex: \"column-4\",\n                key: \"column-4\",\n                title: \"column-4\",\n                width: 100\n              }]\n            }]\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={true} headerRowHeight={[30, 50, 70]} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"隐藏表头\"\n    }}>{`隐藏表头`}</h2>\n    <Playground __position={8} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} data={data} showHeader={false} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} showHeader={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"行边框、行hover、奇偶行样式\"\n    }}>{`行边框、行hover、奇偶行样式`}</h2>\n    <Playground __position={9} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-5\\',\\n          key: \\'column-5\\',\\n          title: \\'column-5\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-6\\',\\n          key: \\'column-6\\',\\n          title: \\'column-6\\',\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          orderNumber={false}\\n          bordered={false}\\n          striped={false}\\n          hoverable={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-5\",\n            key: \"column-5\",\n            title: \"column-5\",\n            width: 100,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-6\",\n            key: \"column-6\",\n            title: \"column-6\",\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} orderNumber={false} bordered={false} striped={false} hoverable={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"树形数据\"\n    }}>{`树形数据`}</h2>\n    <Playground __position={10} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          checkStrictly={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} checkStrictly={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"树形样式\"\n    }}>{`树形样式`}</h2>\n    <Playground __position={11} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          indentSize={30}\\n          selectMode=\\\"none\\\"\\n          orderNumber={false}\\n          checkStrictly={false}\\n          showHeader={false}\\n          bordered={false}\\n          striped={false}\\n          hoverable={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} indentSize={30} selectMode=\"none\" orderNumber={false} checkStrictly={false} showHeader={false} bordered={false} striped={false} hoverable={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"根据行数据条数自动高度\"\n    }}>{`根据行数据条数自动高度`}</h2>\n    <Playground __position={12} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table rowKey=\\\"id\\\" columns={columns} autoHeight={true} data={data} />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} autoHeight={true} data={data} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}