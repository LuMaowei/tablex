{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/types/Column.js","e:/WebRoot/tablex/packages/siteCN/types/Table.js","e:/WebRoot/tablex/packages/siteCN/types/Selection.js","e:/WebRoot/tablex/packages/siteCN/types/RowSelection.js","e:/WebRoot/tablex/packages/siteCN/types/Expandable.js","e:/WebRoot/tablex/packages/siteCN/types/Editable.js","e:/WebRoot/tablex/packages/siteCN/types/Other.js","e:/WebRoot/tablex/packages/siteCN/types/Draggable.js","e:/WebRoot/tablex/packages/siteCN/doc/props.mdx"],"names":["Column","defaultProps","title","width","undefined","key","dataIndex","resizable","Table","props","rowKey","columns","data","orderNumber","showHeader","striped","bordered","rowHeight","virtual","autoHeight","Selection","selectMode","rowSelectClassName","defaultSelectedRowKeys","disabledSelectKeys","checkStrictly","RowSelection","Expandable","expandColumnKey","expandRowHeight","defaultExpandedRowKeys","indentSize","Editable","editable","readOnly","editTools","editToolsConfig","position","itemStyle","marginLeft","editText","editIcon","addText","addIcon","deleteText","deleteIcon","okText","okIcon","cancelText","cancelIcon","defaultAddCount","isAppend","validateTrigger","validateDelay","allowSaveEmpty","dataControled","alwaysValidate","editorNoBorder","keyboardNavigation","editorClickBubble","Other","pagination","loading","columnDropMenu","Draggable","allowDragLevel","useDragHandle","dragHandleSelector","layoutProps","MDXLayout","MDXContent","components","mdxType","of","parentName","isMDXComponent"],"mappings":"oXAGMA,EAAS,WACb,OAAO,+BAGTA,EAAOC,aAAe,CACpBC,MAAO,GACPC,WAAOC,EACPC,IAAK,GACLC,UAAW,GACXC,WAAW,GA8CEP,Q,kKCpDf,IAAMQ,EAAQ,SAAAC,GACZ,OAAO,wBAASA,IAGlBD,EAAMP,aAAe,CACnBS,OAAQ,MACRC,QAAS,GACTC,KAAM,GACNC,aAAa,EACbC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,UAAW,GACXC,SAAS,EACTC,YAAY,GAgECX,Q,gKCjFf,IAAMY,EAAY,WAChB,OAAO,+BAGTA,EAAUnB,aAAe,CACvBoB,WAAY,SACZC,mBAAoB,wBACpBC,uBAAwB,GACxBC,mBAAoB,GACpBC,eAAe,G,wKCTjB,IAAMC,EAAe,WACnB,OAAO,+BAGTA,EAAazB,aAAe,GAgEbyB,Q,8KCpEf,IAAMC,EAAa,WACjB,OAAO,+BAGTA,EAAW1B,aAAe,CACxB2B,gBAAiB,GACjBC,gBAAiB,IACjBC,uBAAwB,GACxBC,WAAY,IAuCCJ,Q,0KC/Cf,IAAMK,EAAW,WACf,OAAO,+BAGTA,EAAS/B,aAAe,CACtBgC,UAAU,EACVC,UAAU,EACVC,UAAW,CAAC,OAAQ,OACpBC,gBAAiB,CACfC,SAAU,SACVC,UAAW,CAAEC,WAAY,OACzBC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,WAAY,GACZC,WAAY,GACZC,OAAQ,GACRC,OAAQ,GACRC,WAAY,GACZC,WAAY,IAEdC,gBAAiB,EACjBC,UAAU,EACVC,gBAAiB,SACjBC,cAAe,IACfC,gBAAgB,EAChBC,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBC,oBAAoB,EACpBC,mBAAmB,GAiFN3B,Q,sKChHf,IAAM4B,EAAQ,WACZ,OAAO,+BAGTA,EAAM3D,aAAe,CACnB4D,YAAY,EACZC,SAAS,EACT/C,SAAS,EACTgD,gBAAgB,GA6DHH,Q,gKCrEf,IAAMI,EAAY,WAChB,OAAO,+BAGTA,EAAU/D,aAAe,CACvBgE,gBAAgB,EAChBC,eAAe,EACfC,mBAAoB,IAiCPH,Q,gNC5Bf,IAKMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACG9D,EACF,8BACD,OAAO,YAAC4D,EAAD,iBAAeD,EAAiB3D,EAAhC,CAAuC8D,WAAYA,EAAYC,QAAQ,cAI5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAOC,GAAIjE,EAAOgE,QAAQ,UAC1B,YAAC,IAAD,CAAOC,GAAIb,EAAOY,QAAQ,UAC1B,iBAAQ,CACN,GAAM,gBADR,gBAGA,8BACE,iBAAGE,WAAW,cAAd,iJAEF,YAAC,IAAD,CAAOD,GAAI/C,EAAc8C,QAAQ,UACjC,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAOC,GAAI9C,EAAY6C,QAAQ,UAC/B,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAOC,GAAIzC,EAAUwC,QAAQ,UAC7B,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAOC,GAAIzE,EAAQwE,QAAQ,UAC3B,iBAAQ,CACN,GAAM,4BADR,4BAGA,8BACE,iBAAGE,WAAW,cAAd,sHAEF,YAAC,IAAD,CAAOD,GAAIT,EAAWQ,QAAQ,W,oKAKlCF,EAAWK,gBAAiB","file":"static/js/doc-props.6c45e26b.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Column = () => {\r\n  return <div />;\r\n};\r\n\r\nColumn.defaultProps = {\r\n  title: \"\",\r\n  width: undefined,\r\n  key: \"\",\r\n  dataIndex: \"\",\r\n  resizable: true\r\n};\r\n\r\nColumn.propTypes = {\r\n  /** 列标题 */\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\r\n  /** 列标题自定义渲染，优先级高于title，但是不会覆盖column dropmenu下的title */\r\n  titleRender: PropTypes.func,\r\n  /** 列对齐方式 */\r\n  align: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\r\n  /** 列标题对齐方式 */\r\n  halign: PropTypes.oneOf([\"left\", \"right\", \"center\"]),\r\n  /** 最小列宽 */\r\n  minWidth: PropTypes.number,\r\n  /** 列宽,如果不设置宽度，列宽将会自动占满剩余宽度 */\r\n  width: PropTypes.number,\r\n  /** 列唯一key，如若不设置，将会以dataIndex作为唯一key */\r\n  key: PropTypes.string.isRequired,\r\n  /** 列数据字段 */\r\n  dataIndex: PropTypes.string,\r\n  /** 冻结列 */\r\n  fixed: PropTypes.oneOf([\"left\", \"right\"]),\r\n  /** 是否可拖动宽度 */\r\n  resizable: PropTypes.bool,\r\n  /** 列自定义渲染 */\r\n  render: PropTypes.func,\r\n  /** 编辑列验证  (value,row,rowIndex) => React.Element ;\r\n   */\r\n  validator: PropTypes.func,\r\n  /** 编辑列控件 (value:any,row:object,rowIndex:number,onchange:func,ref:func,validate:func) => React.Element ;\r\n   */\r\n  editor: PropTypes.func,\r\n\r\n  /** 列是否隐藏 */\r\n  hidden: PropTypes.bool,\r\n\r\n  /** 编辑时列是否可见 */\r\n  editingVisible: PropTypes.bool,\r\n\r\n  /** 列是否可配置属性 */\r\n  settable: PropTypes.bool,\r\n\r\n  /** 列是否显示列属性下拉菜单 */\r\n  dropMenu: PropTypes.bool\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * 表格组件\r\n */\r\nconst Table = props => {\r\n  return <div {...props} />;\r\n};\r\n\r\nTable.defaultProps = {\r\n  rowKey: \"key\",\r\n  columns: [],\r\n  data: [],\r\n  orderNumber: false,\r\n  showHeader: true,\r\n  striped: true,\r\n  bordered: true,\r\n  rowHeight: 40,\r\n  virtual: true,\r\n  autoHeight: false\r\n};\r\n\r\nTable.propTypes = {\r\n  /** 数据行主键字段\r\n   */\r\n  rowKey: PropTypes.string.isRequired,\r\n\r\n  /**\r\n   * 表格数据\r\n   */\r\n  data: PropTypes.array.isRequired,\r\n\r\n  /** 表格列 */\r\n  columns: PropTypes.array,\r\n\r\n  /** 行高 */\r\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\r\n\r\n  /** 是否自动高度，为true时表格的高度将会随行数而变化 */\r\n  autoHeight: PropTypes.bool,\r\n\r\n  /** 表格区域最小高度 */\r\n  minHeight: PropTypes.number,\r\n\r\n  /** 表格区域最大高度 */\r\n  maxHeight: PropTypes.number,\r\n\r\n  /** 是否启用虚拟加载 */\r\n  virtual: PropTypes.bool,\r\n\r\n  /** 自定义行样式 */\r\n  rowClassName: PropTypes.func,\r\n\r\n  /** 是否显示表头 */\r\n  showHeader: PropTypes.bool,\r\n\r\n  /** 是否显示边框 */\r\n  bordered: PropTypes.bool,\r\n\r\n  /** 鼠标hover样式 */\r\n  hoverable: PropTypes.bool,\r\n\r\n  /**\r\n   * 覆盖table元素，如：components:{row:func}\r\n   */\r\n  components: PropTypes.object,\r\n\r\n  /** 获取数据滚动区域ref */\r\n  scrollRef: PropTypes.func,\r\n\r\n  /** 获取内部表格ref */\r\n  innerRef: PropTypes.func,\r\n\r\n  /** 自定义行内渲染 */\r\n  rowRender: PropTypes.func,\r\n\r\n  /** 自定义行属性，可处理行事件 */\r\n  onRow: PropTypes.func,\r\n\r\n  /** 选择功能配置，配置项详情见下方 */\r\n  rowSelection: PropTypes.object\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Selection = () => {\r\n  return <div />;\r\n};\r\n\r\nSelection.defaultProps = {\r\n  selectMode: \"single\",\r\n  rowSelectClassName: \"tablex__row--selected\",\r\n  defaultSelectedRowKeys: [],\r\n  disabledSelectKeys: [],\r\n  checkStrictly: true\r\n};\r\n\r\nSelection.propTypes = {\r\n  /** 行选中时的样式类名 */\r\n  rowSelectClassName: PropTypes.string,\r\n  /** 选择模式：多选 单选 不可选择 */\r\n  selectMode: PropTypes.oneOf([\"multiple\", \"single\", \"none\"]),\r\n\r\n  /** 复选列配置 */\r\n  selectionColumn: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 默认选中的行键值 */\r\n  defaultSelectedRowKeys: PropTypes.array,\r\n\r\n  /** 选中的行键值 */\r\n  selectedRowKeys: PropTypes.array,\r\n  /** 将被禁用选择的行key */\r\n  disabledSelectKeys: PropTypes.array,\r\n  /**\r\n   * 行选择事件\r\n   *  (selectedKeys,selectedRows,triggerKey) => void\r\n   * */\r\n  onSelectChange: PropTypes.func,\r\n\r\n  /** 行选择前置事件,返回false取消选择操作 */\r\n  onBeforeSelect: PropTypes.func,\r\n\r\n  /** 行单选事件 */\r\n  onSelect: PropTypes.func,\r\n  /** 行单选取消事件 */\r\n  onUnSelect: PropTypes.func,\r\n  /** 全选事件 */\r\n  onSelectAll: PropTypes.func,\r\n  /** 取消全选事件 */\r\n  onUnSelectAll: PropTypes.func,\r\n\r\n  /** 多选模式是否级联控制checkbox选中状态 */\r\n  checkStrictly: PropTypes.bool\r\n};\r\n\r\nexport default Selection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RowSelection = () => {\r\n  return <div />;\r\n};\r\n\r\nRowSelection.defaultProps = {};\r\n\r\nRowSelection.propTypes = {\r\n  /** 多选框列标题 */\r\n  columnTitle: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.func,\r\n    PropTypes.element\r\n  ]),\r\n  /** 多选框列宽 */\r\n  columnWidth: PropTypes.number,\r\n  /** 是否固定多选框列 */\r\n  fixed: PropTypes.bool,\r\n  /** 动态设置选择框属性 */\r\n  getCheckboxProps: PropTypes.func,\r\n  /** 选中的行key */\r\n  selectedRowKeys: PropTypes.array,\r\n  /** 选择模式，单选、复选、不可选 */\r\n  type: PropTypes.oneOf([\"checkbox\", \"radio\", \"none\"]),\r\n  /** 手动选择/取消选择某行的回调 */\r\n  onSelect: PropTypes.func,\r\n\r\n  /** 行全选事件 */\r\n  onSelectAll: PropTypes.func,\r\n\r\n  /** 行选中项发生变化时的回调 */\r\n  onSelectChange: PropTypes.func,\r\n\r\n  /** 勾选项全选事件 */\r\n  onCheckAll: PropTypes.func,\r\n\r\n  /** 勾选项发生变化时的回调 */\r\n  onChange: PropTypes.func,\r\n\r\n  /** 是否显示勾选框列 */\r\n  showCheckbox: PropTypes.bool,\r\n\r\n  /** 行选中时是否勾选 */\r\n  selectOnCheck: PropTypes.bool,\r\n  /** 勾选时是否同时选中行 */\r\n  checkOnSelect: PropTypes.bool,\r\n  /** 多选模式是否级联控制checkbox选中状态 */\r\n  checkStrictly: PropTypes.bool,\r\n  /** 禁用checkbox选择的行key */\r\n  disabledCheckedKeys: PropTypes.array,\r\n\r\n  /** 行选择模式，支持checkbox勾选模式下，行选择为单选 */\r\n  selectType: PropTypes.oneOf([\"single\", \"multiple\", \"none\"]),\r\n  /** 是否允许点击选中行时，取消选中状态 */\r\n  selectInverted: PropTypes.bool,\r\n\r\n  /** 手动勾选/取消勾选某行的回调 */\r\n  onCheck: PropTypes.func,\r\n\r\n  /** 选择前置事件 */\r\n  onBeforeSelect: PropTypes.func,\r\n  /** checkbox点击前置事件 */\r\n  onBeforeCheck: PropTypes.func,\r\n  /** 全选前置事件 */\r\n  onBeforeCheckAll: PropTypes.func,\r\n  /** 全选点击事件 */\r\n  onCheckAll: PropTypes.func\r\n};\r\n\r\nexport default RowSelection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Expandable = () => {\r\n  return <div />;\r\n};\r\n\r\nExpandable.defaultProps = {\r\n  expandColumnKey: \"\",\r\n  expandRowHeight: 100,\r\n  defaultExpandedRowKeys: [],\r\n  indentSize: 20\r\n};\r\n\r\nExpandable.propTypes = {\r\n  /** 树形数据，每层的缩进宽度 */\r\n  indentSize: PropTypes.number,\r\n\r\n  /** 展开按钮所在的列 */\r\n  expandColumnKey: PropTypes.string,\r\n\r\n  /** 默认展开的行 */\r\n  defaultExpandedRowKeys: PropTypes.array,\r\n\r\n  /** 展开的行键值 */\r\n  expandedRowKeys: PropTypes.array,\r\n  /**\r\n   * 行展开事件\r\n   * (expandedRowKeys:Array) => void\r\n   * */\r\n  onExpandedRowsChange: PropTypes.func,\r\n\r\n  /**\r\n   * 点击展开图标时触发\r\n   */\r\n  onExpand: PropTypes.func,\r\n\r\n  /**\r\n   * 展开时加载children的方法\r\n   * (row:object) => Promise\r\n   * */\r\n  loadChildrenData: PropTypes.func,\r\n\r\n  /** 展开行渲染 */\r\n  expandedRowRender: PropTypes.func,\r\n\r\n  /** 展开行高度 */\r\n  expandRowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func])\r\n};\r\n\r\nexport default Expandable;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Editable = () => {\n  return <div />;\n};\n\nEditable.defaultProps = {\n  editable: false,\n  readOnly: false,\n  editTools: [\"edit\", \"add\"],\n  editToolsConfig: {\n    position: \"bottom\",\n    itemStyle: { marginLeft: \"5px\" },\n    editText: \"\",\n    editIcon: \"\",\n    addText: \"\",\n    addIcon: \"\",\n    deleteText: \"\",\n    deleteIcon: \"\",\n    okText: \"\",\n    okIcon: \"\",\n    cancelText: \"\",\n    cancelIcon: \"\"\n  },\n  defaultAddCount: 1,\n  isAppend: false,\n  validateTrigger: \"onSave\",\n  validateDelay: 300,\n  allowSaveEmpty: false,\n  dataControled: false,\n  alwaysValidate: false,\n  editorNoBorder: false,\n  keyboardNavigation: true,\n  editorClickBubble: false\n};\n\nEditable.propTypes = {\n  /** 是否允许编辑 */\n  editable: PropTypes.bool,\n\n  /** 是否启用键盘导航 */\n  keyboardNavigation: PropTypes.bool,\n\n  /** 编辑器是否允许点击事件冒泡 */\n  editorClickBubble: PropTypes.bool,\n\n  /** 是否只读模式，只读模式下，将无法编辑，且无法触发选择事件 */\n  readOnly: PropTypes.bool,\n\n  /** 是否显示编辑时的input边框 */\n  editorNoBorder: PropTypes.bool,\n\n  /** 工具栏，工具按钮 ['edit', 'add','delete',{icon:\"\",text:\"\",props:{},handler:Function},Function] addSingle:单行新增 */\n  editTools: PropTypes.array,\n  /** 工具栏，工具按钮属性配置{ position: \"bottom\", itemStyle: { marginRight: \"5px\" }, editText: \"\", editIcon: \"\", addText: \"\", addIcon: \"\", deleteText: \"\", deleteIcon: \"\", okText: \"\", okIcon: \"\", cancelText: \"\", cancelIcon: \"\" } */\n  editToolsConfig: PropTypes.object,\n  /** 新增行时，是追加，还是清空当前页数据 */\n  isAppend: PropTypes.bool,\n  /** 新增行时的默认条数 */\n  defaultAddCount: PropTypes.number,\n\n  /** 当为false时，新增的行数据如果没有产生输入更改，将被忽略 */\n  allowSaveEmpty: PropTypes.bool,\n\n  /** true：每次都验证所有数据行，false：只验证产生更改的行 */\n  alwaysValidate: PropTypes.bool,\n\n  /** 验证时机 */\n  validateTrigger: PropTypes.oneOf([\"onChange\", \"onBlur\", \"onSave\"]),\n\n  /** 新增按钮前置事件，返回false不进入新增状态 ()=>bool */\n  onBeforeAdd: PropTypes.func,\n\n  /** 新增按钮事件 (addedData, newData)=>void\n   * @param {Array} addedData-添加的数据行\n   * @param {Array} newRows-添加后最新的数据\n   */\n  onAdd: PropTypes.func,\n\n  /** 新增时的行数据模板，可通过此项设置默认行数据 (rowIndex)=>object\n   * @param {numer} rowIndex\n   * @returns {object} 行对象\n   */\n  rowTemplate: PropTypes.func,\n\n  /** 编辑取消事件 */\n  onCancel: PropTypes.func,\n  /** 编辑按钮前置事件，返回false不进入编辑状态 */\n  onBeforeEdit: PropTypes.func,\n\n  /** 编辑按钮事件 */\n  onEdit: PropTypes.func,\n  /**\n   * 删除按钮前置事件,返回false 不可删除\n   */\n  onBeforeDelete: PropTypes.func,\n  /** 删除按钮事件 */\n  onDelete: PropTypes.func,\n\n  /** 数据是否完全受控，如若受控，请在onEditSave、onCancel中自行更新数据源 */\n  dataControled: PropTypes.bool,\n\n  /** 内置编辑按钮保存事件 (changedRows,newRows,editType)=>void|Promise  Promise中如果捕获了异常，需进行再次抛出，否则内部可能无法正常进行后续操作\n   * @param {Array} changedRows-改变的数据行\n   * @param {Array} newRows-改变后最新的数据\n   * @param {string} editType-编辑类型;\"edit\":编辑;\"add\":新增;\"delete\":删除\n   */\n  onEditSave: PropTypes.func,\n  /** api.completeEdit 触发此事件\n   * @param {changed:[],inserted:[],deleted:[],data:[]} --包含修改、新增、删除的数据，以及最新的表格数据data\n   */\n  onComplete: PropTypes.func\n};\n\nexport default Editable;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Other = () => {\r\n  return <div />;\r\n};\r\n\r\nOther.defaultProps = {\r\n  pagination: false,\r\n  loading: false,\r\n  striped: true,\r\n  columnDropMenu: true\r\n};\r\n\r\nOther.propTypes = {\r\n  /** 数据是否加载中 */\r\n  loading: PropTypes.bool,\r\n\r\n  /** 排序列配置 */\r\n  orderNumber: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 行右键菜单渲染 */\r\n  contextMenu: PropTypes.func,\r\n\r\n  /** 分页 */\r\n  pagination: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\r\n\r\n  /** 是否启用列标题配置项菜单 */\r\n  columnDropMenu: PropTypes.bool,\r\n\r\n  /** 是否可进行列排序 */\r\n  sortable: PropTypes.bool,\r\n\r\n  /** 是否可进行属性配置 */\r\n  settable: PropTypes.bool,\r\n\r\n  /** 奇偶行颜色间隔 */\r\n  striped: PropTypes.bool,\r\n\r\n  /** 表格全局id，通过此id记忆表格配置，由于采用localStorage存储配置，需保证id唯一 */\r\n  tableId: function(props, propName, componentName) {\r\n    let count = 0;\r\n    let v = props[propName];\r\n\r\n    if (typeof v !== \"undefined\" && v !== \"\") {\r\n      let tbs = document.getElementsByClassName(\"table-extend\");\r\n\r\n      for (let i = 0, len = tbs.length; i < len; i++) {\r\n        const tb = tbs[i];\r\n        if (tb) {\r\n          const t = tb.getAttribute(\"data-tableid\");\r\n          if (t === v) {\r\n            count = count + 1;\r\n\r\n            if (count > 1) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (count > 1) {\r\n      return new Error(\r\n        ` Encountered two table with the same tableId, '${v}'.The tableId must be unique in the whole application.\r\n                  We Recommended set the tableId based on file path.\r\n                  eg: platform/user/index.js =>  platform-user-xxx `\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default Other;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Draggable = () => {\r\n  return <div />;\r\n};\r\n\r\nDraggable.defaultProps = {\r\n  allowDragLevel: true,\r\n  useDragHandle: false,\r\n  dragHandleSelector: \"\"\r\n};\r\n\r\nDraggable.propTypes = {\r\n  /** 是否允许拖动层级 */\r\n  allowDragLevel: PropTypes.bool,\r\n  /** 是否使用拖动按钮，此按钮将独占一列 */\r\n  useDragHandle: PropTypes.bool,\r\n  /** 拖动按钮渲染,useDragHandle:true时有效 */\r\n  dragHandleRender: PropTypes.func,\r\n  /** 拖动按钮元素选择器,useDragHandle:false时有效，将会在当前行元素内查找此选择器 */\r\n  dragHandleSelector: PropTypes.string,\r\n\r\n  /** 行是否允许拖动,返回false阻止拖拽 */\r\n  canDrag: PropTypes.func,\r\n  /** 拖动开始事件 */\r\n  onDragBegin: PropTypes.func,\r\n  /** 拖动结束事件 */\r\n  onDragEnd: PropTypes.func,\r\n\r\n  /** 是否允许放置,返回false阻止放置 */\r\n  canDrop: PropTypes.func,\r\n  /** 放置hover事件 */\r\n  onDropHover: PropTypes.func,\r\n  /** 放置完成事件 */\r\n  onDrop: PropTypes.func,\r\n\r\n  /** 拖动、放置完成事件，此事件中返回拖动后的新数据 */\r\n  onDragComplete: PropTypes.func,\r\n  /** 获取表格实例 */\r\n  tableRef: PropTypes.func\r\n};\r\n\r\nexport default Draggable;\r\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Column from \"../types/Column.js\";\nimport Table from \"../types/Table.js\";\nimport Selection from \"../types/Selection.js\";\nimport RowSelection from \"../types/RowSelection.js\";\nimport Expandable from \"../types/Expandable.js\";\nimport Editable from \"../types/Editable.js\";\nimport Other from \"../types/Other.js\";\nimport Draggable from \"../types/Draggable.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"基础\"\n    }}>{`基础`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <Props of={Other} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"选择\"\n    }}>{`选择`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`通过 rowSelection 属性配置选择功能，rowSelection包含以下配置项：`}</p>\n    </blockquote>\n    <Props of={RowSelection} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"展开\"\n    }}>{`展开`}</h2>\n    <Props of={Expandable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"编辑\"\n    }}>{`编辑`}</h2>\n    <Props of={Editable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"表格列\"\n    }}>{`表格列`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"拖动表格\"\n    }}>{`拖动表格`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`拖动表格支持所有Table属性，以下是新增属性`}</p>\n    </blockquote>\n    <Props of={Draggable} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}