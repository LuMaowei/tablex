{"version":3,"sources":["e:/WebRoot/tablex/packages/site/examples/Selection/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_8__","__position","__code","__scope","this","Playground","Props","Table","flatten","Input","Checkbox","style","height","_React$Component","Demo","_this","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","columns","dataIndex","title","key","width","align","data","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","generateData","state","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","e_WebRoot_tablex_packages_site_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","value","count","arguments","length","undefined","prefix","Array","fill","map","row","rowIndex","reduce","rowData","column","columnIndex","Math","floor","random","parentId","_this$state","tablex__WEBPACK_IMPORTED_MODULE_9___default","a","rowKey","selectMode","orderNumber","React","Component","_React$Component2","_this2","_this$state2","_React$Component3","_this3","_this$state3","selectOnRowClick","_React$Component4","_this4","_this$state4","current","pageSize","total","disabledSelectKeys","_React$Component5","_this5","children","_this$state5","checkStrictly","_React$Component6","_this6","_this$state6","selectionColumn","fixed","attrs","antd__WEBPACK_IMPORTED_MODULE_11__","disabled","onChange","e","target","checked","render","index","extra","isMDXComponent"],"mappings":"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","file":"static/js/examples-selection-index.30574410.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Table, { flatten } from \"tablex\";\nimport { Input,Checkbox } from \"antd\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Table, { flatten, unflatten } from \"tablex\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"none-select\"\n    }}>{`None Select`}</h2>\n    <Playground __position={0} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"none\\\"\\n          orderNumber={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"none\" orderNumber={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"single-select\"\n    }}>{`Single Select`}</h2>\n    <Playground __position={1} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"single\\\"\\n          orderNumber={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"single\" orderNumber={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"mutiple-select\"\n    }}>{`Mutiple Select`}</h2>\n    <Playground __position={2} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          selectOnRowClick={false}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} selectOnRowClick={false} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabledselectkeys\"\n    }}>{`disabledSelectKeys`}</h2>\n    <Playground __position={3} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\'\\' + rowIndex + \\'-Col\\' + columnIndex\\n            }\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 50)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data, current, pageSize, total } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          disabledSelectKeys={[\\n            \\'Row0-Col0\\',\\n            \\'Row1-Col0\\',\\n            \\'Row2-Col0\\',\\n            \\'Row3-Col0\\',\\n            \\'Row4-Col0\\',\\n          ]}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \"\" + rowIndex + \"-Col\" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 50);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data,\n            current,\n            pageSize,\n            total\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" disabledSelectKeys={[\"Row0-Col0\", \"Row1-Col0\", \"Row2-Col0\", \"Row3-Col0\", \"Row4-Col0\"]} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"checkstrictly\"\n    }}>{`checkStrictly`}</h2>\n    <Playground __position={4} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      data[0].children = this.generateData(columns, 5, \\'Row-0-children-\\')\\n      data[0].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-0-children-0-\\',\\n      )\\n\\n      data[3].children = this.generateData(columns, 5, \\'Row-3-children-\\')\\n      data[3].children[0].children = this.generateData(\\n        columns,\\n        5,\\n        \\'Row-3-children-0-\\',\\n      )\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          checkStrictly={true}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          data[0].children = this.generateData(columns, 5, \"Row-0-children-\");\n          data[0].children[0].children = this.generateData(columns, 5, \"Row-0-children-0-\");\n          data[3].children = this.generateData(columns, 5, \"Row-3-children-\");\n          data[3].children[0].children = this.generateData(columns, 5, \"Row-3-children-0-\");\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} checkStrictly={true} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"selectioncolumn\"\n    }}>{`selectionColumn`}</h2>\n    <Playground __position={5} __code={'class Demo extends React.Component {\\n    generateData(columns, count = 20, prefix = \\'Row\\') {\\n      return new Array(count).fill(0).map((row, rowIndex) => {\\n        return columns.reduce(\\n          (rowData, column, columnIndex) => {\\n            if (column.dataIndex !== \\'id\\') {\\n              rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1)\\n            } else {\\n              rowData[column.dataIndex] =\\n                prefix + \\' \\' + rowIndex + \\' - Col \\' + columnIndex\\n            }\\n\\n            return rowData\\n          },\\n          {\\n            id: prefix + rowIndex,\\n            parentId: null,\\n          },\\n        )\\n      })\\n    }\\n    constructor(props) {\\n      super(props)\\n      const columns = [\\n        {\\n          dataIndex: \\'id\\',\\n          title: \\'id\\',\\n          key: \\'id\\',\\n          width: 150,\\n        },\\n        {\\n          dataIndex: \\'column-1\\',\\n          key: \\'column-1\\',\\n          title: \\'column-1\\',\\n          width: 100,\\n        },\\n\\n        {\\n          dataIndex: \\'column-2\\',\\n          key: \\'column-2\\',\\n          title: \\'column-2\\',\\n          width: 150,\\n          align: \\'center\\',\\n        },\\n\\n        {\\n          dataIndex: \\'column-3\\',\\n          key: \\'column-3\\',\\n          title: \\'column-3\\',\\n          align: \\'right\\',\\n        },\\n        {\\n          dataIndex: \\'column-4\\',\\n          key: \\'column-4\\',\\n          title: \\'column-4\\',\\n          width: 100,\\n          align: \\'center\\',\\n        },\\n      ]\\n\\n      let data = this.generateData(columns, 20)\\n\\n      this.state = {\\n        data: data,\\n        columns: columns,\\n      }\\n    }\\n    render() {\\n      let { columns, data } = this.state\\n      return (\\n        <Table\\n          rowKey=\\\"id\\\"\\n          columns={columns}\\n          data={data}\\n          selectMode=\\\"multiple\\\"\\n          orderNumber={false}\\n          selectionColumn={{\\n            fixed: \\'left\\',\\n            title: attrs => {\\n              return (\\n                <Checkbox\\n                  {...attrs}\\n                  disabled={true}\\n                  onChange={e => {\\n                    attrs.onChange(e.target.checked)\\n                  }}\\n                />\\n              )\\n            },\\n            render: (row, index, extra) => {\\n              return (\\n                <Checkbox\\n                  {...extra}\\n                  onChange={e => {\\n                    extra.onChange(e.target.checked)\\n                  }}\\n                />\\n              )\\n            },\\n          }}\\n        />\\n      )\\n    }\\n  }'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Table,\n      flatten,\n      Input,\n      Checkbox\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n {class Demo extends React.Component {\n        generateData(columns, count = 20, prefix = \"Row\") {\n          return new Array(count).fill(0).map((row, rowIndex) => {\n            return columns.reduce((rowData, column, columnIndex) => {\n              if (column.dataIndex !== \"id\") {\n                rowData[column.dataIndex] = Math.floor(Math.random() * 100 + 1);\n              } else {\n                rowData[column.dataIndex] = prefix + \" \" + rowIndex + \" - Col \" + columnIndex;\n              }\n\n              return rowData;\n            }, {\n              id: prefix + rowIndex,\n              parentId: null\n            });\n          });\n        }\n\n        constructor(props) {\n          super(props);\n          const columns = [{\n            dataIndex: \"id\",\n            title: \"id\",\n            key: \"id\",\n            width: 150\n          }, {\n            dataIndex: \"column-1\",\n            key: \"column-1\",\n            title: \"column-1\",\n            width: 100\n          }, {\n            dataIndex: \"column-2\",\n            key: \"column-2\",\n            title: \"column-2\",\n            width: 150,\n            align: \"center\"\n          }, {\n            dataIndex: \"column-3\",\n            key: \"column-3\",\n            title: \"column-3\",\n            align: \"right\"\n          }, {\n            dataIndex: \"column-4\",\n            key: \"column-4\",\n            title: \"column-4\",\n            width: 100,\n            align: \"center\"\n          }];\n          let data = this.generateData(columns, 20);\n          this.state = {\n            data: data,\n            columns: columns\n          };\n        }\n\n        render() {\n          let {\n            columns,\n            data\n          } = this.state;\n          return <Table rowKey=\"id\" columns={columns} data={data} selectMode=\"multiple\" orderNumber={false} selectionColumn={{\n            fixed: \"left\",\n            title: attrs => {\n              return <Checkbox {...attrs} disabled={true} onChange={e => {\n                attrs.onChange(e.target.checked);\n              }} mdxType=\"Checkbox\" />;\n            },\n            render: (row, index, extra) => {\n              return <Checkbox {...extra} onChange={e => {\n                extra.onChange(e.target.checked);\n              }} mdxType=\"Checkbox\" />;\n            }\n          }} mdxType=\"Table\" />;\n        }\n\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}