{"version":3,"sources":["e:/WebRoot/tablex/packages/siteCN/doc/components/body.js","e:/WebRoot/tablex/packages/siteCN/doc/components/index.mdx"],"names":["DraggableRow","SortableElement","props","DraggableContainer","SortableContainer","className","children","DraggableTableRow","rowData","rowIndex","rowProps","index","data-key","id","DraggableTable","components","body","row","Demo","state","data","columns","dataIndex","key","title","validator","value","valid","message","editor","onchange","ref","defaultValue","onChange","e","target","address","width","count","prefix","Array","fill","map","reduce","column","columnIndex","parentId","generateData","this","setState","newIndex","oldIndex","array","from","to","slice","splice","length","ReactDom","findDOMNode","querySelector","rowKey","expandColumnKey","editable","selectMode","orderNumber","lockAxis","onSortEnd","bind","validateTrigger","distance","helperClass","getContainer","Component","layoutProps","MDXLayout","MDXContent","mdxType","__position","__code","__scope","Playground","Props","Body","style","height","parentName","isMDXComponent"],"mappings":"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","file":"static/js/doc-components-index.9c4e9b5e.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Table } from \"tablex\";\nimport { Input, Button } from \"antd\";\n\nimport \"./styles.css\";\n\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst DraggableRow = SortableElement(props => {\n  return <div {...props} />;\n});\n\nconst DraggableContainer = SortableContainer(({ className, children }) => {\n  return <div className={className}>{children}</div>;\n});\n\nfunction DraggableTableRow(props) {\n  let { rowData, rowIndex, rowProps } = props;\n  return <DraggableRow {...rowProps} index={rowIndex} data-key={rowData.id} />;\n}\n\nconst DraggableTable = props => {\n  return (\n    <Table\n      {...props}\n      components={{\n        body: ({ className, children }) => {\n          return (\n            <DraggableContainer className={className} {...props}>\n              {children}\n            </DraggableContainer>\n          );\n        },\n        row: DraggableTableRow\n      }}\n    />\n  );\n};\n\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\n  new Array(count).fill(0).map((row, rowIndex) => {\n    return columns.reduce(\n      (rowData, column, columnIndex) => {\n        rowData[column.dataIndex] = `Row ${rowIndex} - Col ${columnIndex}`;\n\n        if (rowIndex === 0) {\n          //rowData.children = [];\n        }\n\n        return rowData;\n      },\n      {\n        id: `${prefix}${rowIndex}`,\n        parentId: null\n      }\n    );\n  });\n\nconst arrayMove = (array, from, to) => {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n};\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let columns = [\n      {\n        dataIndex: \"column-1\",\n        key: \"column-1\",\n        title: \"column-1\",\n        validator: function(value, row) {\n          if (!value) {\n            return { valid: false, message: \"请输入\" };\n          }\n\n          return { valid: true, message: \"false\" };\n        },\n        editor: function(value, row, index, onchange, ref) {\n          return (\n            <Input\n              defaultValue={value}\n              ref={ref}\n              onChange={e =>\n                onchange([\n                  { \"column-1\": e.target.value, id: row.id },\n                  { id: \"3\", address: e.target.value }\n                ])\n              }\n            />\n          );\n        }\n      },\n      {\n        width: 150,\n        dataIndex: \"column-2\",\n        title: \"column-2\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-3\",\n        title: \"column-3\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-4\",\n        title: \"column-4\"\n      }\n    ];\n\n    const data = generateData(columns, 100);\n\n    this.setState({\n      data: data,\n      columns: columns\n    });\n  }\n\n  onSortEnd({ newIndex, oldIndex }) {\n    this.setState(({ data }) => ({\n      data: arrayMove(data, oldIndex, newIndex)\n    }));\n  }\n\n  getContainer() {\n    let el = ReactDom.findDOMNode(this);\n    return el.querySelector(\".tablex-table-body>div\");\n  }\n\n  render() {\n    return (\n      <DraggableTable\n        rowKey=\"id\"\n        expandColumnKey=\"column-1\"\n        editable={true}\n        columns={this.state.columns}\n        selectMode=\"none\"\n        data={this.state.data}\n        orderNumber={true}\n        lockAxis=\"y\"\n        onSortEnd={this.onSortEnd.bind(this)}\n        validateTrigger=\"onChange\"\n        distance={10}\n        helperClass=\"tablex-row-dragging\"\n        getContainer={this.getContainer.bind(this)}\n      />\n    );\n  }\n}\n\nexport default Demo;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from \"docz\";\nimport Body from \"./body.js\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tablecomponents\"\n    }}>{`Table.components`}</h1>\n    <h2 {...{\n      \"id\": \"使用react-sortable-hoc实现行拖动\"\n    }}>{`使用react-sortable-hoc实现行拖动`}</h2>\n    <Playground __position={0} __code={'<Body />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Body\n    }} style={{\n      height: 400\n    }} mdxType=\"Playground\">\n  <Body mdxType=\"Body\" />\n    </Playground>\n    <p><inlineCode parentName=\"p\">{`js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nimport React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Table } from \"tablex\";\nimport { Input, Button } from \"antd\";\n\nimport \"./styles.css\";\n\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\n\nconst DraggableRow = SortableElement(props => {\n  return <div {...props} />;\n});\n\nconst DraggableContainer = SortableContainer(({ className, children }) => {\n  return <div className={className}>{children}</div>;\n});\n\nfunction DraggableTableRow(props) {\n  let { rowData, rowIndex, rowProps } = props;\n  return <DraggableRow {...rowProps} index={rowIndex} data-key={rowData.id} />;\n}\n\nconst DraggableTable = props => {\n  return (\n    <Table\n      {...props}\n      components={{\n        body: ({ className, children }) => {\n          return (\n            <DraggableContainer className={className} {...props}>\n              {children}\n            </DraggableContainer>\n          );\n        },\n        row: DraggableTableRow\n      }}\n    />\n  );\n};\n\nconst generateData = (columns, count = 20, prefix = \"row-\") =>\n  new Array(count).fill(0).map((row, rowIndex) => {\n    return columns.reduce(\n      (rowData, column, columnIndex) => {\n        rowData[column.dataIndex] = \\`Row \\${rowIndex} - Col \\${columnIndex}\\`;\n\n        if (rowIndex === 0) {\n          //rowData.children = [];\n        }\n\n        return rowData;\n      },\n      {\n        id: \\`\\${prefix}\\${rowIndex}\\`,\n        parentId: null\n      }\n    );\n  });\n\nconst arrayMove = (array, from, to) => {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n};\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let columns = [\n      {\n        dataIndex: \"column-1\",\n        key: \"column-1\",\n        title: \"column-1\",\n        validator: function(value, row) {\n          if (!value) {\n            return { valid: false, message: \"请输入\" };\n          }\n\n          return { valid: true, message: \"false\" };\n        },\n        editor: function(value, row, index, onchange, ref) {\n          return (\n            <Input\n              defaultValue={value}\n              ref={ref}\n              onChange={e =>\n                onchange([\n                  { \"column-1\": e.target.value, id: row.id },\n                  { id: \"3\", address: e.target.value }\n                ])\n              }\n            />\n          );\n        }\n      },\n      {\n        width: 150,\n        dataIndex: \"column-2\",\n        title: \"column-2\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-3\",\n        title: \"column-3\"\n      },\n      {\n        width: 150,\n        dataIndex: \"column-4\",\n        title: \"column-4\"\n      }\n    ];\n\n    const data = generateData(columns, 100);\n\n    this.setState({\n      data: data,\n      columns: columns\n    });\n  }\n\n  onSortEnd({ newIndex, oldIndex }) {\n    this.setState(({ data }) => ({\n      data: arrayMove(data, oldIndex, newIndex)\n    }));\n  }\n\n  getContainer() {\n    let el = ReactDom.findDOMNode(this);\n    return el.querySelector(\".tablex-table-body>div\");\n  }\n\n  render() {\n    return (\n      <DraggableTable\n        rowKey=\"id\"\n        expandColumnKey=\"column-1\"\n        editable={true}\n        columns={this.state.columns}\n        selectMode=\"none\"\n        data={this.state.data}\n        orderNumber={true}\n        lockAxis=\"y\"\n        onSortEnd={this.onSortEnd.bind(this)}\n        validateTrigger=\"onChange\"\n        distance={10}\n        helperClass=\"tablex-row-dragging\"\n        getContainer={this.getContainer.bind(this)}\n      />\n    );\n  }\n}\n\nexport default Demo;\n\n\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`styles.css`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`\n.tablex-table-row.tablex-row-dragging {\n  display: flex;\n  width: auto;\n  min-width: auto;\n  background-color: #ffffff;\n  box-shadow: 0 0px 5px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.tablex-table-row.tablex-row-dragging .tablex-table-row-cell {\n  display: flex;\n  flex: 0 0 auto;\n  box-sizing: border-box;\n  align-items: center;\n  position: relative;\n}\n\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}