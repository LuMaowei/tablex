{"remainingRequest":"E:\\WebRoot\\tablex\\tablex\\node_modules\\thread-loader\\dist\\cjs.js??ref--5-1!E:\\WebRoot\\tablex\\tablex\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--5-2!E:\\WebRoot\\tablex\\tablex\\node_modules\\source-map-loader\\index.js!E:\\WebRoot\\tablex\\tablex\\examples\\sticky.js","dependencies":[{"path":"E:\\WebRoot\\tablex\\tablex\\examples\\sticky.js","mtime":1559355624894},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1553685911267},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1554538856109},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1553685910943},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\source-map-loader\\index.js","mtime":1553685912297}],"contextDependencies":[],"result":["var _jsxFileName = \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { VariableSizeGrid as Grid } from \"react-window\";\nimport \"./styles.css\"; // These cell sizes are arbitrary.\n// Yours should be based on the content of the cell.\n\nvar columnWidths = new Array(1000).fill(true).map(function (e, i) {\n  return i === 0 ? 200 : 75 + Math.round(Math.random() * 50);\n});\nvar rowHeights = new Array(1000).fill(true).map(function (e, i) {\n  return i === 0 ? 60 : 25 + Math.round(Math.random() * 50);\n});\n\nvar Cell = function Cell(_ref) {\n  var columnIndex = _ref.columnIndex,\n      rowIndex = _ref.rowIndex,\n      style = _ref.style;\n  return React.createElement(\"div\", {\n    className: columnIndex % 2 ? rowIndex % 2 === 0 ? \"GridItemOdd\" : \"GridItemEven\" : rowIndex % 2 ? \"GridItemOdd\" : \"GridItemEven\",\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"r\", rowIndex, \", c\", columnIndex);\n};\n\nvar Example = function Example() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      background: \"grey\",\n      zIndex: 2,\n      top: 8,\n      left: 8,\n      height: 61,\n      width: 201,\n      position: \"fixed\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    className: \"Grid\",\n    columnCount: 1000,\n    columnWidth: function columnWidth(index) {\n      return columnWidths[index];\n    },\n    height: 350,\n    rowCount: 1000,\n    rowHeight: function rowHeight(index) {\n      return rowHeights[index];\n    },\n    width: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, Cell));\n};\n\nvar _default = Example;\nexport default _default;\n\nif (typeof Example !== 'undefined' && Example && Example === Object(Example) && Object.isExtensible(Example)) {\n  Object.defineProperty(Example, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"Example\",\n      filename: \"examples\\\\sticky.js\"\n    }\n  });\n}\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(columnWidths, \"columnWidths\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\");\n  reactHotLoader.register(rowHeights, \"rowHeights\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\");\n  reactHotLoader.register(Cell, \"Cell\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\");\n  reactHotLoader.register(Example, \"Example\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\");\n  reactHotLoader.register(_default, \"default\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\examples\\\\sticky.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["E:\\WebRoot\\tablex\\tablex\\examples\\sticky.js"],"names":["React","ReactDOM","VariableSizeGrid","Grid","columnWidths","Array","fill","map","e","i","Math","round","random","rowHeights","Cell","columnIndex","rowIndex","style","Example","background","zIndex","top","left","height","width","position","index"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,gBAAgB,IAAIC,IAA7B,QAAyC,cAAzC;AAEA,OAAO,cAAP,C,CAEA;AACA;;AACA,IAAMC,YAAY,GAAG,IAAIC,KAAJ,CAAU,IAAV,EAClBC,IADkB,CACb,IADa,EAElBC,GAFkB,CAEd,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAWA,CAAC,KAAK,CAAN,GAAU,GAAV,GAAgB,KAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAhC;AAAA,CAFc,CAArB;AAGA,IAAMC,UAAU,GAAG,IAAIR,KAAJ,CAAU,IAAV,EAChBC,IADgB,CACX,IADW,EAEhBC,GAFgB,CAEZ,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAWA,CAAC,KAAK,CAAN,GAAU,EAAV,GAAe,KAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAA/B;AAAA,CAFY,CAAnB;;AAIA,IAAME,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,MAAgBC,QAAhB,QAAgBA,QAAhB;AAAA,MAA0BC,KAA1B,QAA0BA,KAA1B;AAAA,SACX;AACE,IAAA,SAAS,EACPF,WAAW,GAAG,CAAd,GACIC,QAAQ,GAAG,CAAX,KAAiB,CAAjB,GACE,aADF,GAEE,cAHN,GAIIA,QAAQ,GAAG,CAAX,GACA,aADA,GAEA,cARR;AAUE,IAAA,KAAK,EAAEC,KAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAYID,QAZJ,SAYiBD,WAZjB,CADW;AAAA,CAAb;;AAiBA,IAAMG,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,MADP;AAELC,MAAAA,MAAM,EAAE,CAFH;AAGLC,MAAAA,GAAG,EAAE,CAHA;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,MAAM,EAAE,EALH;AAMLC,MAAAA,KAAK,EAAE,GANF;AAOLC,MAAAA,QAAQ,EAAE;AAPL,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,WAAW,EAAE,IAFf;AAGE,IAAA,WAAW,EAAE,qBAAAC,KAAK;AAAA,aAAItB,YAAY,CAACsB,KAAD,CAAhB;AAAA,KAHpB;AAIE,IAAA,MAAM,EAAE,GAJV;AAKE,IAAA,QAAQ,EAAE,IALZ;AAME,IAAA,SAAS,EAAE,mBAAAA,KAAK;AAAA,aAAIb,UAAU,CAACa,KAAD,CAAd;AAAA,KANlB;AAOE,IAAA,KAAK,EAAE,GAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGZ,IATH,CAbF,CADc;AAAA,CAAhB;;eA4BeI,O;AAAf;;;;;;;;;;;;;;;;;;;;;;0BApDMd,Y;0BAGAS,U;0BAIAC,I;0BAiBAI,O","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { VariableSizeGrid as Grid } from \"react-window\";\r\n\r\nimport \"./styles.css\";\r\n\r\n// These cell sizes are arbitrary.\r\n// Yours should be based on the content of the cell.\r\nconst columnWidths = new Array(1000)\r\n  .fill(true)\r\n  .map((e, i) => (i === 0 ? 200 : 75 + Math.round(Math.random() * 50)));\r\nconst rowHeights = new Array(1000)\r\n  .fill(true)\r\n  .map((e, i) => (i === 0 ? 60 : 25 + Math.round(Math.random() * 50)));\r\n\r\nconst Cell = ({ columnIndex, rowIndex, style }) => (\r\n  <div\r\n    className={\r\n      columnIndex % 2\r\n        ? rowIndex % 2 === 0\r\n          ? \"GridItemOdd\"\r\n          : \"GridItemEven\"\r\n        : rowIndex % 2\r\n        ? \"GridItemOdd\"\r\n        : \"GridItemEven\"\r\n    }\r\n    style={style}\r\n  >\r\n    r{rowIndex}, c{columnIndex}\r\n  </div>\r\n);\r\n\r\nconst Example = () => (\r\n  <div>\r\n    <div\r\n      style={{\r\n        background: \"grey\",\r\n        zIndex: 2,\r\n        top: 8,\r\n        left: 8,\r\n        height: 61,\r\n        width: 201,\r\n        position: \"fixed\"\r\n      }}\r\n    />\r\n\r\n    <Grid\r\n      className=\"Grid\"\r\n      columnCount={1000}\r\n      columnWidth={index => columnWidths[index]}\r\n      height={350}\r\n      rowCount={1000}\r\n      rowHeight={index => rowHeights[index]}\r\n      width={500}\r\n    >\r\n      {Cell}\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nexport default Example;\r\n"]}]}