{"remainingRequest":"E:\\WebRoot\\tablex\\node_modules\\thread-loader\\dist\\cjs.js??ref--5-1!E:\\WebRoot\\tablex\\node_modules\\babel-loader\\lib\\index.js??ref--5-2!E:\\WebRoot\\tablex\\node_modules\\source-map-loader\\index.js!E:\\WebRoot\\tablex\\src\\helper.js","dependencies":[{"path":"E:\\WebRoot\\tablex\\src\\helper.js","mtime":1559204542871},{"path":"E:\\WebRoot\\tablex\\node_modules\\umi-library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559204841349},{"path":"E:\\WebRoot\\tablex\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1554780430526},{"path":"E:\\WebRoot\\tablex\\node_modules\\babel-loader\\lib\\index.js","mtime":1551944504366},{"path":"E:\\WebRoot\\tablex\\node_modules\\source-map-loader\\index.js","mtime":1551944506105}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:\\WebRoot\\tablex\\src\\helper.js"],"names":["getNodeDataAtTreeIndexOrNextIndex","targetIndex","node","currentIndex","getNodeKey","path","lowerSiblingCounts","ignoreCollapsed","isPseudoRoot","selfPath","treeIndex","children","expanded","nextIndex","childIndex","childCount","length","i","result","getDescendantCount","walkDescendants","callback","parentNode","selfInfo","callbackResult","mapDescendants","nextNode","map","child","mapResult","getVisibleNodeCount","treeData","traverse","reduce","total","currentNode","getVisibleNodeInfoAtIndex","index","walk","toggleExpandedForAll","changeNodeAtPath","newNode","RESULT_MISS","currentTreeIndex","pathIndex","Error","nextTreeIndex","slice","removeNodeAtPath","removeNode","removedNode","removedTreeIndex","nextTreeData","getNodeAtPath","foundNodeInfo","err","addNodeUnderParent","parentKey","expandParent","addAsFirstChild","insertedTreeIndex","hasBeenAdded","changedTreeData","key","addNodeAtDepthAndIndex","targetDepth","minimumTreeIndex","isLastChild","currentDepth","n","extraNodeProps","parentPath","insertIndex","pathFragment","newChildren","insertNode","depth","insertResult","getFlatDataFromTree","flattened","nodeInfo","push","getTreeFromFlatData","flatData","getKey","id","getParentKey","parentId","rootKey","childrenToParents","forEach","trav","parent","isDescendant","older","younger","some","getDepth","deepest","Math","max","find","searchQuery","searchMethod","searchFocusOffset","expandAllMatchPaths","expandFocusMatchPaths","matchCount","matches","isSelfMatch","hasFocusMatch","extraInfo","hasChildren","match","treeToList","arr","treeList","leafs","roots","list","d","childrens","__depth","getChildren","tempArr","getDataListWithExpanded","expandedKeys","rowKey","indexOf","setChildren","c","cArr","getScrollbarWidth","userAgent","navigator","oP","document","createElement","styles","width","height","overflowY","scrollbarWidth","style","body","appendChild","offsetWidth","clientWidth","remove"],"mappings":"kYAAA;;;GAIA,QAASA,CAAAA,iCAAT,MASG,IARDC,CAAAA,WAQC,MARDA,WAQC,CAPDC,IAOC,MAPDA,IAOC,CANDC,YAMC,MANDA,YAMC,CALDC,UAKC,MALDA,UAKC,gBAJDC,IAIC,CAJDA,IAIC,oBAJM,EAIN,sCAHDC,kBAGC,CAHDA,kBAGC,gCAHoB,EAGpB,iDAFDC,eAEC,CAFDA,eAEC,+BAFiB,IAEjB,6CADDC,YACC,CADDA,YACC,4BADc,KACd,mBACD;AACA,GAAMC,CAAAA,QAAQ,CAAG,CAACD,YAAD,8BACTH,IADS,GACHD,UAAU,CAAC,CAAEF,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAAEP,YAAnB,CAAD,CADP,GAEb,EAFJ,CAIA;AACA,GAAIA,YAAY,GAAKF,WAArB,CAAkC,CAChC,MAAO,CACLC,IAAI,CAAJA,IADK,CAELI,kBAAkB,CAAlBA,kBAFK,CAGLD,IAAI,CAAEI,QAHD,CAAP,CAKD,CAED;AACA,GAAI,CAACP,IAAI,CAACS,QAAN,EAAmBJ,eAAe,EAAIL,IAAI,CAACU,QAAL,GAAkB,IAA5D,CAAmE,CACjE,MAAO,CAAEC,SAAS,CAAEV,YAAY,CAAG,CAA5B,CAAP,CACD,CAED;AACA;AACA,GAAIW,CAAAA,UAAU,CAAGX,YAAY,CAAG,CAAhC,CACA,GAAMY,CAAAA,UAAU,CAAGb,IAAI,CAACS,QAAL,CAAcK,MAAjC,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,UAApB,CAAgCE,CAAC,EAAI,CAArC,CAAwC,CACtC,GAAMC,CAAAA,MAAM,CAAGlB,iCAAiC,CAAC,CAC/CO,eAAe,CAAfA,eAD+C,CAE/CH,UAAU,CAAVA,UAF+C,CAG/CH,WAAW,CAAXA,WAH+C,CAI/CC,IAAI,CAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAJyC,CAK/Cd,YAAY,CAAEW,UALiC,CAM/CR,kBAAkB,8BAAMA,kBAAN,GAA0BS,UAAU,CAAGE,CAAb,CAAiB,CAA3C,EAN6B,CAO/CZ,IAAI,CAAEI,QAPyC,CAAD,CAAhD,CAUA,GAAIS,MAAM,CAAChB,IAAX,CAAiB,CACf,MAAOgB,CAAAA,MAAP,CACD,CAEDJ,UAAU,CAAGI,MAAM,CAACL,SAApB,CACD,CAED;AACA,MAAO,CAAEA,SAAS,CAAEC,UAAb,CAAP,CACD,CAED,MAAO,SAASK,CAAAA,kBAAT,OAA8D,IAAhCjB,CAAAA,IAAgC,OAAhCA,IAAgC,6BAA1BK,eAA0B,CAA1BA,eAA0B,gCAAR,IAAQ,uBACnE,MACEP,CAAAA,iCAAiC,CAAC,CAChCI,UAAU,CAAE,qBAAM,CAAE,CADY,CAEhCG,eAAe,CAAfA,eAFgC,CAGhCL,IAAI,CAAJA,IAHgC,CAIhCC,YAAY,CAAE,CAJkB,CAKhCF,WAAW,CAAE,CAAC,CALkB,CAAD,CAAjC,CAMGY,SANH,CAMe,CAPjB,CASD,CAED;;;;;;;;;;;;;;;;;;qTAmBA,QAASO,CAAAA,eAAT,OAUG,IATDC,CAAAA,QASC,OATDA,QASC,CARDjB,UAQC,OARDA,UAQC,CAPDG,eAOC,OAPDA,eAOC,0BANDC,YAMC,CANDA,YAMC,6BANc,KAMd,oBALDN,IAKC,OALDA,IAKC,wBAJDoB,UAIC,CAJDA,UAIC,2BAJY,IAIZ,kBAHDnB,YAGC,OAHDA,YAGC,kBAFDE,IAEC,CAFDA,IAEC,qBAFM,EAEN,wCADDC,kBACC,CADDA,kBACC,gCADoB,EACpB,uBACD;AACA,GAAMG,CAAAA,QAAQ,CAAGD,YAAY,CACzB,EADyB,8BAErBH,IAFqB,GAEfD,UAAU,CAAC,CAAEF,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAAEP,YAAnB,CAAD,CAFK,EAA7B,CAGA,GAAMoB,CAAAA,QAAQ,CAAGf,YAAY,CACzB,IADyB,CAEzB,CACEN,IAAI,CAAJA,IADF,CAEEoB,UAAU,CAAVA,UAFF,CAGEjB,IAAI,CAAEI,QAHR,CAIEH,kBAAkB,CAAlBA,kBAJF,CAKEI,SAAS,CAAEP,YALb,CAFJ,CAUA,GAAI,CAACK,YAAL,CAAmB,CACjB,GAAMgB,CAAAA,cAAc,CAAGH,QAAQ,CAACE,QAAD,CAA/B,CAEA;AACA,GAAIC,cAAc,GAAK,KAAvB,CAA8B,CAC5B,MAAO,MAAP,CACD,CACF,CAED;AACA,GACE,CAACtB,IAAI,CAACS,QAAN,EACCT,IAAI,CAACU,QAAL,GAAkB,IAAlB,EAA0BL,eAA1B,EAA6C,CAACC,YAFjD,CAGE,CACA,MAAOL,CAAAA,YAAP,CACD,CAED;AACA,GAAIW,CAAAA,UAAU,CAAGX,YAAjB,CACA,GAAMY,CAAAA,UAAU,CAAGb,IAAI,CAACS,QAAL,CAAcK,MAAjC,CACA,GAAI,MAAOd,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UAA7B,CAAyC,CACvC,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,UAApB,CAAgCE,CAAC,EAAI,CAArC,CAAwC,CACtCH,UAAU,CAAGM,eAAe,CAAC,CAC3BC,QAAQ,CAARA,QAD2B,CAE3BjB,UAAU,CAAVA,UAF2B,CAG3BG,eAAe,CAAfA,eAH2B,CAI3BL,IAAI,CAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAJqB,CAK3BK,UAAU,CAAEd,YAAY,CAAG,IAAH,CAAUN,IALP,CAM3BC,YAAY,CAAEW,UAAU,CAAG,CANA,CAO3BR,kBAAkB,8BAAMA,kBAAN,GAA0BS,UAAU,CAAGE,CAAb,CAAiB,CAA3C,EAPS,CAQ3BZ,IAAI,CAAEI,QARqB,CAAD,CAA5B,CAWA;AACA,GAAIK,UAAU,GAAK,KAAnB,CAA0B,CACxB,MAAO,MAAP,CACD,CACF,CACF,CAED,MAAOA,CAAAA,UAAP,CACD,CAED;;;;;;;;;;;;;;;;;;GAmBA,QAASW,CAAAA,cAAT,OAUG,IATDJ,CAAAA,QASC,OATDA,QASC,CARDjB,UAQC,OARDA,UAQC,CAPDG,eAOC,OAPDA,eAOC,0BANDC,YAMC,CANDA,YAMC,6BANc,KAMd,oBALDN,IAKC,OALDA,IAKC,wBAJDoB,UAIC,CAJDA,UAIC,2BAJY,IAIZ,kBAHDnB,YAGC,OAHDA,YAGC,kBAFDE,IAEC,CAFDA,IAEC,qBAFM,EAEN,wCADDC,kBACC,CADDA,kBACC,gCADoB,EACpB,uBACD,GAAMoB,CAAAA,QAAQ,kBAAQxB,IAAR,CAAd,CAEA;AACA,GAAMO,CAAAA,QAAQ,CAAGD,YAAY,CACzB,EADyB,8BAErBH,IAFqB,GAEfD,UAAU,CAAC,CAAEF,IAAI,CAAEwB,QAAR,CAAkBhB,SAAS,CAAEP,YAA7B,CAAD,CAFK,EAA7B,CAGA,GAAMoB,CAAAA,QAAQ,CAAG,CACfrB,IAAI,CAAEwB,QADS,CAEfJ,UAAU,CAAVA,UAFe,CAGfjB,IAAI,CAAEI,QAHS,CAIfH,kBAAkB,CAAlBA,kBAJe,CAKfI,SAAS,CAAEP,YALI,CAAjB,CAQA;AACA,GACE,CAACuB,QAAQ,CAACf,QAAV,EACCe,QAAQ,CAACd,QAAT,GAAsB,IAAtB,EAA8BL,eAA9B,EAAiD,CAACC,YAFrD,CAGE,CACA,MAAO,CACLE,SAAS,CAAEP,YADN,CAELD,IAAI,CAAEmB,QAAQ,CAACE,QAAD,CAFT,CAAP,CAID,CAED;AACA,GAAIT,CAAAA,UAAU,CAAGX,YAAjB,CACA,GAAMY,CAAAA,UAAU,CAAGW,QAAQ,CAACf,QAAT,CAAkBK,MAArC,CACA,GAAI,MAAOU,CAAAA,QAAQ,CAACf,QAAhB,GAA6B,UAAjC,CAA6C,CAC3Ce,QAAQ,CAACf,QAAT,CAAoBe,QAAQ,CAACf,QAAT,CAAkBgB,GAAlB,CAAsB,SAACC,KAAD,CAAQX,CAAR,CAAc,CACtD,GAAMY,CAAAA,SAAS,CAAGJ,cAAc,CAAC,CAC/BJ,QAAQ,CAARA,QAD+B,CAE/BjB,UAAU,CAAVA,UAF+B,CAG/BG,eAAe,CAAfA,eAH+B,CAI/BL,IAAI,CAAE0B,KAJyB,CAK/BN,UAAU,CAAEd,YAAY,CAAG,IAAH,CAAUkB,QALH,CAM/BvB,YAAY,CAAEW,UAAU,CAAG,CANI,CAO/BR,kBAAkB,8BAAMA,kBAAN,GAA0BS,UAAU,CAAGE,CAAb,CAAiB,CAA3C,EAPa,CAQ/BZ,IAAI,CAAEI,QARyB,CAAD,CAAhC,CAUAK,UAAU,CAAGe,SAAS,CAACnB,SAAvB,CAEA,MAAOmB,CAAAA,SAAS,CAAC3B,IAAjB,CACD,CAdmB,CAApB,CAeD,CAED,MAAO,CACLA,IAAI,CAAEmB,QAAQ,CAACE,QAAD,CADT,CAELb,SAAS,CAAEI,UAFN,CAAP,CAID,CAED;;;;;;GAOA,MAAO,SAASgB,CAAAA,mBAAT,OAA2C,IAAZC,CAAAA,QAAY,OAAZA,QAAY,CAChD,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAA9B,IAAI,CAAI,CACvB,GACE,CAACA,IAAI,CAACS,QAAN,EACAT,IAAI,CAACU,QAAL,GAAkB,IADlB,EAEA,MAAOV,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UAH3B,CAIE,CACA,MAAO,EAAP,CACD,CAED,MACE,GACAT,IAAI,CAACS,QAAL,CAAcsB,MAAd,CACE,SAACC,KAAD,CAAQC,WAAR,QAAwBD,CAAAA,KAAK,CAAGF,QAAQ,CAACG,WAAD,CAAxC,EADF,CAEE,CAFF,CAFF,CAOD,CAhBD,CAkBA,MAAOJ,CAAAA,QAAQ,CAACE,MAAT,CACL,SAACC,KAAD,CAAQC,WAAR,QAAwBD,CAAAA,KAAK,CAAGF,QAAQ,CAACG,WAAD,CAAxC,EADK,CAEL,CAFK,CAAP,CAID,CAED;;;;;;;;;;;;4TAaA,MAAO,SAASC,CAAAA,yBAAT,OAIJ,IAHDL,CAAAA,QAGC,OAHDA,QAGC,CAFM9B,WAEN,OAFDoC,KAEC,CADDjC,UACC,OADDA,UACC,CACD,GAAI,CAAC2B,QAAD,EAAaA,QAAQ,CAACf,MAAT,CAAkB,CAAnC,CAAsC,CACpC,MAAO,KAAP,CACD,CAED;AACA,GAAME,CAAAA,MAAM,CAAGlB,iCAAiC,CAAC,CAC/CC,WAAW,CAAXA,WAD+C,CAE/CG,UAAU,CAAVA,UAF+C,CAG/CF,IAAI,CAAE,CACJS,QAAQ,CAAEoB,QADN,CAEJnB,QAAQ,CAAE,IAFN,CAHyC,CAO/CT,YAAY,CAAE,CAAC,CAPgC,CAQ/CE,IAAI,CAAE,EARyC,CAS/CC,kBAAkB,CAAE,EAT2B,CAU/CE,YAAY,CAAE,IAViC,CAAD,CAAhD,CAaA,GAAIU,MAAM,CAAChB,IAAX,CAAiB,CACf,MAAOgB,CAAAA,MAAP,CACD,CAED,MAAO,KAAP,CACD,CAED;;;;;;;;;sWAUA,MAAO,SAASoB,CAAAA,IAAT,OAKJ,IAJDP,CAAAA,QAIC,OAJDA,QAIC,CAHD3B,UAGC,OAHDA,UAGC,CAFDiB,QAEC,OAFDA,QAEC,6BADDd,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAI,CAACwB,QAAD,EAAaA,QAAQ,CAACf,MAAT,CAAkB,CAAnC,CAAsC,CACpC,OACD,CAEDI,eAAe,CAAC,CACdC,QAAQ,CAARA,QADc,CAEdjB,UAAU,CAAVA,UAFc,CAGdG,eAAe,CAAfA,eAHc,CAIdC,YAAY,CAAE,IAJA,CAKdN,IAAI,CAAE,CAAES,QAAQ,CAAEoB,QAAZ,CALQ,CAMd5B,YAAY,CAAE,CAAC,CAND,CAOdE,IAAI,CAAE,EAPQ,CAQdC,kBAAkB,CAAE,EARN,CAAD,CAAf,CAUD,CAED;;;;;;;;;;mNAWA,MAAO,SAASqB,CAAAA,GAAT,OAKJ,IAJDI,CAAAA,QAIC,OAJDA,QAIC,CAHD3B,UAGC,OAHDA,UAGC,CAFDiB,QAEC,OAFDA,QAEC,6BADDd,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAI,CAACwB,QAAD,EAAaA,QAAQ,CAACf,MAAT,CAAkB,CAAnC,CAAsC,CACpC,MAAO,EAAP,CACD,CAED,MAAOS,CAAAA,cAAc,CAAC,CACpBJ,QAAQ,CAARA,QADoB,CAEpBjB,UAAU,CAAVA,UAFoB,CAGpBG,eAAe,CAAfA,eAHoB,CAIpBC,YAAY,CAAE,IAJM,CAKpBN,IAAI,CAAE,CAAES,QAAQ,CAAEoB,QAAZ,CALc,CAMpB5B,YAAY,CAAE,CAAC,CANK,CAOpBE,IAAI,CAAE,EAPc,CAQpBC,kBAAkB,CAAE,EARA,CAAD,CAAd,CASJJ,IATI,CASCS,QATR,CAUD,CAED;;;;;;;4MAQA,MAAO,SAAS4B,CAAAA,oBAAT,OAA6D,IAA7BR,CAAAA,QAA6B,OAA7BA,QAA6B,sBAAnBnB,QAAmB,CAAnBA,QAAmB,yBAAR,IAAQ,gBAClE,MAAOe,CAAAA,GAAG,CAAC,CACTI,QAAQ,CAARA,QADS,CAETV,QAAQ,CAAE,6BAAGnB,CAAAA,IAAH,QAAGA,IAAH,yBAAoBA,IAApB,EAA0BU,QAAQ,CAARA,QAA1B,IAFD,CAGTR,UAAU,CAAE,+BAAGM,CAAAA,SAAH,QAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAHH,CAITH,eAAe,CAAE,KAJR,CAAD,CAAV,CAMD,CAED;;;;;;;;;;mUAWA,MAAO,SAASiC,CAAAA,gBAAT,QAMJ,IALDT,CAAAA,QAKC,QALDA,QAKC,CAJD1B,IAIC,QAJDA,IAIC,CAHDoC,OAGC,QAHDA,OAGC,CAFDrC,UAEC,QAFDA,UAEC,8BADDG,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAMmC,CAAAA,WAAW,CAAG,aAApB,CACA,GAAMV,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,QAKX,gCAJJxB,YAII,CAJJA,YAII,8BAJW,KAIX,qBAHJN,IAGI,QAHJA,IAGI,CAFJyC,gBAEI,QAFJA,gBAEI,CADJC,SACI,QADJA,SACI,CACJ,GACE,CAACpC,YAAD,EACAJ,UAAU,CAAC,CAAEF,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAAEiC,gBAAnB,CAAD,CAAV,GAAsDtC,IAAI,CAACuC,SAAD,CAF5D,CAGE,CACA,MAAOF,CAAAA,WAAP,CACD,CAED,GAAIE,SAAS,EAAIvC,IAAI,CAACW,MAAL,CAAc,CAA/B,CAAkC,CAChC;AACA,MAAO,OAAOyB,CAAAA,OAAP,GAAmB,UAAnB,CACHA,OAAO,CAAC,CAAEvC,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAAEiC,gBAAnB,CAAD,CADJ,CAEHF,OAFJ,CAGD,CACD,GAAI,CAACvC,IAAI,CAACS,QAAV,CAAoB,CAClB;AACA,KAAM,IAAIkC,CAAAA,KAAJ,CAAU,oDAAV,CAAN,CACD,CAED,GAAIC,CAAAA,aAAa,CAAGH,gBAAgB,CAAG,CAAvC,CACA,IAAK,GAAI1B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGf,IAAI,CAACS,QAAL,CAAcK,MAAlC,CAA0CC,CAAC,EAAI,CAA/C,CAAkD,CAChD,GAAMC,CAAAA,OAAM,CAAGc,QAAQ,CAAC,CACtB9B,IAAI,CAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CADgB,CAEtB0B,gBAAgB,CAAEG,aAFI,CAGtBF,SAAS,CAAEA,SAAS,CAAG,CAHD,CAAD,CAAvB,CAMA;AACA,GAAI1B,OAAM,GAAKwB,WAAf,CAA4B,CAC1B,GAAIxB,OAAJ,CAAY,CACV;AACA;AACA,wBACKhB,IADL,EAEES,QAAQ,8BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,CAAuB9B,CAAvB,CADG,GAENC,OAFM,qBAGHhB,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB9B,CAAC,CAAG,CAAxB,CAHG,EAFV,GAQD,CACD;AACA;AACA,wBACKf,IADL,EAEES,QAAQ,8BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,CAAuB9B,CAAvB,CADG,qBAEHf,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB9B,CAAC,CAAG,CAAxB,CAFG,EAFV,GAOD,CAED6B,aAAa,EACX,EAAI3B,kBAAkB,CAAC,CAAEjB,IAAI,CAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAAR,CAA0BV,eAAe,CAAfA,eAA1B,CAAD,CADxB,CAED,CAED,MAAOmC,CAAAA,WAAP,CACD,CA9DD,CAgEA;AACA,GAAMxB,CAAAA,MAAM,CAAGc,QAAQ,CAAC,CACtB9B,IAAI,CAAE,CAAES,QAAQ,CAAEoB,QAAZ,CADgB,CAEtBY,gBAAgB,CAAE,CAAC,CAFG,CAGtBC,SAAS,CAAE,CAAC,CAHU,CAItBpC,YAAY,CAAE,IAJQ,CAAD,CAAvB,CAOA,GAAIU,MAAM,GAAKwB,WAAf,CAA4B,CAC1B,KAAM,IAAIG,CAAAA,KAAJ,CAAU,kCAAV,CAAN,CACD,CAED,MAAO3B,CAAAA,MAAM,CAACP,QAAd,CACD,CAED;;;;;;;;;uSAUA,MAAO,SAASqC,CAAAA,gBAAT,QAKJ,IAJDjB,CAAAA,QAIC,QAJDA,QAIC,CAHD1B,IAGC,QAHDA,IAGC,CAFDD,UAEC,QAFDA,UAEC,8BADDG,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,MAAOiC,CAAAA,gBAAgB,CAAC,CACtBT,QAAQ,CAARA,QADsB,CAEtB1B,IAAI,CAAJA,IAFsB,CAGtBD,UAAU,CAAVA,UAHsB,CAItBG,eAAe,CAAfA,eAJsB,CAKtBkC,OAAO,CAAE,IAAK;AALQ,CAAD,CAAvB,CAOD,CAED;;;;;;;;;;;;uSAaA,MAAO,SAASQ,CAAAA,UAAT,QAKJ,IAJDlB,CAAAA,QAIC,QAJDA,QAIC,CAHD1B,IAGC,QAHDA,IAGC,CAFDD,UAEC,QAFDA,UAEC,8BADDG,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAI2C,CAAAA,WAAW,CAAG,IAAlB,CACA,GAAIC,CAAAA,gBAAgB,CAAG,IAAvB,CACA,GAAMC,CAAAA,YAAY,CAAGZ,gBAAgB,CAAC,CACpCT,QAAQ,CAARA,QADoC,CAEpC1B,IAAI,CAAJA,IAFoC,CAGpCD,UAAU,CAAVA,UAHoC,CAIpCG,eAAe,CAAfA,eAJoC,CAKpCkC,OAAO,CAAE,wBAAyB,IAAtBvC,CAAAA,IAAsB,QAAtBA,IAAsB,CAAhBQ,SAAgB,QAAhBA,SAAgB,CAChC;AACAwC,WAAW,CAAGhD,IAAd,CACAiD,gBAAgB,CAAGzC,SAAnB,CAEA,MAAO,KAAP,CACD,CAXmC,CAAD,CAArC,CAcA,MAAO,CACLqB,QAAQ,CAAEqB,YADL,CAELlD,IAAI,CAAEgD,WAFD,CAGLxC,SAAS,CAAEyC,gBAHN,CAAP,CAKD,CAED;;;;;;;;;6PAUA,MAAO,SAASE,CAAAA,aAAT,QAKJ,IAJDtB,CAAAA,QAIC,QAJDA,QAIC,CAHD1B,IAGC,QAHDA,IAGC,CAFDD,UAEC,QAFDA,UAEC,8BADDG,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAI+C,CAAAA,aAAa,CAAG,IAApB,CAEA,GAAI,CACFd,gBAAgB,CAAC,CACfT,QAAQ,CAARA,QADe,CAEf1B,IAAI,CAAJA,IAFe,CAGfD,UAAU,CAAVA,UAHe,CAIfG,eAAe,CAAfA,eAJe,CAKfkC,OAAO,CAAE,wBAAyB,IAAtBvC,CAAAA,IAAsB,QAAtBA,IAAsB,CAAhBQ,SAAgB,QAAhBA,SAAgB,CAChC4C,aAAa,CAAG,CAAEpD,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAATA,SAAR,CAAhB,CACA,MAAOR,CAAAA,IAAP,CACD,CARc,CAAD,CAAhB,CAUD,CAAC,MAAOqD,GAAP,CAAY,CACZ;AACD,CAED,MAAOD,CAAAA,aAAP,CACD,CAED;;;;;;;;;;;;;;kRAeA,MAAO,SAASE,CAAAA,kBAAT,QAQJ,IAPDzB,CAAAA,QAOC,QAPDA,QAOC,CANDU,OAMC,QANDA,OAMC,yBALDgB,SAKC,CALDA,SAKC,2BALW,IAKX,kBAJDrD,UAIC,QAJDA,UAIC,8BAHDG,eAGC,CAHDA,eAGC,gCAHiB,IAGjB,kDAFDmD,YAEC,CAFDA,YAEC,8BAFc,KAEd,kDADDC,eACC,CADDA,eACC,gCADiB,KACjB,uBACD,GAAIF,SAAS,GAAK,IAAlB,CAAwB,CACtB,MAAO,CACL1B,QAAQ,8BAAOA,QAAQ,EAAI,EAAnB,GAAwBU,OAAxB,EADH,CAEL/B,SAAS,CAAE,CAACqB,QAAQ,EAAI,EAAb,EAAiBf,MAFvB,CAAP,CAID,CAED,GAAI4C,CAAAA,iBAAiB,CAAG,IAAxB,CACA,GAAIC,CAAAA,YAAY,CAAG,KAAnB,CACA,GAAMC,CAAAA,eAAe,CAAGnC,GAAG,CAAC,CAC1BI,QAAQ,CAARA,QAD0B,CAE1B3B,UAAU,CAAVA,UAF0B,CAG1BG,eAAe,CAAfA,eAH0B,CAI1Bc,QAAQ,CAAE,yBAA+B,IAA5BnB,CAAAA,IAA4B,QAA5BA,IAA4B,CAAtBQ,SAAsB,QAAtBA,SAAsB,CAAXL,IAAW,QAAXA,IAAW,CACvC,GAAM0D,CAAAA,GAAG,CAAG1D,IAAI,CAAGA,IAAI,CAACA,IAAI,CAACW,MAAL,CAAc,CAAf,CAAP,CAA2B,IAA3C,CACA;AACA,GAAI6C,YAAY,EAAIE,GAAG,GAAKN,SAA5B,CAAuC,CACrC,MAAOvD,CAAAA,IAAP,CACD,CACD2D,YAAY,CAAG,IAAf,CAEA,GAAMvC,CAAAA,UAAU,kBACXpB,IADW,CAAhB,CAIA,GAAIwD,YAAJ,CAAkB,CAChBpC,UAAU,CAACV,QAAX,CAAsB,IAAtB,CACD,CAED;AACA,GAAI,CAACU,UAAU,CAACX,QAAhB,CAA0B,CACxBiD,iBAAiB,CAAGlD,SAAS,CAAG,CAAhC,CACA,wBACKY,UADL,EAEEX,QAAQ,CAAE,CAAC8B,OAAD,CAFZ,GAID,CAED,GAAI,MAAOnB,CAAAA,UAAU,CAACX,QAAlB,GAA+B,UAAnC,CAA+C,CAC7C,KAAM,IAAIkC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CAED,GAAIC,CAAAA,aAAa,CAAGpC,SAAS,CAAG,CAAhC,CACA,IAAK,GAAIO,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGK,UAAU,CAACX,QAAX,CAAoBK,MAAxC,CAAgDC,CAAC,EAAI,CAArD,CAAwD,CACtD6B,aAAa,EACX,EACA3B,kBAAkB,CAAC,CAAEjB,IAAI,CAAEoB,UAAU,CAACX,QAAX,CAAoBM,CAApB,CAAR,CAAgCV,eAAe,CAAfA,eAAhC,CAAD,CAFpB,CAGD,CAEDqD,iBAAiB,CAAGd,aAApB,CAEA,GAAMnC,CAAAA,QAAQ,CAAGgD,eAAe,EAC3BlB,OAD2B,4BACfnB,UAAU,CAACX,QADI,gCAExBW,UAAU,CAACX,QAFa,GAEH8B,OAFG,EAAhC,CAIA,wBACKnB,UADL,EAEEX,QAAQ,CAARA,QAFF,GAID,CAlDyB,CAAD,CAA3B,CAqDA,GAAI,CAACkD,YAAL,CAAmB,CACjB,KAAM,IAAIhB,CAAAA,KAAJ,CAAU,mCAAV,CAAN,CACD,CAED,MAAO,CACLd,QAAQ,CAAE+B,eADL,CAELpD,SAAS,CAAEkD,iBAFN,CAAP,CAID,C,kTAED,QAASI,CAAAA,sBAAT,QAaG,IAZDC,CAAAA,WAYC,QAZDA,WAYC,CAXDC,gBAWC,QAXDA,gBAWC,CAVDzB,OAUC,QAVDA,OAUC,CATDlC,eASC,QATDA,eASC,CARDmD,YAQC,QARDA,YAQC,4BAPDlD,YAOC,CAPDA,YAOC,8BAPc,KAOd,qBAND2D,WAMC,QANDA,WAMC,CALDjE,IAKC,QALDA,IAKC,CAJDC,YAIC,QAJDA,YAIC,CAHDiE,YAGC,QAHDA,YAGC,CAFDhE,UAEC,QAFDA,UAEC,oBADDC,IACC,CADDA,IACC,sBADM,EACN,aACD,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAA4D,CAAC,QAChB7D,CAAAA,YAAY,CACR,EADQ,8BAEJH,IAFI,GAEED,UAAU,CAAC,CAAEF,IAAI,CAAEmE,CAAR,CAAW3D,SAAS,CAAEP,YAAtB,CAAD,CAFZ,EADI,EAAlB,CAKA;AACA,GACEA,YAAY,EAAI+D,gBAAgB,CAAG,CAAnC,EACCC,WAAW,EAAI,EAAEjE,IAAI,CAACS,QAAL,EAAiBT,IAAI,CAACS,QAAL,CAAcK,MAAjC,CAFlB,CAGE,CACA,GAAI,MAAOd,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UAA7B,CAAyC,CACvC,KAAM,IAAIkC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CAFD,IAEO,CACL,GAAMyB,CAAAA,cAAc,CAAGZ,YAAY,CAAG,CAAE9C,QAAQ,CAAE,IAAZ,CAAH,CAAwB,EAA3D,CACA,GAAMc,CAAAA,SAAQ,kBACTxB,IADS,CAGToE,cAHS,EAIZ3D,QAAQ,CAAET,IAAI,CAACS,QAAL,EAAiB8B,OAAjB,4BAA6BvC,IAAI,CAACS,QAAlC,GAA8C,CAAC8B,OAAD,CAJ5C,EAAd,CAOA,MAAO,CACLvC,IAAI,CAAEwB,SADD,CAELb,SAAS,CAAEV,YAAY,CAAG,CAFrB,CAGLyD,iBAAiB,CAAEzD,YAAY,CAAG,CAH7B,CAILoE,UAAU,CAAE9D,QAAQ,CAACiB,SAAD,CAJf,CAKLJ,UAAU,CAAEd,YAAY,CAAG,IAAH,CAAUkB,SAL7B,CAAP,CAOD,CACF,CAED;AACA;AACA,GAAI0C,YAAY,EAAIH,WAAW,CAAG,CAAlC,CAAqC,CACnC;AACA,GACE,CAAC/D,IAAI,CAACS,QAAN,EACA,MAAOT,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UADzB,EAECT,IAAI,CAACU,QAAL,GAAkB,IAAlB,EAA0BL,eAA1B,EAA6C,CAACC,YAHjD,CAIE,CACA,MAAO,CAAEN,IAAI,CAAJA,IAAF,CAAQW,SAAS,CAAEV,YAAY,CAAG,CAAlC,CAAP,CACD,CAED;AACA;AACA,GAAIW,CAAAA,WAAU,CAAGX,YAAY,CAAG,CAAhC,CACA,GAAIyD,CAAAA,kBAAiB,CAAG,IAAxB,CACA,GAAIY,CAAAA,WAAW,CAAG,IAAlB,CACA,IAAK,GAAIvD,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGf,IAAI,CAACS,QAAL,CAAcK,MAAlC,CAA0CC,CAAC,EAAI,CAA/C,CAAkD,CAChD;AACA;AACA,GAAIH,WAAU,EAAIoD,gBAAlB,CAAoC,CAClCN,kBAAiB,CAAG9C,WAApB,CACA0D,WAAW,CAAGvD,CAAd,CACA,MACD,CAED;AACAH,WAAU,EACR,EAAIK,kBAAkB,CAAC,CAAEjB,IAAI,CAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAAR,CAA0BV,eAAe,CAAfA,eAA1B,CAAD,CADxB,CAED,CAED;AACA,GAAIiE,WAAW,GAAK,IAApB,CAA0B,CACxB;AACA;AACA,GAAI1D,WAAU,CAAGoD,gBAAb,EAAiC,CAACC,WAAtC,CAAmD,CACjD,MAAO,CAAEjE,IAAI,CAAJA,IAAF,CAAQW,SAAS,CAAEC,WAAnB,CAAP,CACD,CAED;AACA8C,kBAAiB,CAAG9C,WAApB,CACA0D,WAAW,CAAGtE,IAAI,CAACS,QAAL,CAAcK,MAA5B,CACD,CAED;AACA,GAAMU,CAAAA,UAAQ,kBACTxB,IADS,EAEZS,QAAQ,8BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,CAAuByB,WAAvB,CADG,GAEN/B,OAFM,qBAGHvC,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoByB,WAApB,CAHG,EAFI,EAAd,CASA;AACA,MAAO,CACLtE,IAAI,CAAEwB,UADD,CAELb,SAAS,CAAEC,WAFN,CAGL8C,iBAAiB,CAAjBA,kBAHK,CAILW,UAAU,CAAE9D,QAAQ,CAACiB,UAAD,CAJf,CAKLJ,UAAU,CAAEd,YAAY,CAAG,IAAH,CAAUkB,UAL7B,CAAP,CAOD,CAED;AACA,GACE,CAACxB,IAAI,CAACS,QAAN,EACA,MAAOT,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UADzB,EAECT,IAAI,CAACU,QAAL,GAAkB,IAAlB,EAA0BL,eAA1B,EAA6C,CAACC,YAHjD,CAIE,CACA,MAAO,CAAEN,IAAI,CAAJA,IAAF,CAAQW,SAAS,CAAEV,YAAY,CAAG,CAAlC,CAAP,CACD,CAED;AACA,GAAIyD,CAAAA,iBAAiB,CAAG,IAAxB,CACA,GAAIa,CAAAA,YAAY,CAAG,IAAnB,CACA,GAAInD,CAAAA,UAAU,CAAG,IAAjB,CACA,GAAIR,CAAAA,UAAU,CAAGX,YAAY,CAAG,CAAhC,CACA,GAAIuE,CAAAA,WAAW,CAAGxE,IAAI,CAACS,QAAvB,CACA,GAAI,MAAO+D,CAAAA,WAAP,GAAuB,UAA3B,CAAuC,CACrCA,WAAW,CAAGA,WAAW,CAAC/C,GAAZ,CAAgB,SAACC,KAAD,CAAQX,CAAR,CAAc,CAC1C,GAAI2C,iBAAiB,GAAK,IAA1B,CAAgC,CAC9B,MAAOhC,CAAAA,KAAP,CACD,CAED,GAAMC,CAAAA,SAAS,CAAGmC,sBAAsB,CAAC,CACvCC,WAAW,CAAXA,WADuC,CAEvCC,gBAAgB,CAAhBA,gBAFuC,CAGvCzB,OAAO,CAAPA,OAHuC,CAIvClC,eAAe,CAAfA,eAJuC,CAKvCmD,YAAY,CAAZA,YALuC,CAMvCS,WAAW,CAAEA,WAAW,EAAIlD,CAAC,GAAKyD,WAAW,CAAC1D,MAAZ,CAAqB,CANhB,CAOvCd,IAAI,CAAE0B,KAPiC,CAQvCzB,YAAY,CAAEW,UARyB,CASvCsD,YAAY,CAAEA,YAAY,CAAG,CATU,CAUvChE,UAAU,CAAVA,UAVuC,CAWvCC,IAAI,CAAE,EAAG;AAX8B,CAAD,CAAxC,CAcA,GAAI,qBAAuBwB,CAAAA,SAA3B,CAAsC,CAElC+B,iBAFkC,CAKhC/B,SALgC,CAElC+B,iBAFkC,CAGlCtC,UAHkC,CAKhCO,SALgC,CAGlCP,UAHkC,CAItBmD,YAJsB,CAKhC5C,SALgC,CAIlC0C,UAJkC,CAMrC,CAEDzD,UAAU,CAAGe,SAAS,CAAChB,SAAvB,CAEA,MAAOgB,CAAAA,SAAS,CAAC3B,IAAjB,CACD,CA9Ba,CAAd,CA+BD,CAED,GAAMwB,CAAAA,QAAQ,kBAAQxB,IAAR,EAAcS,QAAQ,CAAE+D,WAAxB,EAAd,CACA,GAAMxD,CAAAA,MAAM,CAAG,CACbhB,IAAI,CAAEwB,QADO,CAEbb,SAAS,CAAEC,UAFE,CAAf,CAKA,GAAI8C,iBAAiB,GAAK,IAA1B,CAAgC,CAC9B1C,MAAM,CAAC0C,iBAAP,CAA2BA,iBAA3B,CACA1C,MAAM,CAACqD,UAAP,8BAAwB9D,QAAQ,CAACiB,QAAD,CAAhC,qBAA+C+C,YAA/C,GACAvD,MAAM,CAACI,UAAP,CAAoBA,UAApB,CACD,CAED,MAAOJ,CAAAA,MAAP,CACD,CAED;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASyD,CAAAA,UAAT,QAQJ,IAPD5C,CAAAA,QAOC,QAPDA,QAOC,CANMkC,WAMN,QANDW,KAMC,CALDV,gBAKC,QALDA,gBAKC,CAJDzB,OAIC,QAJDA,OAIC,0BAHDrC,UAGC,CAHDA,UAGC,4BAHY,UAAM,CAAE,CAGpB,gDAFDG,eAEC,CAFDA,eAEC,gCAFiB,IAEjB,kDADDmD,YACC,CADDA,YACC,8BADc,KACd,qBACD,GAAI,CAAC3B,QAAD,EAAakC,WAAW,GAAK,CAAjC,CAAoC,CAClC,MAAO,CACLlC,QAAQ,CAAE,CAACU,OAAD,CADL,CAEL/B,SAAS,CAAE,CAFN,CAGLL,IAAI,CAAE,CAACD,UAAU,CAAC,CAAEF,IAAI,CAAEuC,OAAR,CAAiB/B,SAAS,CAAE,CAA5B,CAAD,CAAX,CAHD,CAILY,UAAU,CAAE,IAJP,CAAP,CAMD,CAED,GAAMuD,CAAAA,YAAY,CAAGb,sBAAsB,CAAC,CAC1CC,WAAW,CAAXA,WAD0C,CAE1CC,gBAAgB,CAAhBA,gBAF0C,CAG1CzB,OAAO,CAAPA,OAH0C,CAI1ClC,eAAe,CAAfA,eAJ0C,CAK1CmD,YAAY,CAAZA,YAL0C,CAM1CtD,UAAU,CAAVA,UAN0C,CAO1CI,YAAY,CAAE,IAP4B,CAQ1C2D,WAAW,CAAE,IAR6B,CAS1CjE,IAAI,CAAE,CAAES,QAAQ,CAAEoB,QAAZ,CAToC,CAU1C5B,YAAY,CAAE,CAAC,CAV2B,CAW1CiE,YAAY,CAAE,CAAC,CAX2B,CAAD,CAA3C,CAcA,GAAI,EAAE,qBAAuBS,CAAAA,YAAzB,CAAJ,CAA4C,CAC1C,KAAM,IAAIhC,CAAAA,KAAJ,CAAU,uCAAV,CAAN,CACD,CAED,GAAMnC,CAAAA,SAAS,CAAGmE,YAAY,CAACjB,iBAA/B,CACA,MAAO,CACL7B,QAAQ,CAAE8C,YAAY,CAAC3E,IAAb,CAAkBS,QADvB,CAELD,SAAS,CAATA,SAFK,CAGLL,IAAI,8BACCwE,YAAY,CAACN,UADd,GAEFnE,UAAU,CAAC,CAAEF,IAAI,CAAEuC,OAAR,CAAiB/B,SAAS,CAATA,SAAjB,CAAD,CAFR,EAHC,CAOLY,UAAU,CAAEuD,YAAY,CAACvD,UAPpB,CAAP,CASD,CAED;;;;;;;;;;;;6PAaA,MAAO,SAASwD,CAAAA,mBAAT,QAIJ,IAHD/C,CAAAA,QAGC,QAHDA,QAGC,CAFD3B,UAEC,QAFDA,UAEC,8BADDG,eACC,CADDA,eACC,gCADiB,IACjB,uBACD,GAAI,CAACwB,QAAD,EAAaA,QAAQ,CAACf,MAAT,CAAkB,CAAnC,CAAsC,CACpC,MAAO,EAAP,CACD,CAED,GAAM+D,CAAAA,SAAS,CAAG,EAAlB,CACAzC,IAAI,CAAC,CACHP,QAAQ,CAARA,QADG,CAEH3B,UAAU,CAAVA,UAFG,CAGHG,eAAe,CAAfA,eAHG,CAIHc,QAAQ,CAAE,kBAAA2D,QAAQ,CAAI,CACpBD,SAAS,CAACE,IAAV,CAAeD,QAAf,EACD,CANE,CAAD,CAAJ,CASA,MAAOD,CAAAA,SAAP,CACD,CAED;;;;;;;;;;4TAWA,MAAO,SAASG,CAAAA,mBAAT,QAKJ,IAJDC,CAAAA,QAIC,QAJDA,QAIC,sBAHDC,MAGC,CAHDA,MAGC,wBAHQ,SAAAlF,IAAI,QAAIA,CAAAA,IAAI,CAACmF,EAAT,EAGZ,0CAFDC,YAEC,CAFDA,YAEC,8BAFc,SAAApF,IAAI,QAAIA,CAAAA,IAAI,CAACqF,QAAT,EAElB,2CADDC,OACC,CADDA,OACC,yBADS,GACT,gBACD,GAAI,CAACL,QAAL,CAAe,CACb,MAAO,EAAP,CACD,CAED,GAAMM,CAAAA,iBAAiB,CAAG,EAA1B,CACAN,QAAQ,CAACO,OAAT,CAAiB,SAAA9D,KAAK,CAAI,CACxB,GAAM6B,CAAAA,SAAS,CAAG6B,YAAY,CAAC1D,KAAD,CAA9B,CAEA,GAAI6B,SAAS,GAAIgC,CAAAA,iBAAjB,CAAoC,CAClCA,iBAAiB,CAAChC,SAAD,CAAjB,CAA6BwB,IAA7B,CAAkCrD,KAAlC,EACD,CAFD,IAEO,CACL6D,iBAAiB,CAAChC,SAAD,CAAjB,CAA+B,CAAC7B,KAAD,CAA/B,CACD,CACF,CARD,EAUA,GAAI,EAAE4D,OAAO,GAAIC,CAAAA,iBAAb,CAAJ,CAAqC,CACnC,MAAO,EAAP,CACD,CAED,GAAME,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAAAC,MAAM,CAAI,CACrB,GAAMnC,CAAAA,SAAS,CAAG2B,MAAM,CAACQ,MAAD,CAAxB,CACA,GAAInC,SAAS,GAAIgC,CAAAA,iBAAjB,CAAoC,CAClC,wBACKG,MADL,EAEEjF,QAAQ,CAAE8E,iBAAiB,CAAChC,SAAD,CAAjB,CAA6B9B,GAA7B,CAAiC,SAAAC,KAAK,QAAI+D,CAAAA,IAAI,CAAC/D,KAAD,CAAR,EAAtC,CAFZ,GAID,CAED,wBAAYgE,MAAZ,EACD,CAVD,CAYA,MAAOH,CAAAA,iBAAiB,CAACD,OAAD,CAAjB,CAA2B7D,GAA3B,CAA+B,SAAAC,KAAK,QAAI+D,CAAAA,IAAI,CAAC/D,KAAD,CAAR,EAApC,CAAP,CACD,CAED;;;;;;;4TAQA,MAAO,SAASiE,CAAAA,YAAT,CAAsBC,KAAtB,CAA6BC,OAA7B,CAAsC,CAC3C,MACE,CAAC,CAACD,KAAK,CAACnF,QAAR,EACA,MAAOmF,CAAAA,KAAK,CAACnF,QAAb,GAA0B,UAD1B,EAEAmF,KAAK,CAACnF,QAAN,CAAeqF,IAAf,CACE,SAAApE,KAAK,QAAIA,CAAAA,KAAK,GAAKmE,OAAV,EAAqBF,YAAY,CAACjE,KAAD,CAAQmE,OAAR,CAArC,EADP,CAHF,CAOD,CAED;;;;;;;2QAQA,MAAO,SAASE,CAAAA,QAAT,CAAkB/F,IAAlB,CAAmC,IAAX0E,CAAAA,KAAW,2DAAH,CAAG,CACxC,GAAI,CAAC1E,IAAI,CAACS,QAAV,CAAoB,CAClB,MAAOiE,CAAAA,KAAP,CACD,CAED,GAAI,MAAO1E,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UAA7B,CAAyC,CACvC,MAAOiE,CAAAA,KAAK,CAAG,CAAf,CACD,CAED,MAAO1E,CAAAA,IAAI,CAACS,QAAL,CAAcsB,MAAd,CACL,SAACiE,OAAD,CAAUtE,KAAV,QAAoBuE,CAAAA,IAAI,CAACC,GAAL,CAASF,OAAT,CAAkBD,QAAQ,CAACrE,KAAD,CAAQgD,KAAK,CAAG,CAAhB,CAA1B,CAApB,EADK,CAELA,KAFK,CAAP,CAID,CAED;;;;;;;;;;;;;;;;+OAiBA,MAAO,SAASyB,CAAAA,IAAT,QAQJ,IAPDjG,CAAAA,UAOC,QAPDA,UAOC,CAND2B,QAMC,QANDA,QAMC,CALDuE,WAKC,QALDA,WAKC,CAJDC,YAIC,QAJDA,YAIC,CAHDC,iBAGC,QAHDA,iBAGC,8BAFDC,mBAEC,CAFDA,mBAEC,gCAFqB,KAErB,oDADDC,qBACC,CADDA,qBACC,gCADuB,IACvB,uBACD,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CACA,GAAMhB,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,QAA6D,gCAA1DnF,YAA0D,CAA1DA,YAA0D,8BAA3C,KAA2C,qBAApCN,IAAoC,QAApCA,IAAoC,CAA9BC,YAA8B,QAA9BA,YAA8B,oBAAhBE,IAAgB,CAAhBA,IAAgB,sBAAT,EAAS,aACxE,GAAIuG,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CACA,GAAIC,CAAAA,aAAa,CAAG,KAApB,CACA;AACA,GAAMrG,CAAAA,QAAQ,CAAGD,YAAY,CACzB,EADyB,8BAErBH,IAFqB,GAEfD,UAAU,CAAC,CAAEF,IAAI,CAAJA,IAAF,CAAQQ,SAAS,CAAEP,YAAnB,CAAD,CAFK,EAA7B,CAGA,GAAM4G,CAAAA,SAAS,CAAGvG,YAAY,CAC1B,IAD0B,CAE1B,CACEH,IAAI,CAAEI,QADR,CAEEC,SAAS,CAAEP,YAFb,CAFJ,CAOA;AACA,GAAM6G,CAAAA,WAAW,CACf9G,IAAI,CAACS,QAAL,EACA,MAAOT,CAAAA,IAAI,CAACS,QAAZ,GAAyB,UADzB,EAEAT,IAAI,CAACS,QAAL,CAAcK,MAAd,CAAuB,CAHzB,CAKA;AACA,GAAI,CAACR,YAAD,EAAiB+F,YAAY,kBAAMQ,SAAN,EAAiB7G,IAAI,CAAJA,IAAjB,CAAuBoG,WAAW,CAAXA,WAAvB,GAAjC,CAAwE,CACtE,GAAIK,UAAU,GAAKH,iBAAnB,CAAsC,CACpCM,aAAa,CAAG,IAAhB,CACD,CAED;AACA;AACAH,UAAU,EAAI,CAAd,CAEA;AACA;AACA;AACA;AACAE,WAAW,CAAG,IAAd,CACD,CAED,GAAI/F,CAAAA,UAAU,CAAGX,YAAjB,CACA,GAAMsC,CAAAA,OAAO,kBAAQvC,IAAR,CAAb,CACA,GAAI8G,WAAJ,CAAiB,CACf;AACAvE,OAAO,CAAC9B,QAAR,CAAmB8B,OAAO,CAAC9B,QAAR,CAAiBgB,GAAjB,CAAqB,SAAAC,KAAK,CAAI,CAC/C,GAAMC,CAAAA,SAAS,CAAG8D,IAAI,CAAC,CACrBzF,IAAI,CAAE0B,KADe,CAErBzB,YAAY,CAAEW,UAAU,CAAG,CAFN,CAGrBT,IAAI,CAAEI,QAHe,CAAD,CAAtB,CAMA;AACA;AACA;AACA;AACA;AACA,GAAIoB,SAAS,CAAC3B,IAAV,CAAeU,QAAnB,CAA6B,CAC3BE,UAAU,CAAGe,SAAS,CAACnB,SAAvB,CACD,CAFD,IAEO,CACLI,UAAU,EAAI,CAAd,CACD,CAED,GAAIe,SAAS,CAAC+E,OAAV,CAAkB5F,MAAlB,CAA2B,CAA3B,EAAgCa,SAAS,CAACiF,aAA9C,CAA6D,CAC3DF,OAAO,8BAAOA,OAAP,qBAAmB/E,SAAS,CAAC+E,OAA7B,EAAP,CACA,GAAI/E,SAAS,CAACiF,aAAd,CAA6B,CAC3BA,aAAa,CAAG,IAAhB,CACD,CAED;AACA;AACA,GACGL,mBAAmB,EAAI5E,SAAS,CAAC+E,OAAV,CAAkB5F,MAAlB,CAA2B,CAAnD,EACC,CAACyF,mBAAmB,EAAIC,qBAAxB,GACC7E,SAAS,CAACiF,aAHd,CAIE,CACArE,OAAO,CAAC7B,QAAR,CAAmB,IAAnB,CACD,CACF,CAED,MAAOiB,CAAAA,SAAS,CAAC3B,IAAjB,CACD,CApCkB,CAAnB,CAqCD,CAED;AACA,GAAI,CAACM,YAAD,EAAiB,CAACiC,OAAO,CAAC7B,QAA9B,CAAwC,CACtCgG,OAAO,CAAGA,OAAO,CAACjF,GAAR,CAAY,SAAAsF,KAAK,0BACtBA,KADsB,EAEzBvG,SAAS,CAAE,IAFc,IAAjB,CAAV,CAID,CAED;AACA;AACA,GAAImG,WAAJ,CAAiB,CACfD,OAAO,mBAASG,SAAT,EAAoB7G,IAAI,CAAEuC,OAA1B,8BAAwCmE,OAAxC,EAAP,CACD,CAED,MAAO,CACL1G,IAAI,CAAE0G,OAAO,CAAC5F,MAAR,CAAiB,CAAjB,CAAqByB,OAArB,CAA+BvC,IADhC,CAEL0G,OAAO,CAAPA,OAFK,CAGLE,aAAa,CAAbA,aAHK,CAILpG,SAAS,CAAEI,UAJN,CAAP,CAMD,CArGD,CAuGA,GAAMI,CAAAA,MAAM,CAAGyE,IAAI,CAAC,CAClBzF,IAAI,CAAE,CAAES,QAAQ,CAAEoB,QAAZ,CADY,CAElBvB,YAAY,CAAE,IAFI,CAGlBL,YAAY,CAAE,CAAC,CAHG,CAAD,CAAnB,CAMA,MAAO,CACLyG,OAAO,CAAE1F,MAAM,CAAC0F,OADX,CAEL7E,QAAQ,CAAEb,MAAM,CAAChB,IAAP,CAAYS,QAFjB,CAAP,CAID,C,gNAED,MAAO,SAASuG,CAAAA,UAAT,CAAoBC,GAApB,CAAyB,CAC9B,GAAIC,CAAAA,QAAQ,CAAGD,GAAG,EAAI,EAAtB,CAEA;AACA,GAAIE,CAAAA,KAAK,CAAG,EAAZ,CAEA;AACA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA;AACA,GAAIC,CAAAA,IAAI,CAAG,EAAX,CAEA,IAAK,GAAItG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGmG,QAAQ,CAACpG,MAA7B,CAAqCC,CAAC,EAAtC,CAA0C,CACxC,GAAMuG,CAAAA,CAAC,CAAGJ,QAAQ,CAACnG,CAAD,CAAlB,CAEA,GAAI,CAACuG,CAAL,CAAQ,CACN,SACD,CAED,GAAMC,CAAAA,SAAS,CAAGD,CAAC,CAAC7G,QAAF,EAAc,EAAhC,CAEA6G,CAAC,CAACE,OAAF,CAAY,CAAZ,CAEAH,IAAI,CAACtC,IAAL,CAAUuC,CAAV,EACAF,KAAK,CAACrC,IAAN,CAAWuC,CAAX,EAEA,GAAIC,SAAS,CAACzG,MAAV,CAAmB,CAAvB,CAA0B,CACxB2G,WAAW,CAACH,CAAD,CAAI,CAAJ,CAAX,CACD,CAFD,IAEO,CACLH,KAAK,CAACpC,IAAN,CAAWuC,CAAX,EACD,CACF,CAED,QAASG,CAAAA,WAAT,CAAqBH,CAArB,CAAwB5C,KAAxB,CAA+B,CAC7B,GAAMgD,CAAAA,OAAO,CAAGJ,CAAC,CAAC7G,QAAF,EAAc,EAA9B,CAEA,IAAK,GAAIM,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAG2G,OAAO,CAAC5G,MAA5B,CAAoCC,EAAC,EAArC,CAAyC,CACvC,GAAMuG,CAAAA,EAAC,CAAGI,OAAO,CAAC3G,EAAD,CAAjB,CACA,GAAMwG,CAAAA,UAAS,CAAGD,EAAC,CAAC7G,QAAF,EAAc,EAAhC,CAEA6G,EAAC,CAACE,OAAF,CAAY9C,KAAK,CAAG,CAApB,CAEA2C,IAAI,CAACtC,IAAL,CAAUuC,EAAV,EAEA,GAAIC,UAAS,CAACzG,MAAV,CAAmB,CAAvB,CAA0B,CACxB2G,WAAW,CAACH,EAAD,CAAI5C,KAAK,CAAG,CAAZ,CAAX,CACD,CAFD,IAEO,CACLyC,KAAK,CAACpC,IAAN,CAAWuC,EAAX,EACD,CACF,CACF,CAED,MAAO,CAAED,IAAI,CAAJA,IAAF,CAAQF,KAAK,CAALA,KAAR,CAAeC,KAAK,CAALA,KAAf,CAAP,CACD,C,0PAED,MAAO,SAASO,CAAAA,uBAAT,CAAiCN,IAAjC,CAAkE,IAA3BO,CAAAA,YAA2B,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CACvE,GAAIZ,CAAAA,GAAG,CAAG,EAAV,CAEA,IAAK,GAAIlG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGsG,IAAI,CAACvG,MAAzB,CAAiCC,CAAC,EAAlC,CAAsC,CACpC,GAAIuG,CAAAA,CAAC,CAAGD,IAAI,CAACtG,CAAD,CAAZ,CAEAuG,CAAC,CAACE,OAAF,CAAY,CAAZ,CAEAP,GAAG,CAAClC,IAAJ,CAASuC,CAAT,EAEA,GAAIM,YAAY,CAACE,OAAb,CAAqBR,CAAC,CAACO,MAAD,CAAtB,EAAkC,CAAC,CAAvC,CAA0C,CACxC,GAAIP,CAAC,CAAC7G,QAAN,CAAgB,CACdsH,WAAW,CAACT,CAAD,CAAI,CAAJ,CAAX,CACD,CACF,CACF,CAED,QAASS,CAAAA,WAAT,CAAqBC,CAArB,CAAwBtD,KAAxB,CAA+B,CAC7B,GAAIuD,CAAAA,IAAI,CAAGD,CAAC,CAACvH,QAAb,CACA,IAAK,GAAIM,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGkH,IAAI,CAACnH,MAAzB,CAAiCC,GAAC,EAAlC,CAAsC,CACpC,GAAIuG,CAAAA,GAAC,CAAGW,IAAI,CAAClH,GAAD,CAAZ,CACAuG,GAAC,CAACE,OAAF,CAAY9C,KAAK,CAAG,CAApB,CACAuC,GAAG,CAAClC,IAAJ,CAASuC,GAAT,EAEA,GAAIM,YAAY,CAACE,OAAb,CAAqBR,GAAC,CAACO,MAAD,CAAtB,EAAkC,CAAC,CAAvC,CAA0C,CACxC,GAAIP,GAAC,CAAC7G,QAAN,CAAgB,CACdsH,WAAW,CAACT,GAAD,CAAI5C,KAAK,CAAG,CAAZ,CAAX,CACD,CACF,CACF,CACF,CAED,MAAOuC,CAAAA,GAAP,CACD,C,qVAED,MAAO,SAASiB,CAAAA,iBAAT,EAA6B,CAClC,GAAIC,CAAAA,SAAS,CAAGC,SAAS,CAACD,SAA1B,CAAqC;AAErC,GAAIA,SAAS,CAACL,OAAV,CAAkB,QAAlB,EAA8B,CAAC,CAAnC,CAAsC,CACpC,MAAO,EAAP,CACD,CAED,GAAIO,CAAAA,EAAE,CAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAT,CACEC,MAAM,CAAG,CACPC,KAAK,CAAE,OADA,CAEPC,MAAM,CAAE,OAFD,CAGPC,SAAS,CAAE,QAHJ,CADX,CAME5H,CANF,CAOE6H,cAPF,CASA,IAAK7H,CAAL,GAAUyH,CAAAA,MAAV,CAAkB,CAChBH,EAAE,CAACQ,KAAH,CAAS9H,CAAT,EAAcyH,MAAM,CAACzH,CAAD,CAApB,CACD,CACDuH,QAAQ,CAACQ,IAAT,CAAcC,WAAd,CAA0BV,EAA1B,EACAO,cAAc,CAAGP,EAAE,CAACW,WAAH,CAAiBX,EAAE,CAACY,WAArC,CACAZ,EAAE,CAACa,MAAH,GAEA,MAAON,CAAAA,cAAP,CACD,C","sourcesContent":["/**\r\n * Performs a depth-first traversal over all of the node descendants,\r\n * incrementing currentIndex by 1 for each\r\n */\r\nfunction getNodeDataAtTreeIndexOrNextIndex({\r\n  targetIndex,\r\n  node,\r\n  currentIndex,\r\n  getNodeKey,\r\n  path = [],\r\n  lowerSiblingCounts = [],\r\n  ignoreCollapsed = true,\r\n  isPseudoRoot = false\r\n}) {\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = !isPseudoRoot\r\n    ? [...path, getNodeKey({ node, treeIndex: currentIndex })]\r\n    : [];\r\n\r\n  // Return target node when found\r\n  if (currentIndex === targetIndex) {\r\n    return {\r\n      node,\r\n      lowerSiblingCounts,\r\n      path: selfPath\r\n    };\r\n  }\r\n\r\n  // Add one and continue for nodes with no children or hidden children\r\n  if (!node.children || (ignoreCollapsed && node.expanded !== true)) {\r\n    return { nextIndex: currentIndex + 1 };\r\n  }\r\n\r\n  // Iterate over each child and their descendants and return the\r\n  // target node if childIndex reaches the targetIndex\r\n  let childIndex = currentIndex + 1;\r\n  const childCount = node.children.length;\r\n  for (let i = 0; i < childCount; i += 1) {\r\n    const result = getNodeDataAtTreeIndexOrNextIndex({\r\n      ignoreCollapsed,\r\n      getNodeKey,\r\n      targetIndex,\r\n      node: node.children[i],\r\n      currentIndex: childIndex,\r\n      lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n      path: selfPath\r\n    });\r\n\r\n    if (result.node) {\r\n      return result;\r\n    }\r\n\r\n    childIndex = result.nextIndex;\r\n  }\r\n\r\n  // If the target node is not found, return the farthest traversed index\r\n  return { nextIndex: childIndex };\r\n}\r\n\r\nexport function getDescendantCount({ node, ignoreCollapsed = true }) {\r\n  return (\r\n    getNodeDataAtTreeIndexOrNextIndex({\r\n      getNodeKey: () => {},\r\n      ignoreCollapsed,\r\n      node,\r\n      currentIndex: 0,\r\n      targetIndex: -1\r\n    }).nextIndex - 1\r\n  );\r\n}\r\n\r\n/**\r\n * Walk all descendants of the given node, depth-first\r\n *\r\n * @param {Object} args - Function parameters\r\n * @param {function} args.callback - Function to call on each node\r\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\r\n *                                        as the parent of all the nodes in the tree\r\n * @param {Object} args.node - A tree node\r\n * @param {Object=} args.parentNode - The parent node of `node`\r\n * @param {number} args.currentIndex - The treeIndex of `node`\r\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\r\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\r\n *                                             previous nodes in this path\r\n *\r\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\r\n *                                    or false if the walk should be terminated\r\n */\r\nfunction walkDescendants({\r\n  callback,\r\n  getNodeKey,\r\n  ignoreCollapsed,\r\n  isPseudoRoot = false,\r\n  node,\r\n  parentNode = null,\r\n  currentIndex,\r\n  path = [],\r\n  lowerSiblingCounts = []\r\n}) {\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = isPseudoRoot\r\n    ? []\r\n    : [...path, getNodeKey({ node, treeIndex: currentIndex })];\r\n  const selfInfo = isPseudoRoot\r\n    ? null\r\n    : {\r\n        node,\r\n        parentNode,\r\n        path: selfPath,\r\n        lowerSiblingCounts,\r\n        treeIndex: currentIndex\r\n      };\r\n\r\n  if (!isPseudoRoot) {\r\n    const callbackResult = callback(selfInfo);\r\n\r\n    // Cut walk short if the callback returned false\r\n    if (callbackResult === false) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Return self on nodes with no children or hidden children\r\n  if (\r\n    !node.children ||\r\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return currentIndex;\r\n  }\r\n\r\n  // Get all descendants\r\n  let childIndex = currentIndex;\r\n  const childCount = node.children.length;\r\n  if (typeof node.children !== \"function\") {\r\n    for (let i = 0; i < childCount; i += 1) {\r\n      childIndex = walkDescendants({\r\n        callback,\r\n        getNodeKey,\r\n        ignoreCollapsed,\r\n        node: node.children[i],\r\n        parentNode: isPseudoRoot ? null : node,\r\n        currentIndex: childIndex + 1,\r\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n        path: selfPath\r\n      });\r\n\r\n      // Cut walk short if the callback returned false\r\n      if (childIndex === false) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return childIndex;\r\n}\r\n\r\n/**\r\n * Perform a change on the given node and all its descendants, traversing the tree depth-first\r\n *\r\n * @param {Object} args - Function parameters\r\n * @param {function} args.callback - Function to call on each node\r\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\r\n *                                        as the parent of all the nodes in the tree\r\n * @param {Object} args.node - A tree node\r\n * @param {Object=} args.parentNode - The parent node of `node`\r\n * @param {number} args.currentIndex - The treeIndex of `node`\r\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\r\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\r\n *                                             previous nodes in this path\r\n *\r\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\r\n *                                    or false if the walk should be terminated\r\n */\r\nfunction mapDescendants({\r\n  callback,\r\n  getNodeKey,\r\n  ignoreCollapsed,\r\n  isPseudoRoot = false,\r\n  node,\r\n  parentNode = null,\r\n  currentIndex,\r\n  path = [],\r\n  lowerSiblingCounts = []\r\n}) {\r\n  const nextNode = { ...node };\r\n\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = isPseudoRoot\r\n    ? []\r\n    : [...path, getNodeKey({ node: nextNode, treeIndex: currentIndex })];\r\n  const selfInfo = {\r\n    node: nextNode,\r\n    parentNode,\r\n    path: selfPath,\r\n    lowerSiblingCounts,\r\n    treeIndex: currentIndex\r\n  };\r\n\r\n  // Return self on nodes with no children or hidden children\r\n  if (\r\n    !nextNode.children ||\r\n    (nextNode.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return {\r\n      treeIndex: currentIndex,\r\n      node: callback(selfInfo)\r\n    };\r\n  }\r\n\r\n  // Get all descendants\r\n  let childIndex = currentIndex;\r\n  const childCount = nextNode.children.length;\r\n  if (typeof nextNode.children !== \"function\") {\r\n    nextNode.children = nextNode.children.map((child, i) => {\r\n      const mapResult = mapDescendants({\r\n        callback,\r\n        getNodeKey,\r\n        ignoreCollapsed,\r\n        node: child,\r\n        parentNode: isPseudoRoot ? null : nextNode,\r\n        currentIndex: childIndex + 1,\r\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n        path: selfPath\r\n      });\r\n      childIndex = mapResult.treeIndex;\r\n\r\n      return mapResult.node;\r\n    });\r\n  }\r\n\r\n  return {\r\n    node: callback(selfInfo),\r\n    treeIndex: childIndex\r\n  };\r\n}\r\n\r\n/**\r\n * Count all the visible (expanded) descendants in the tree data.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n *\r\n * @return {number} count\r\n */\r\nexport function getVisibleNodeCount({ treeData }) {\r\n  const traverse = node => {\r\n    if (\r\n      !node.children ||\r\n      node.expanded !== true ||\r\n      typeof node.children === \"function\"\r\n    ) {\r\n      return 1;\r\n    }\r\n\r\n    return (\r\n      1 +\r\n      node.children.reduce(\r\n        (total, currentNode) => total + traverse(currentNode),\r\n        0\r\n      )\r\n    );\r\n  };\r\n\r\n  return treeData.reduce(\r\n    (total, currentNode) => total + traverse(currentNode),\r\n    0\r\n  );\r\n}\r\n\r\n/**\r\n * Get the <targetIndex>th visible node in the tree data.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!number} targetIndex - The index of the node to search for\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n *\r\n * @return {{\r\n *      node: Object,\r\n *      path: []string|[]number,\r\n *      lowerSiblingCounts: []number\r\n *  }|null} node - The node at targetIndex, or null if not found\r\n */\r\nexport function getVisibleNodeInfoAtIndex({\r\n  treeData,\r\n  index: targetIndex,\r\n  getNodeKey\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return null;\r\n  }\r\n\r\n  // Call the tree traversal with a pseudo-root node\r\n  const result = getNodeDataAtTreeIndexOrNextIndex({\r\n    targetIndex,\r\n    getNodeKey,\r\n    node: {\r\n      children: treeData,\r\n      expanded: true\r\n    },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: [],\r\n    isPseudoRoot: true\r\n  });\r\n\r\n  if (result.node) {\r\n    return result;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Walk descendants depth-first and call a callback on each\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {function} callback - Function to call on each node\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return void\r\n */\r\nexport function walk({\r\n  treeData,\r\n  getNodeKey,\r\n  callback,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return;\r\n  }\r\n\r\n  walkDescendants({\r\n    callback,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    isPseudoRoot: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: []\r\n  });\r\n}\r\n\r\n/**\r\n * Perform a depth-first transversal of the descendants and\r\n *  make a change to every node in the tree\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {function} callback - Function to call on each node\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function map({\r\n  treeData,\r\n  getNodeKey,\r\n  callback,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return [];\r\n  }\r\n\r\n  return mapDescendants({\r\n    callback,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    isPseudoRoot: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: []\r\n  }).node.children;\r\n}\r\n\r\n/**\r\n * Expand or close every node in the tree\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {?boolean} expanded - Whether the node is expanded or not\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function toggleExpandedForAll({ treeData, expanded = true }) {\r\n  return map({\r\n    treeData,\r\n    callback: ({ node }) => ({ ...node, expanded }),\r\n    getNodeKey: ({ treeIndex }) => treeIndex,\r\n    ignoreCollapsed: false\r\n  });\r\n}\r\n\r\n/**\r\n * Replaces node at path with object, or callback-defined object\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be changed\r\n * @param {function|any} newNode - Node to replace the node at the path with, or a function producing the new node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function changeNodeAtPath({\r\n  treeData,\r\n  path,\r\n  newNode,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  const RESULT_MISS = \"RESULT_MISS\";\r\n  const traverse = ({\r\n    isPseudoRoot = false,\r\n    node,\r\n    currentTreeIndex,\r\n    pathIndex\r\n  }) => {\r\n    if (\r\n      !isPseudoRoot &&\r\n      getNodeKey({ node, treeIndex: currentTreeIndex }) !== path[pathIndex]\r\n    ) {\r\n      return RESULT_MISS;\r\n    }\r\n\r\n    if (pathIndex >= path.length - 1) {\r\n      // If this is the final location in the path, return its changed form\r\n      return typeof newNode === \"function\"\r\n        ? newNode({ node, treeIndex: currentTreeIndex })\r\n        : newNode;\r\n    }\r\n    if (!node.children) {\r\n      // If this node is part of the path, but has no children, return the unchanged node\r\n      throw new Error(\"Path referenced children of node with no children.\");\r\n    }\r\n\r\n    let nextTreeIndex = currentTreeIndex + 1;\r\n    for (let i = 0; i < node.children.length; i += 1) {\r\n      const result = traverse({\r\n        node: node.children[i],\r\n        currentTreeIndex: nextTreeIndex,\r\n        pathIndex: pathIndex + 1\r\n      });\r\n\r\n      // If the result went down the correct path\r\n      if (result !== RESULT_MISS) {\r\n        if (result) {\r\n          // If the result was truthy (in this case, an object),\r\n          //  pass it to the next level of recursion up\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.slice(0, i),\r\n              result,\r\n              ...node.children.slice(i + 1)\r\n            ]\r\n          };\r\n        }\r\n        // If the result was falsy (returned from the newNode function), then\r\n        //  delete the node from the array.\r\n        return {\r\n          ...node,\r\n          children: [\r\n            ...node.children.slice(0, i),\r\n            ...node.children.slice(i + 1)\r\n          ]\r\n        };\r\n      }\r\n\r\n      nextTreeIndex +=\r\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\r\n    }\r\n\r\n    return RESULT_MISS;\r\n  };\r\n\r\n  // Use a pseudo-root node in the beginning traversal\r\n  const result = traverse({\r\n    node: { children: treeData },\r\n    currentTreeIndex: -1,\r\n    pathIndex: -1,\r\n    isPseudoRoot: true\r\n  });\r\n\r\n  if (result === RESULT_MISS) {\r\n    throw new Error(\"No node found at the given path.\");\r\n  }\r\n\r\n  return result.children;\r\n}\r\n\r\n/**\r\n * Removes the node at the specified path and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The tree data with the node removed\r\n */\r\nexport function removeNodeAtPath({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  return changeNodeAtPath({\r\n    treeData,\r\n    path,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    newNode: null // Delete the node\r\n  });\r\n}\r\n\r\n/**\r\n * Removes the node at the specified path and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The tree data with the node removed\r\n * @return {Object} result.node - The node that was removed\r\n * @return {number} result.treeIndex - The previous treeIndex of the removed node\r\n */\r\nexport function removeNode({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  let removedNode = null;\r\n  let removedTreeIndex = null;\r\n  const nextTreeData = changeNodeAtPath({\r\n    treeData,\r\n    path,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    newNode: ({ node, treeIndex }) => {\r\n      // Store the target node and delete it from the tree\r\n      removedNode = node;\r\n      removedTreeIndex = treeIndex;\r\n\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return {\r\n    treeData: nextTreeData,\r\n    node: removedNode,\r\n    treeIndex: removedTreeIndex\r\n  };\r\n}\r\n\r\n/**\r\n * Gets the node at the specified path\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object|null} nodeInfo - The node info at the given path, or null if not found\r\n */\r\nexport function getNodeAtPath({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  let foundNodeInfo = null;\r\n\r\n  try {\r\n    changeNodeAtPath({\r\n      treeData,\r\n      path,\r\n      getNodeKey,\r\n      ignoreCollapsed,\r\n      newNode: ({ node, treeIndex }) => {\r\n        foundNodeInfo = { node, treeIndex };\r\n        return node;\r\n      }\r\n    });\r\n  } catch (err) {\r\n    // Ignore the error -- the null return will be explanation enough\r\n  }\r\n\r\n  return foundNodeInfo;\r\n}\r\n\r\n/**\r\n * Adds the node to the specified parent and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {!Object} newNode - The node to insert\r\n * @param {number|string} parentKey - The key of the to-be parentNode of the node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} expandParent - If true, expands the parentNode specified by parentPath\r\n * @param {boolean=} addAsFirstChild - If true, adds new node as first child of tree\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The updated tree data\r\n * @return {number} result.treeIndex - The tree index at which the node was inserted\r\n */\r\nexport function addNodeUnderParent({\r\n  treeData,\r\n  newNode,\r\n  parentKey = null,\r\n  getNodeKey,\r\n  ignoreCollapsed = true,\r\n  expandParent = false,\r\n  addAsFirstChild = false\r\n}) {\r\n  if (parentKey === null) {\r\n    return {\r\n      treeData: [...(treeData || []), newNode],\r\n      treeIndex: (treeData || []).length\r\n    };\r\n  }\r\n\r\n  let insertedTreeIndex = null;\r\n  let hasBeenAdded = false;\r\n  const changedTreeData = map({\r\n    treeData,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    callback: ({ node, treeIndex, path }) => {\r\n      const key = path ? path[path.length - 1] : null;\r\n      // Return nodes that are not the parent as-is\r\n      if (hasBeenAdded || key !== parentKey) {\r\n        return node;\r\n      }\r\n      hasBeenAdded = true;\r\n\r\n      const parentNode = {\r\n        ...node\r\n      };\r\n\r\n      if (expandParent) {\r\n        parentNode.expanded = true;\r\n      }\r\n\r\n      // If no children exist yet, just add the single newNode\r\n      if (!parentNode.children) {\r\n        insertedTreeIndex = treeIndex + 1;\r\n        return {\r\n          ...parentNode,\r\n          children: [newNode]\r\n        };\r\n      }\r\n\r\n      if (typeof parentNode.children === \"function\") {\r\n        throw new Error(\"Cannot add to children defined by a function\");\r\n      }\r\n\r\n      let nextTreeIndex = treeIndex + 1;\r\n      for (let i = 0; i < parentNode.children.length; i += 1) {\r\n        nextTreeIndex +=\r\n          1 +\r\n          getDescendantCount({ node: parentNode.children[i], ignoreCollapsed });\r\n      }\r\n\r\n      insertedTreeIndex = nextTreeIndex;\r\n\r\n      const children = addAsFirstChild\r\n        ? [newNode, ...parentNode.children]\r\n        : [...parentNode.children, newNode];\r\n\r\n      return {\r\n        ...parentNode,\r\n        children\r\n      };\r\n    }\r\n  });\r\n\r\n  if (!hasBeenAdded) {\r\n    throw new Error(\"No node found with the given key.\");\r\n  }\r\n\r\n  return {\r\n    treeData: changedTreeData,\r\n    treeIndex: insertedTreeIndex\r\n  };\r\n}\r\n\r\nfunction addNodeAtDepthAndIndex({\r\n  targetDepth,\r\n  minimumTreeIndex,\r\n  newNode,\r\n  ignoreCollapsed,\r\n  expandParent,\r\n  isPseudoRoot = false,\r\n  isLastChild,\r\n  node,\r\n  currentIndex,\r\n  currentDepth,\r\n  getNodeKey,\r\n  path = []\r\n}) {\r\n  const selfPath = n =>\r\n    isPseudoRoot\r\n      ? []\r\n      : [...path, getNodeKey({ node: n, treeIndex: currentIndex })];\r\n\r\n  // If the current position is the only possible place to add, add it\r\n  if (\r\n    currentIndex >= minimumTreeIndex - 1 ||\r\n    (isLastChild && !(node.children && node.children.length))\r\n  ) {\r\n    if (typeof node.children === \"function\") {\r\n      throw new Error(\"Cannot add to children defined by a function\");\r\n    } else {\r\n      const extraNodeProps = expandParent ? { expanded: true } : {};\r\n      const nextNode = {\r\n        ...node,\r\n\r\n        ...extraNodeProps,\r\n        children: node.children ? [newNode, ...node.children] : [newNode]\r\n      };\r\n\r\n      return {\r\n        node: nextNode,\r\n        nextIndex: currentIndex + 2,\r\n        insertedTreeIndex: currentIndex + 1,\r\n        parentPath: selfPath(nextNode),\r\n        parentNode: isPseudoRoot ? null : nextNode\r\n      };\r\n    }\r\n  }\r\n\r\n  // If this is the target depth for the insertion,\r\n  // i.e., where the newNode can be added to the current node's children\r\n  if (currentDepth >= targetDepth - 1) {\r\n    // Skip over nodes with no children or hidden children\r\n    if (\r\n      !node.children ||\r\n      typeof node.children === \"function\" ||\r\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n    ) {\r\n      return { node, nextIndex: currentIndex + 1 };\r\n    }\r\n\r\n    // Scan over the children to see if there's a place among them that fulfills\r\n    // the minimumTreeIndex requirement\r\n    let childIndex = currentIndex + 1;\r\n    let insertedTreeIndex = null;\r\n    let insertIndex = null;\r\n    for (let i = 0; i < node.children.length; i += 1) {\r\n      // If a valid location is found, mark it as the insertion location and\r\n      // break out of the loop\r\n      if (childIndex >= minimumTreeIndex) {\r\n        insertedTreeIndex = childIndex;\r\n        insertIndex = i;\r\n        break;\r\n      }\r\n\r\n      // Increment the index by the child itself plus the number of descendants it has\r\n      childIndex +=\r\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\r\n    }\r\n\r\n    // If no valid indices to add the node were found\r\n    if (insertIndex === null) {\r\n      // If the last position in this node's children is less than the minimum index\r\n      // and there are more children on the level of this node, return without insertion\r\n      if (childIndex < minimumTreeIndex && !isLastChild) {\r\n        return { node, nextIndex: childIndex };\r\n      }\r\n\r\n      // Use the last position in the children array to insert the newNode\r\n      insertedTreeIndex = childIndex;\r\n      insertIndex = node.children.length;\r\n    }\r\n\r\n    // Insert the newNode at the insertIndex\r\n    const nextNode = {\r\n      ...node,\r\n      children: [\r\n        ...node.children.slice(0, insertIndex),\r\n        newNode,\r\n        ...node.children.slice(insertIndex)\r\n      ]\r\n    };\r\n\r\n    // Return node with successful insert result\r\n    return {\r\n      node: nextNode,\r\n      nextIndex: childIndex,\r\n      insertedTreeIndex,\r\n      parentPath: selfPath(nextNode),\r\n      parentNode: isPseudoRoot ? null : nextNode\r\n    };\r\n  }\r\n\r\n  // Skip over nodes with no children or hidden children\r\n  if (\r\n    !node.children ||\r\n    typeof node.children === \"function\" ||\r\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return { node, nextIndex: currentIndex + 1 };\r\n  }\r\n\r\n  // Get all descendants\r\n  let insertedTreeIndex = null;\r\n  let pathFragment = null;\r\n  let parentNode = null;\r\n  let childIndex = currentIndex + 1;\r\n  let newChildren = node.children;\r\n  if (typeof newChildren !== \"function\") {\r\n    newChildren = newChildren.map((child, i) => {\r\n      if (insertedTreeIndex !== null) {\r\n        return child;\r\n      }\r\n\r\n      const mapResult = addNodeAtDepthAndIndex({\r\n        targetDepth,\r\n        minimumTreeIndex,\r\n        newNode,\r\n        ignoreCollapsed,\r\n        expandParent,\r\n        isLastChild: isLastChild && i === newChildren.length - 1,\r\n        node: child,\r\n        currentIndex: childIndex,\r\n        currentDepth: currentDepth + 1,\r\n        getNodeKey,\r\n        path: [] // Cannot determine the parent path until the children have been processed\r\n      });\r\n\r\n      if (\"insertedTreeIndex\" in mapResult) {\r\n        ({\r\n          insertedTreeIndex,\r\n          parentNode,\r\n          parentPath: pathFragment\r\n        } = mapResult);\r\n      }\r\n\r\n      childIndex = mapResult.nextIndex;\r\n\r\n      return mapResult.node;\r\n    });\r\n  }\r\n\r\n  const nextNode = { ...node, children: newChildren };\r\n  const result = {\r\n    node: nextNode,\r\n    nextIndex: childIndex\r\n  };\r\n\r\n  if (insertedTreeIndex !== null) {\r\n    result.insertedTreeIndex = insertedTreeIndex;\r\n    result.parentPath = [...selfPath(nextNode), ...pathFragment];\r\n    result.parentNode = parentNode;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Insert a node into the tree at the given depth, after the minimum index\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!number} depth - The depth to insert the node at (the first level of the array being depth 0)\r\n * @param {!number} minimumTreeIndex - The lowest possible treeIndex to insert the node at\r\n * @param {!Object} newNode - The node to insert into the tree\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} expandParent - If true, expands the parent of the inserted node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The tree data with the node added\r\n * @return {number} result.treeIndex - The tree index at which the node was inserted\r\n * @return {number[]|string[]} result.path - Array of keys leading to the node location after insertion\r\n * @return {Object} result.parentNode - The parent node of the inserted node\r\n */\r\nexport function insertNode({\r\n  treeData,\r\n  depth: targetDepth,\r\n  minimumTreeIndex,\r\n  newNode,\r\n  getNodeKey = () => {},\r\n  ignoreCollapsed = true,\r\n  expandParent = false\r\n}) {\r\n  if (!treeData && targetDepth === 0) {\r\n    return {\r\n      treeData: [newNode],\r\n      treeIndex: 0,\r\n      path: [getNodeKey({ node: newNode, treeIndex: 0 })],\r\n      parentNode: null\r\n    };\r\n  }\r\n\r\n  const insertResult = addNodeAtDepthAndIndex({\r\n    targetDepth,\r\n    minimumTreeIndex,\r\n    newNode,\r\n    ignoreCollapsed,\r\n    expandParent,\r\n    getNodeKey,\r\n    isPseudoRoot: true,\r\n    isLastChild: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    currentDepth: -1\r\n  });\r\n\r\n  if (!(\"insertedTreeIndex\" in insertResult)) {\r\n    throw new Error(\"No suitable position found to insert.\");\r\n  }\r\n\r\n  const treeIndex = insertResult.insertedTreeIndex;\r\n  return {\r\n    treeData: insertResult.node.children,\r\n    treeIndex,\r\n    path: [\r\n      ...insertResult.parentPath,\r\n      getNodeKey({ node: newNode, treeIndex })\r\n    ],\r\n    parentNode: insertResult.parentNode\r\n  };\r\n}\r\n\r\n/**\r\n * Get tree data flattened.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {{\r\n *      node: Object,\r\n *      path: []string|[]number,\r\n *      lowerSiblingCounts: []number\r\n *  }}[] nodes - The node array\r\n */\r\nexport function getFlatDataFromTree({\r\n  treeData,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return [];\r\n  }\r\n\r\n  const flattened = [];\r\n  walk({\r\n    treeData,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    callback: nodeInfo => {\r\n      flattened.push(nodeInfo);\r\n    }\r\n  });\r\n\r\n  return flattened;\r\n}\r\n\r\n/**\r\n * Generate a tree structure from flat data.\r\n *\r\n * @param {!Object[]} flatData\r\n * @param {!function=} getKey - Function to get the key from the nodeData\r\n * @param {!function=} getParentKey - Function to get the parent key from the nodeData\r\n * @param {string|number=} rootKey - The value returned by `getParentKey` that corresponds to the root node.\r\n *                                  For example, if your nodes have id 1-99, you might use rootKey = 0\r\n *\r\n * @return {Object[]} treeData - The flat data represented as a tree\r\n */\r\nexport function getTreeFromFlatData({\r\n  flatData,\r\n  getKey = node => node.id,\r\n  getParentKey = node => node.parentId,\r\n  rootKey = \"0\"\r\n}) {\r\n  if (!flatData) {\r\n    return [];\r\n  }\r\n\r\n  const childrenToParents = {};\r\n  flatData.forEach(child => {\r\n    const parentKey = getParentKey(child);\r\n\r\n    if (parentKey in childrenToParents) {\r\n      childrenToParents[parentKey].push(child);\r\n    } else {\r\n      childrenToParents[parentKey] = [child];\r\n    }\r\n  });\r\n\r\n  if (!(rootKey in childrenToParents)) {\r\n    return [];\r\n  }\r\n\r\n  const trav = parent => {\r\n    const parentKey = getKey(parent);\r\n    if (parentKey in childrenToParents) {\r\n      return {\r\n        ...parent,\r\n        children: childrenToParents[parentKey].map(child => trav(child))\r\n      };\r\n    }\r\n\r\n    return { ...parent };\r\n  };\r\n\r\n  return childrenToParents[rootKey].map(child => trav(child));\r\n}\r\n\r\n/**\r\n * Check if a node is a descendant of another node.\r\n *\r\n * @param {!Object} older - Potential ancestor of younger node\r\n * @param {!Object} younger - Potential descendant of older node\r\n *\r\n * @return {boolean}\r\n */\r\nexport function isDescendant(older, younger) {\r\n  return (\r\n    !!older.children &&\r\n    typeof older.children !== \"function\" &&\r\n    older.children.some(\r\n      child => child === younger || isDescendant(child, younger)\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * Get the maximum depth of the children (the depth of the root node is 0).\r\n *\r\n * @param {!Object} node - Node in the tree\r\n * @param {?number} depth - The current depth\r\n *\r\n * @return {number} maxDepth - The deepest depth in the tree\r\n */\r\nexport function getDepth(node, depth = 0) {\r\n  if (!node.children) {\r\n    return depth;\r\n  }\r\n\r\n  if (typeof node.children === \"function\") {\r\n    return depth + 1;\r\n  }\r\n\r\n  return node.children.reduce(\r\n    (deepest, child) => Math.max(deepest, getDepth(child, depth + 1)),\r\n    depth\r\n  );\r\n}\r\n\r\n/**\r\n * Find nodes matching a search query in the tree,\r\n *\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {?string|number} searchQuery - Function returning a boolean to indicate whether the node is a match or not\r\n * @param {!function} searchMethod - Function returning a boolean to indicate whether the node is a match or not\r\n * @param {?number} searchFocusOffset - The offset of the match to focus on\r\n *                                      (e.g., 0 focuses on the first match, 1 on the second)\r\n * @param {boolean=} expandAllMatchPaths - If true, expands the paths to any matched node\r\n * @param {boolean=} expandFocusMatchPaths - If true, expands the path to the focused node\r\n *\r\n * @return {Object[]} matches - An array of objects containing the matching `node`s, their `path`s and `treeIndex`s\r\n * @return {Object[]} treeData - The original tree data with all relevant nodes expanded.\r\n *                               If expandAllMatchPaths and expandFocusMatchPaths are both false,\r\n *                               it will be the same as the original tree data.\r\n */\r\nexport function find({\r\n  getNodeKey,\r\n  treeData,\r\n  searchQuery,\r\n  searchMethod,\r\n  searchFocusOffset,\r\n  expandAllMatchPaths = false,\r\n  expandFocusMatchPaths = true\r\n}) {\r\n  let matchCount = 0;\r\n  const trav = ({ isPseudoRoot = false, node, currentIndex, path = [] }) => {\r\n    let matches = [];\r\n    let isSelfMatch = false;\r\n    let hasFocusMatch = false;\r\n    // The pseudo-root is not considered in the path\r\n    const selfPath = isPseudoRoot\r\n      ? []\r\n      : [...path, getNodeKey({ node, treeIndex: currentIndex })];\r\n    const extraInfo = isPseudoRoot\r\n      ? null\r\n      : {\r\n          path: selfPath,\r\n          treeIndex: currentIndex\r\n        };\r\n\r\n    // Nodes with with children that aren't lazy\r\n    const hasChildren =\r\n      node.children &&\r\n      typeof node.children !== \"function\" &&\r\n      node.children.length > 0;\r\n\r\n    // Examine the current node to see if it is a match\r\n    if (!isPseudoRoot && searchMethod({ ...extraInfo, node, searchQuery })) {\r\n      if (matchCount === searchFocusOffset) {\r\n        hasFocusMatch = true;\r\n      }\r\n\r\n      // Keep track of the number of matching nodes, so we know when the searchFocusOffset\r\n      //  is reached\r\n      matchCount += 1;\r\n\r\n      // We cannot add this node to the matches right away, as it may be changed\r\n      //  during the search of the descendants. The entire node is used in\r\n      //  comparisons between nodes inside the `matches` and `treeData` results\r\n      //  of this method (`find`)\r\n      isSelfMatch = true;\r\n    }\r\n\r\n    let childIndex = currentIndex;\r\n    const newNode = { ...node };\r\n    if (hasChildren) {\r\n      // Get all descendants\r\n      newNode.children = newNode.children.map(child => {\r\n        const mapResult = trav({\r\n          node: child,\r\n          currentIndex: childIndex + 1,\r\n          path: selfPath\r\n        });\r\n\r\n        // Ignore hidden nodes by only advancing the index counter to the returned treeIndex\r\n        // if the child is expanded.\r\n        //\r\n        // The child could have been expanded from the start,\r\n        // or expanded due to a matching node being found in its descendants\r\n        if (mapResult.node.expanded) {\r\n          childIndex = mapResult.treeIndex;\r\n        } else {\r\n          childIndex += 1;\r\n        }\r\n\r\n        if (mapResult.matches.length > 0 || mapResult.hasFocusMatch) {\r\n          matches = [...matches, ...mapResult.matches];\r\n          if (mapResult.hasFocusMatch) {\r\n            hasFocusMatch = true;\r\n          }\r\n\r\n          // Expand the current node if it has descendants matching the search\r\n          // and the settings are set to do so.\r\n          if (\r\n            (expandAllMatchPaths && mapResult.matches.length > 0) ||\r\n            ((expandAllMatchPaths || expandFocusMatchPaths) &&\r\n              mapResult.hasFocusMatch)\r\n          ) {\r\n            newNode.expanded = true;\r\n          }\r\n        }\r\n\r\n        return mapResult.node;\r\n      });\r\n    }\r\n\r\n    // Cannot assign a treeIndex to hidden nodes\r\n    if (!isPseudoRoot && !newNode.expanded) {\r\n      matches = matches.map(match => ({\r\n        ...match,\r\n        treeIndex: null\r\n      }));\r\n    }\r\n\r\n    // Add this node to the matches if it fits the search criteria.\r\n    // This is performed at the last minute so newNode can be sent in its final form.\r\n    if (isSelfMatch) {\r\n      matches = [{ ...extraInfo, node: newNode }, ...matches];\r\n    }\r\n\r\n    return {\r\n      node: matches.length > 0 ? newNode : node,\r\n      matches,\r\n      hasFocusMatch,\r\n      treeIndex: childIndex\r\n    };\r\n  };\r\n\r\n  const result = trav({\r\n    node: { children: treeData },\r\n    isPseudoRoot: true,\r\n    currentIndex: -1\r\n  });\r\n\r\n  return {\r\n    matches: result.matches,\r\n    treeData: result.node.children\r\n  };\r\n}\r\n\r\nexport function treeToList(arr) {\r\n  let treeList = arr || [];\r\n\r\n  //末级节点\r\n  let leafs = [];\r\n\r\n  //根\r\n  let roots = [];\r\n\r\n  //所有节点\r\n  let list = [];\r\n\r\n  for (let i = 0; i < treeList.length; i++) {\r\n    const d = treeList[i];\r\n\r\n    if (!d) {\r\n      continue;\r\n    }\r\n\r\n    const childrens = d.children || [];\r\n\r\n    d.__depth = 0;\r\n\r\n    list.push(d);\r\n    roots.push(d);\r\n\r\n    if (childrens.length > 0) {\r\n      getChildren(d, 0);\r\n    } else {\r\n      leafs.push(d);\r\n    }\r\n  }\r\n\r\n  function getChildren(d, depth) {\r\n    const tempArr = d.children || [];\r\n\r\n    for (let i = 0; i < tempArr.length; i++) {\r\n      const d = tempArr[i];\r\n      const childrens = d.children || [];\r\n\r\n      d.__depth = depth + 1;\r\n\r\n      list.push(d);\r\n\r\n      if (childrens.length > 0) {\r\n        getChildren(d, depth + 1);\r\n      } else {\r\n        leafs.push(d);\r\n      }\r\n    }\r\n  }\r\n\r\n  return { list, leafs, roots };\r\n}\r\n\r\nexport function getDataListWithExpanded(list, expandedKeys = [], rowKey) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    let d = list[i];\r\n\r\n    d.__depth = 0;\r\n\r\n    arr.push(d);\r\n\r\n    if (expandedKeys.indexOf(d[rowKey]) > -1) {\r\n      if (d.children) {\r\n        setChildren(d, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setChildren(c, depth) {\r\n    let cArr = c.children;\r\n    for (let i = 0; i < cArr.length; i++) {\r\n      let d = cArr[i];\r\n      d.__depth = depth + 1;\r\n      arr.push(d);\r\n\r\n      if (expandedKeys.indexOf(d[rowKey]) > -1) {\r\n        if (d.children) {\r\n          setChildren(d, depth + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport function getScrollbarWidth() {\r\n  var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\r\n\r\n  if (userAgent.indexOf(\"Chrome\") > -1) {\r\n    return 6;\r\n  }\r\n\r\n  var oP = document.createElement(\"p\"),\r\n    styles = {\r\n      width: \"100px\",\r\n      height: \"100px\",\r\n      overflowY: \"scroll\"\r\n    },\r\n    i,\r\n    scrollbarWidth;\r\n\r\n  for (i in styles) {\r\n    oP.style[i] = styles[i];\r\n  }\r\n  document.body.appendChild(oP);\r\n  scrollbarWidth = oP.offsetWidth - oP.clientWidth;\r\n  oP.remove();\r\n\r\n  return scrollbarWidth;\r\n}\r\n"]}]}