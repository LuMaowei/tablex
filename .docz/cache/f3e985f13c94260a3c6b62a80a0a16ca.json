{"remainingRequest":"E:\\WebRoot\\tablex\\node_modules\\thread-loader\\dist\\cjs.js??ref--5-1!E:\\WebRoot\\tablex\\node_modules\\babel-loader\\lib\\index.js??ref--5-2!E:\\WebRoot\\tablex\\node_modules\\source-map-loader\\index.js!E:\\WebRoot\\tablex\\src\\helper.js","dependencies":[{"path":"E:\\WebRoot\\tablex\\src\\helper.js","mtime":1559204542871},{"path":"E:\\WebRoot\\tablex\\node_modules\\umi-library\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559204841349},{"path":"E:\\WebRoot\\tablex\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1554780430526},{"path":"E:\\WebRoot\\tablex\\node_modules\\babel-loader\\lib\\index.js","mtime":1551944504366},{"path":"E:\\WebRoot\\tablex\\node_modules\\source-map-loader\\index.js","mtime":1551944506105}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:\\WebRoot\\tablex\\src\\helper.js"],"names":["getNodeDataAtTreeIndexOrNextIndex","targetIndex","node","currentIndex","getNodeKey","path","lowerSiblingCounts","ignoreCollapsed","isPseudoRoot","selfPath","treeIndex","children","expanded","nextIndex","childIndex","childCount","length","i","result","getDescendantCount","walkDescendants","callback","parentNode","selfInfo","callbackResult","mapDescendants","nextNode","map","child","mapResult","getVisibleNodeCount","treeData","traverse","reduce","total","currentNode","getVisibleNodeInfoAtIndex","index","walk","toggleExpandedForAll","changeNodeAtPath","newNode","RESULT_MISS","currentTreeIndex","pathIndex","Error","nextTreeIndex","slice","removeNodeAtPath","removeNode","removedNode","removedTreeIndex","nextTreeData","getNodeAtPath","foundNodeInfo","err","addNodeUnderParent","parentKey","expandParent","addAsFirstChild","insertedTreeIndex","hasBeenAdded","changedTreeData","key","addNodeAtDepthAndIndex","targetDepth","minimumTreeIndex","isLastChild","currentDepth","n","extraNodeProps","parentPath","insertIndex","pathFragment","newChildren","insertNode","depth","insertResult","getFlatDataFromTree","flattened","nodeInfo","push","getTreeFromFlatData","flatData","getKey","id","getParentKey","parentId","rootKey","childrenToParents","forEach","trav","parent","isDescendant","older","younger","some","getDepth","deepest","Math","max","find","searchQuery","searchMethod","searchFocusOffset","expandAllMatchPaths","expandFocusMatchPaths","matchCount","matches","isSelfMatch","hasFocusMatch","extraInfo","hasChildren","match","treeToList","arr","treeList","leafs","roots","list","d","childrens","__depth","getChildren","tempArr","getDataListWithExpanded","expandedKeys","rowKey","indexOf","setChildren","c","cArr","getScrollbarWidth","userAgent","navigator","oP","document","createElement","styles","width","height","overflowY","scrollbarWidth","style","body","appendChild","offsetWidth","clientWidth","remove"],"mappings":";;;;;;;;AAAA;;;;AAIA,SAASA,iCAAT,OASG;AAAA,MARDC,WAQC,QARDA,WAQC;AAAA,MAPDC,IAOC,QAPDA,IAOC;AAAA,MANDC,YAMC,QANDA,YAMC;AAAA,MALDC,UAKC,QALDA,UAKC;AAAA,uBAJDC,IAIC;AAAA,MAJDA,IAIC,0BAJM,EAIN;AAAA,mCAHDC,kBAGC;AAAA,MAHDA,kBAGC,sCAHoB,EAGpB;AAAA,kCAFDC,eAEC;AAAA,MAFDA,eAEC,qCAFiB,IAEjB;AAAA,+BADDC,YACC;AAAA,MADDA,YACC,kCADc,KACd;AACD;AACA,MAAMC,QAAQ,GAAG,CAACD,YAAD,gCACTH,IADS,IACHD,UAAU,CAAC;AAAEF,IAAAA,IAAI,EAAJA,IAAF;AAAQQ,IAAAA,SAAS,EAAEP;AAAnB,GAAD,CADP,KAEb,EAFJ,CAFC,CAMD;;AACA,MAAIA,YAAY,KAAKF,WAArB,EAAkC;AAChC,WAAO;AACLC,MAAAA,IAAI,EAAJA,IADK;AAELI,MAAAA,kBAAkB,EAAlBA,kBAFK;AAGLD,MAAAA,IAAI,EAAEI;AAHD,KAAP;AAKD,GAbA,CAeD;;;AACA,MAAI,CAACP,IAAI,CAACS,QAAN,IAAmBJ,eAAe,IAAIL,IAAI,CAACU,QAAL,KAAkB,IAA5D,EAAmE;AACjE,WAAO;AAAEC,MAAAA,SAAS,EAAEV,YAAY,GAAG;AAA5B,KAAP;AACD,GAlBA,CAoBD;AACA;;;AACA,MAAIW,UAAU,GAAGX,YAAY,GAAG,CAAhC;AACA,MAAMY,UAAU,GAAGb,IAAI,CAACS,QAAL,CAAcK,MAAjC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtC,QAAMC,MAAM,GAAGlB,iCAAiC,CAAC;AAC/CO,MAAAA,eAAe,EAAfA,eAD+C;AAE/CH,MAAAA,UAAU,EAAVA,UAF+C;AAG/CH,MAAAA,WAAW,EAAXA,WAH+C;AAI/CC,MAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAJyC;AAK/Cd,MAAAA,YAAY,EAAEW,UALiC;AAM/CR,MAAAA,kBAAkB,+BAAMA,kBAAN,IAA0BS,UAAU,GAAGE,CAAb,GAAiB,CAA3C,EAN6B;AAO/CZ,MAAAA,IAAI,EAAEI;AAPyC,KAAD,CAAhD;;AAUA,QAAIS,MAAM,CAAChB,IAAX,EAAiB;AACf,aAAOgB,MAAP;AACD;;AAEDJ,IAAAA,UAAU,GAAGI,MAAM,CAACL,SAApB;AACD,GAxCA,CA0CD;;;AACA,SAAO;AAAEA,IAAAA,SAAS,EAAEC;AAAb,GAAP;AACD;;AAED,OAAO,SAASK,kBAAT,QAA8D;AAAA,MAAhCjB,IAAgC,SAAhCA,IAAgC;AAAA,oCAA1BK,eAA0B;AAAA,MAA1BA,eAA0B,sCAAR,IAAQ;AACnE,SACEP,iCAAiC,CAAC;AAChCI,IAAAA,UAAU,EAAE,sBAAM,CAAE,CADY;AAEhCG,IAAAA,eAAe,EAAfA,eAFgC;AAGhCL,IAAAA,IAAI,EAAJA,IAHgC;AAIhCC,IAAAA,YAAY,EAAE,CAJkB;AAKhCF,IAAAA,WAAW,EAAE,CAAC;AALkB,GAAD,CAAjC,CAMGY,SANH,GAMe,CAPjB;AASD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASO,eAAT,QAUG;AAAA,MATDC,QASC,SATDA,QASC;AAAA,MARDjB,UAQC,SARDA,UAQC;AAAA,MAPDG,eAOC,SAPDA,eAOC;AAAA,iCANDC,YAMC;AAAA,MANDA,YAMC,mCANc,KAMd;AAAA,MALDN,IAKC,SALDA,IAKC;AAAA,+BAJDoB,UAIC;AAAA,MAJDA,UAIC,iCAJY,IAIZ;AAAA,MAHDnB,YAGC,SAHDA,YAGC;AAAA,yBAFDE,IAEC;AAAA,MAFDA,IAEC,2BAFM,EAEN;AAAA,oCADDC,kBACC;AAAA,MADDA,kBACC,sCADoB,EACpB;AACD;AACA,MAAMG,QAAQ,GAAGD,YAAY,GACzB,EADyB,gCAErBH,IAFqB,IAEfD,UAAU,CAAC;AAAEF,IAAAA,IAAI,EAAJA,IAAF;AAAQQ,IAAAA,SAAS,EAAEP;AAAnB,GAAD,CAFK,EAA7B;AAGA,MAAMoB,QAAQ,GAAGf,YAAY,GACzB,IADyB,GAEzB;AACEN,IAAAA,IAAI,EAAJA,IADF;AAEEoB,IAAAA,UAAU,EAAVA,UAFF;AAGEjB,IAAAA,IAAI,EAAEI,QAHR;AAIEH,IAAAA,kBAAkB,EAAlBA,kBAJF;AAKEI,IAAAA,SAAS,EAAEP;AALb,GAFJ;;AAUA,MAAI,CAACK,YAAL,EAAmB;AACjB,QAAMgB,cAAc,GAAGH,QAAQ,CAACE,QAAD,CAA/B,CADiB,CAGjB;;AACA,QAAIC,cAAc,KAAK,KAAvB,EAA8B;AAC5B,aAAO,KAAP;AACD;AACF,GAtBA,CAwBD;;;AACA,MACE,CAACtB,IAAI,CAACS,QAAN,IACCT,IAAI,CAACU,QAAL,KAAkB,IAAlB,IAA0BL,eAA1B,IAA6C,CAACC,YAFjD,EAGE;AACA,WAAOL,YAAP;AACD,GA9BA,CAgCD;;;AACA,MAAIW,UAAU,GAAGX,YAAjB;AACA,MAAMY,UAAU,GAAGb,IAAI,CAACS,QAAL,CAAcK,MAAjC;;AACA,MAAI,OAAOd,IAAI,CAACS,QAAZ,KAAyB,UAA7B,EAAyC;AACvC,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtCH,MAAAA,UAAU,GAAGM,eAAe,CAAC;AAC3BC,QAAAA,QAAQ,EAARA,QAD2B;AAE3BjB,QAAAA,UAAU,EAAVA,UAF2B;AAG3BG,QAAAA,eAAe,EAAfA,eAH2B;AAI3BL,QAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAJqB;AAK3BK,QAAAA,UAAU,EAAEd,YAAY,GAAG,IAAH,GAAUN,IALP;AAM3BC,QAAAA,YAAY,EAAEW,UAAU,GAAG,CANA;AAO3BR,QAAAA,kBAAkB,+BAAMA,kBAAN,IAA0BS,UAAU,GAAGE,CAAb,GAAiB,CAA3C,EAPS;AAQ3BZ,QAAAA,IAAI,EAAEI;AARqB,OAAD,CAA5B,CADsC,CAYtC;;AACA,UAAIK,UAAU,KAAK,KAAnB,EAA0B;AACxB,eAAO,KAAP;AACD;AACF;AACF;;AAED,SAAOA,UAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASW,cAAT,QAUG;AAAA,MATDJ,QASC,SATDA,QASC;AAAA,MARDjB,UAQC,SARDA,UAQC;AAAA,MAPDG,eAOC,SAPDA,eAOC;AAAA,iCANDC,YAMC;AAAA,MANDA,YAMC,mCANc,KAMd;AAAA,MALDN,IAKC,SALDA,IAKC;AAAA,+BAJDoB,UAIC;AAAA,MAJDA,UAIC,iCAJY,IAIZ;AAAA,MAHDnB,YAGC,SAHDA,YAGC;AAAA,yBAFDE,IAEC;AAAA,MAFDA,IAEC,2BAFM,EAEN;AAAA,oCADDC,kBACC;AAAA,MADDA,kBACC,sCADoB,EACpB;;AACD,MAAMoB,QAAQ,qBAAQxB,IAAR,CAAd,CADC,CAGD;;;AACA,MAAMO,QAAQ,GAAGD,YAAY,GACzB,EADyB,gCAErBH,IAFqB,IAEfD,UAAU,CAAC;AAAEF,IAAAA,IAAI,EAAEwB,QAAR;AAAkBhB,IAAAA,SAAS,EAAEP;AAA7B,GAAD,CAFK,EAA7B;AAGA,MAAMoB,QAAQ,GAAG;AACfrB,IAAAA,IAAI,EAAEwB,QADS;AAEfJ,IAAAA,UAAU,EAAVA,UAFe;AAGfjB,IAAAA,IAAI,EAAEI,QAHS;AAIfH,IAAAA,kBAAkB,EAAlBA,kBAJe;AAKfI,IAAAA,SAAS,EAAEP;AALI,GAAjB,CAPC,CAeD;;AACA,MACE,CAACuB,QAAQ,CAACf,QAAV,IACCe,QAAQ,CAACd,QAAT,KAAsB,IAAtB,IAA8BL,eAA9B,IAAiD,CAACC,YAFrD,EAGE;AACA,WAAO;AACLE,MAAAA,SAAS,EAAEP,YADN;AAELD,MAAAA,IAAI,EAAEmB,QAAQ,CAACE,QAAD;AAFT,KAAP;AAID,GAxBA,CA0BD;;;AACA,MAAIT,UAAU,GAAGX,YAAjB;AACA,MAAMY,UAAU,GAAGW,QAAQ,CAACf,QAAT,CAAkBK,MAArC;;AACA,MAAI,OAAOU,QAAQ,CAACf,QAAhB,KAA6B,UAAjC,EAA6C;AAC3Ce,IAAAA,QAAQ,CAACf,QAAT,GAAoBe,QAAQ,CAACf,QAAT,CAAkBgB,GAAlB,CAAsB,UAACC,KAAD,EAAQX,CAAR,EAAc;AACtD,UAAMY,SAAS,GAAGJ,cAAc,CAAC;AAC/BJ,QAAAA,QAAQ,EAARA,QAD+B;AAE/BjB,QAAAA,UAAU,EAAVA,UAF+B;AAG/BG,QAAAA,eAAe,EAAfA,eAH+B;AAI/BL,QAAAA,IAAI,EAAE0B,KAJyB;AAK/BN,QAAAA,UAAU,EAAEd,YAAY,GAAG,IAAH,GAAUkB,QALH;AAM/BvB,QAAAA,YAAY,EAAEW,UAAU,GAAG,CANI;AAO/BR,QAAAA,kBAAkB,+BAAMA,kBAAN,IAA0BS,UAAU,GAAGE,CAAb,GAAiB,CAA3C,EAPa;AAQ/BZ,QAAAA,IAAI,EAAEI;AARyB,OAAD,CAAhC;AAUAK,MAAAA,UAAU,GAAGe,SAAS,CAACnB,SAAvB;AAEA,aAAOmB,SAAS,CAAC3B,IAAjB;AACD,KAdmB,CAApB;AAeD;;AAED,SAAO;AACLA,IAAAA,IAAI,EAAEmB,QAAQ,CAACE,QAAD,CADT;AAELb,IAAAA,SAAS,EAAEI;AAFN,GAAP;AAID;AAED;;;;;;;;;AAOA,OAAO,SAASgB,mBAAT,QAA2C;AAAA,MAAZC,QAAY,SAAZA,QAAY;;AAChD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA9B,IAAI,EAAI;AACvB,QACE,CAACA,IAAI,CAACS,QAAN,IACAT,IAAI,CAACU,QAAL,KAAkB,IADlB,IAEA,OAAOV,IAAI,CAACS,QAAZ,KAAyB,UAH3B,EAIE;AACA,aAAO,CAAP;AACD;;AAED,WACE,IACAT,IAAI,CAACS,QAAL,CAAcsB,MAAd,CACE,UAACC,KAAD,EAAQC,WAAR;AAAA,aAAwBD,KAAK,GAAGF,QAAQ,CAACG,WAAD,CAAxC;AAAA,KADF,EAEE,CAFF,CAFF;AAOD,GAhBD;;AAkBA,SAAOJ,QAAQ,CAACE,MAAT,CACL,UAACC,KAAD,EAAQC,WAAR;AAAA,WAAwBD,KAAK,GAAGF,QAAQ,CAACG,WAAD,CAAxC;AAAA,GADK,EAEL,CAFK,CAAP;AAID;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,SAASC,yBAAT,QAIJ;AAAA,MAHDL,QAGC,SAHDA,QAGC;AAAA,MAFM9B,WAEN,SAFDoC,KAEC;AAAA,MADDjC,UACC,SADDA,UACC;;AACD,MAAI,CAAC2B,QAAD,IAAaA,QAAQ,CAACf,MAAT,GAAkB,CAAnC,EAAsC;AACpC,WAAO,IAAP;AACD,GAHA,CAKD;;;AACA,MAAME,MAAM,GAAGlB,iCAAiC,CAAC;AAC/CC,IAAAA,WAAW,EAAXA,WAD+C;AAE/CG,IAAAA,UAAU,EAAVA,UAF+C;AAG/CF,IAAAA,IAAI,EAAE;AACJS,MAAAA,QAAQ,EAAEoB,QADN;AAEJnB,MAAAA,QAAQ,EAAE;AAFN,KAHyC;AAO/CT,IAAAA,YAAY,EAAE,CAAC,CAPgC;AAQ/CE,IAAAA,IAAI,EAAE,EARyC;AAS/CC,IAAAA,kBAAkB,EAAE,EAT2B;AAU/CE,IAAAA,YAAY,EAAE;AAViC,GAAD,CAAhD;;AAaA,MAAIU,MAAM,CAAChB,IAAX,EAAiB;AACf,WAAOgB,MAAP;AACD;;AAED,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,SAASoB,IAAT,QAKJ;AAAA,MAJDP,QAIC,SAJDA,QAIC;AAAA,MAHD3B,UAGC,SAHDA,UAGC;AAAA,MAFDiB,QAEC,SAFDA,QAEC;AAAA,oCADDd,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;;AACD,MAAI,CAACwB,QAAD,IAAaA,QAAQ,CAACf,MAAT,GAAkB,CAAnC,EAAsC;AACpC;AACD;;AAEDI,EAAAA,eAAe,CAAC;AACdC,IAAAA,QAAQ,EAARA,QADc;AAEdjB,IAAAA,UAAU,EAAVA,UAFc;AAGdG,IAAAA,eAAe,EAAfA,eAHc;AAIdC,IAAAA,YAAY,EAAE,IAJA;AAKdN,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEoB;AAAZ,KALQ;AAMd5B,IAAAA,YAAY,EAAE,CAAC,CAND;AAOdE,IAAAA,IAAI,EAAE,EAPQ;AAQdC,IAAAA,kBAAkB,EAAE;AARN,GAAD,CAAf;AAUD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAO,SAASqB,GAAT,QAKJ;AAAA,MAJDI,QAIC,SAJDA,QAIC;AAAA,MAHD3B,UAGC,SAHDA,UAGC;AAAA,MAFDiB,QAEC,SAFDA,QAEC;AAAA,oCADDd,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;;AACD,MAAI,CAACwB,QAAD,IAAaA,QAAQ,CAACf,MAAT,GAAkB,CAAnC,EAAsC;AACpC,WAAO,EAAP;AACD;;AAED,SAAOS,cAAc,CAAC;AACpBJ,IAAAA,QAAQ,EAARA,QADoB;AAEpBjB,IAAAA,UAAU,EAAVA,UAFoB;AAGpBG,IAAAA,eAAe,EAAfA,eAHoB;AAIpBC,IAAAA,YAAY,EAAE,IAJM;AAKpBN,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEoB;AAAZ,KALc;AAMpB5B,IAAAA,YAAY,EAAE,CAAC,CANK;AAOpBE,IAAAA,IAAI,EAAE,EAPc;AAQpBC,IAAAA,kBAAkB,EAAE;AARA,GAAD,CAAd,CASJJ,IATI,CASCS,QATR;AAUD;AAED;;;;;;;;;;;;;;;;;;;;AAQA,OAAO,SAAS4B,oBAAT,QAA6D;AAAA,MAA7BR,QAA6B,SAA7BA,QAA6B;AAAA,6BAAnBnB,QAAmB;AAAA,MAAnBA,QAAmB,+BAAR,IAAQ;AAClE,SAAOe,GAAG,CAAC;AACTI,IAAAA,QAAQ,EAARA,QADS;AAETV,IAAAA,QAAQ,EAAE;AAAA,UAAGnB,IAAH,UAAGA,IAAH;AAAA,+BAAoBA,IAApB;AAA0BU,QAAAA,QAAQ,EAARA;AAA1B;AAAA,KAFD;AAGTR,IAAAA,UAAU,EAAE;AAAA,UAAGM,SAAH,UAAGA,SAAH;AAAA,aAAmBA,SAAnB;AAAA,KAHH;AAITH,IAAAA,eAAe,EAAE;AAJR,GAAD,CAAV;AAMD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAO,SAASiC,gBAAT,SAMJ;AAAA,MALDT,QAKC,UALDA,QAKC;AAAA,MAJD1B,IAIC,UAJDA,IAIC;AAAA,MAHDoC,OAGC,UAHDA,OAGC;AAAA,MAFDrC,UAEC,UAFDA,UAEC;AAAA,qCADDG,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;AACD,MAAMmC,WAAW,GAAG,aAApB;;AACA,MAAMV,QAAQ,GAAG,SAAXA,QAAW,SAKX;AAAA,qCAJJxB,YAII;AAAA,QAJJA,YAII,oCAJW,KAIX;AAAA,QAHJN,IAGI,UAHJA,IAGI;AAAA,QAFJyC,gBAEI,UAFJA,gBAEI;AAAA,QADJC,SACI,UADJA,SACI;;AACJ,QACE,CAACpC,YAAD,IACAJ,UAAU,CAAC;AAAEF,MAAAA,IAAI,EAAJA,IAAF;AAAQQ,MAAAA,SAAS,EAAEiC;AAAnB,KAAD,CAAV,KAAsDtC,IAAI,CAACuC,SAAD,CAF5D,EAGE;AACA,aAAOF,WAAP;AACD;;AAED,QAAIE,SAAS,IAAIvC,IAAI,CAACW,MAAL,GAAc,CAA/B,EAAkC;AAChC;AACA,aAAO,OAAOyB,OAAP,KAAmB,UAAnB,GACHA,OAAO,CAAC;AAAEvC,QAAAA,IAAI,EAAJA,IAAF;AAAQQ,QAAAA,SAAS,EAAEiC;AAAnB,OAAD,CADJ,GAEHF,OAFJ;AAGD;;AACD,QAAI,CAACvC,IAAI,CAACS,QAAV,EAAoB;AAClB;AACA,YAAM,IAAIkC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAIC,aAAa,GAAGH,gBAAgB,GAAG,CAAvC;;AACA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAAI,CAACS,QAAL,CAAcK,MAAlC,EAA0CC,CAAC,IAAI,CAA/C,EAAkD;AAChD,UAAMC,OAAM,GAAGc,QAAQ,CAAC;AACtB9B,QAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CADgB;AAEtB0B,QAAAA,gBAAgB,EAAEG,aAFI;AAGtBF,QAAAA,SAAS,EAAEA,SAAS,GAAG;AAHD,OAAD,CAAvB,CADgD,CAOhD;;;AACA,UAAI1B,OAAM,KAAKwB,WAAf,EAA4B;AAC1B,YAAIxB,OAAJ,EAAY;AACV;AACA;AACA,mCACKhB,IADL;AAEES,YAAAA,QAAQ,+BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,EAAuB9B,CAAvB,CADG,IAENC,OAFM,sBAGHhB,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB9B,CAAC,GAAG,CAAxB,CAHG;AAFV;AAQD,SAZyB,CAa1B;AACA;;;AACA,iCACKf,IADL;AAEES,UAAAA,QAAQ,+BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,EAAuB9B,CAAvB,CADG,sBAEHf,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB9B,CAAC,GAAG,CAAxB,CAFG;AAFV;AAOD;;AAED6B,MAAAA,aAAa,IACX,IAAI3B,kBAAkB,CAAC;AAAEjB,QAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAAR;AAA0BV,QAAAA,eAAe,EAAfA;AAA1B,OAAD,CADxB;AAED;;AAED,WAAOmC,WAAP;AACD,GA9DD,CAFC,CAkED;;;AACA,MAAMxB,MAAM,GAAGc,QAAQ,CAAC;AACtB9B,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEoB;AAAZ,KADgB;AAEtBY,IAAAA,gBAAgB,EAAE,CAAC,CAFG;AAGtBC,IAAAA,SAAS,EAAE,CAAC,CAHU;AAItBpC,IAAAA,YAAY,EAAE;AAJQ,GAAD,CAAvB;;AAOA,MAAIU,MAAM,KAAKwB,WAAf,EAA4B;AAC1B,UAAM,IAAIG,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,SAAO3B,MAAM,CAACP,QAAd;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,SAASqC,gBAAT,SAKJ;AAAA,MAJDjB,QAIC,UAJDA,QAIC;AAAA,MAHD1B,IAGC,UAHDA,IAGC;AAAA,MAFDD,UAEC,UAFDA,UAEC;AAAA,qCADDG,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;AACD,SAAOiC,gBAAgB,CAAC;AACtBT,IAAAA,QAAQ,EAARA,QADsB;AAEtB1B,IAAAA,IAAI,EAAJA,IAFsB;AAGtBD,IAAAA,UAAU,EAAVA,UAHsB;AAItBG,IAAAA,eAAe,EAAfA,eAJsB;AAKtBkC,IAAAA,OAAO,EAAE,IALa,CAKR;;AALQ,GAAD,CAAvB;AAOD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,SAASQ,UAAT,SAKJ;AAAA,MAJDlB,QAIC,UAJDA,QAIC;AAAA,MAHD1B,IAGC,UAHDA,IAGC;AAAA,MAFDD,UAEC,UAFDA,UAEC;AAAA,qCADDG,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;AACD,MAAI2C,WAAW,GAAG,IAAlB;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAMC,YAAY,GAAGZ,gBAAgB,CAAC;AACpCT,IAAAA,QAAQ,EAARA,QADoC;AAEpC1B,IAAAA,IAAI,EAAJA,IAFoC;AAGpCD,IAAAA,UAAU,EAAVA,UAHoC;AAIpCG,IAAAA,eAAe,EAAfA,eAJoC;AAKpCkC,IAAAA,OAAO,EAAE,yBAAyB;AAAA,UAAtBvC,IAAsB,UAAtBA,IAAsB;AAAA,UAAhBQ,SAAgB,UAAhBA,SAAgB;AAChC;AACAwC,MAAAA,WAAW,GAAGhD,IAAd;AACAiD,MAAAA,gBAAgB,GAAGzC,SAAnB;AAEA,aAAO,IAAP;AACD;AAXmC,GAAD,CAArC;AAcA,SAAO;AACLqB,IAAAA,QAAQ,EAAEqB,YADL;AAELlD,IAAAA,IAAI,EAAEgD,WAFD;AAGLxC,IAAAA,SAAS,EAAEyC;AAHN,GAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAO,SAASE,aAAT,SAKJ;AAAA,MAJDtB,QAIC,UAJDA,QAIC;AAAA,MAHD1B,IAGC,UAHDA,IAGC;AAAA,MAFDD,UAEC,UAFDA,UAEC;AAAA,qCADDG,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;AACD,MAAI+C,aAAa,GAAG,IAApB;;AAEA,MAAI;AACFd,IAAAA,gBAAgB,CAAC;AACfT,MAAAA,QAAQ,EAARA,QADe;AAEf1B,MAAAA,IAAI,EAAJA,IAFe;AAGfD,MAAAA,UAAU,EAAVA,UAHe;AAIfG,MAAAA,eAAe,EAAfA,eAJe;AAKfkC,MAAAA,OAAO,EAAE,yBAAyB;AAAA,YAAtBvC,IAAsB,UAAtBA,IAAsB;AAAA,YAAhBQ,SAAgB,UAAhBA,SAAgB;AAChC4C,QAAAA,aAAa,GAAG;AAAEpD,UAAAA,IAAI,EAAJA,IAAF;AAAQQ,UAAAA,SAAS,EAATA;AAAR,SAAhB;AACA,eAAOR,IAAP;AACD;AARc,KAAD,CAAhB;AAUD,GAXD,CAWE,OAAOqD,GAAP,EAAY,CACZ;AACD;;AAED,SAAOD,aAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,OAAO,SAASE,kBAAT,SAQJ;AAAA,MAPDzB,QAOC,UAPDA,QAOC;AAAA,MANDU,OAMC,UANDA,OAMC;AAAA,gCALDgB,SAKC;AAAA,MALDA,SAKC,iCALW,IAKX;AAAA,MAJDrD,UAIC,UAJDA,UAIC;AAAA,qCAHDG,eAGC;AAAA,MAHDA,eAGC,sCAHiB,IAGjB;AAAA,mCAFDmD,YAEC;AAAA,MAFDA,YAEC,oCAFc,KAEd;AAAA,qCADDC,eACC;AAAA,MADDA,eACC,sCADiB,KACjB;;AACD,MAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAO;AACL1B,MAAAA,QAAQ,+BAAOA,QAAQ,IAAI,EAAnB,IAAwBU,OAAxB,EADH;AAEL/B,MAAAA,SAAS,EAAE,CAACqB,QAAQ,IAAI,EAAb,EAAiBf;AAFvB,KAAP;AAID;;AAED,MAAI4C,iBAAiB,GAAG,IAAxB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAMC,eAAe,GAAGnC,GAAG,CAAC;AAC1BI,IAAAA,QAAQ,EAARA,QAD0B;AAE1B3B,IAAAA,UAAU,EAAVA,UAF0B;AAG1BG,IAAAA,eAAe,EAAfA,eAH0B;AAI1Bc,IAAAA,QAAQ,EAAE,0BAA+B;AAAA,UAA5BnB,IAA4B,UAA5BA,IAA4B;AAAA,UAAtBQ,SAAsB,UAAtBA,SAAsB;AAAA,UAAXL,IAAW,UAAXA,IAAW;AACvC,UAAM0D,GAAG,GAAG1D,IAAI,GAAGA,IAAI,CAACA,IAAI,CAACW,MAAL,GAAc,CAAf,CAAP,GAA2B,IAA3C,CADuC,CAEvC;;AACA,UAAI6C,YAAY,IAAIE,GAAG,KAAKN,SAA5B,EAAuC;AACrC,eAAOvD,IAAP;AACD;;AACD2D,MAAAA,YAAY,GAAG,IAAf;;AAEA,UAAMvC,UAAU,qBACXpB,IADW,CAAhB;;AAIA,UAAIwD,YAAJ,EAAkB;AAChBpC,QAAAA,UAAU,CAACV,QAAX,GAAsB,IAAtB;AACD,OAdsC,CAgBvC;;;AACA,UAAI,CAACU,UAAU,CAACX,QAAhB,EAA0B;AACxBiD,QAAAA,iBAAiB,GAAGlD,SAAS,GAAG,CAAhC;AACA,iCACKY,UADL;AAEEX,UAAAA,QAAQ,EAAE,CAAC8B,OAAD;AAFZ;AAID;;AAED,UAAI,OAAOnB,UAAU,CAACX,QAAlB,KAA+B,UAAnC,EAA+C;AAC7C,cAAM,IAAIkC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,UAAIC,aAAa,GAAGpC,SAAS,GAAG,CAAhC;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACX,QAAX,CAAoBK,MAAxC,EAAgDC,CAAC,IAAI,CAArD,EAAwD;AACtD6B,QAAAA,aAAa,IACX,IACA3B,kBAAkB,CAAC;AAAEjB,UAAAA,IAAI,EAAEoB,UAAU,CAACX,QAAX,CAAoBM,CAApB,CAAR;AAAgCV,UAAAA,eAAe,EAAfA;AAAhC,SAAD,CAFpB;AAGD;;AAEDqD,MAAAA,iBAAiB,GAAGd,aAApB;AAEA,UAAMnC,QAAQ,GAAGgD,eAAe,IAC3BlB,OAD2B,4BACfnB,UAAU,CAACX,QADI,kCAExBW,UAAU,CAACX,QAFa,IAEH8B,OAFG,EAAhC;AAIA,+BACKnB,UADL;AAEEX,QAAAA,QAAQ,EAARA;AAFF;AAID;AAlDyB,GAAD,CAA3B;;AAqDA,MAAI,CAACkD,YAAL,EAAmB;AACjB,UAAM,IAAIhB,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,SAAO;AACLd,IAAAA,QAAQ,EAAE+B,eADL;AAELpD,IAAAA,SAAS,EAAEkD;AAFN,GAAP;AAID;;;;;;;;;;;;;AAED,SAASI,sBAAT,SAaG;AAAA,MAZDC,WAYC,UAZDA,WAYC;AAAA,MAXDC,gBAWC,UAXDA,gBAWC;AAAA,MAVDzB,OAUC,UAVDA,OAUC;AAAA,MATDlC,eASC,UATDA,eASC;AAAA,MARDmD,YAQC,UARDA,YAQC;AAAA,mCAPDlD,YAOC;AAAA,MAPDA,YAOC,oCAPc,KAOd;AAAA,MAND2D,WAMC,UANDA,WAMC;AAAA,MALDjE,IAKC,UALDA,IAKC;AAAA,MAJDC,YAIC,UAJDA,YAIC;AAAA,MAHDiE,YAGC,UAHDA,YAGC;AAAA,MAFDhE,UAEC,UAFDA,UAEC;AAAA,2BADDC,IACC;AAAA,MADDA,IACC,4BADM,EACN;;AACD,MAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAA4D,CAAC;AAAA,WAChB7D,YAAY,GACR,EADQ,gCAEJH,IAFI,IAEED,UAAU,CAAC;AAAEF,MAAAA,IAAI,EAAEmE,CAAR;AAAW3D,MAAAA,SAAS,EAAEP;AAAtB,KAAD,CAFZ,EADI;AAAA,GAAlB,CADC,CAMD;;;AACA,MACEA,YAAY,IAAI+D,gBAAgB,GAAG,CAAnC,IACCC,WAAW,IAAI,EAAEjE,IAAI,CAACS,QAAL,IAAiBT,IAAI,CAACS,QAAL,CAAcK,MAAjC,CAFlB,EAGE;AACA,QAAI,OAAOd,IAAI,CAACS,QAAZ,KAAyB,UAA7B,EAAyC;AACvC,YAAM,IAAIkC,KAAJ,CAAU,8CAAV,CAAN;AACD,KAFD,MAEO;AACL,UAAMyB,cAAc,GAAGZ,YAAY,GAAG;AAAE9C,QAAAA,QAAQ,EAAE;AAAZ,OAAH,GAAwB,EAA3D;;AACA,UAAMc,SAAQ,qBACTxB,IADS,EAGToE,cAHS;AAIZ3D,QAAAA,QAAQ,EAAET,IAAI,CAACS,QAAL,IAAiB8B,OAAjB,4BAA6BvC,IAAI,CAACS,QAAlC,KAA8C,CAAC8B,OAAD;AAJ5C,QAAd;;AAOA,aAAO;AACLvC,QAAAA,IAAI,EAAEwB,SADD;AAELb,QAAAA,SAAS,EAAEV,YAAY,GAAG,CAFrB;AAGLyD,QAAAA,iBAAiB,EAAEzD,YAAY,GAAG,CAH7B;AAILoE,QAAAA,UAAU,EAAE9D,QAAQ,CAACiB,SAAD,CAJf;AAKLJ,QAAAA,UAAU,EAAEd,YAAY,GAAG,IAAH,GAAUkB;AAL7B,OAAP;AAOD;AACF,GA9BA,CAgCD;AACA;;;AACA,MAAI0C,YAAY,IAAIH,WAAW,GAAG,CAAlC,EAAqC;AACnC;AACA,QACE,CAAC/D,IAAI,CAACS,QAAN,IACA,OAAOT,IAAI,CAACS,QAAZ,KAAyB,UADzB,IAECT,IAAI,CAACU,QAAL,KAAkB,IAAlB,IAA0BL,eAA1B,IAA6C,CAACC,YAHjD,EAIE;AACA,aAAO;AAAEN,QAAAA,IAAI,EAAJA,IAAF;AAAQW,QAAAA,SAAS,EAAEV,YAAY,GAAG;AAAlC,OAAP;AACD,KARkC,CAUnC;AACA;;;AACA,QAAIW,WAAU,GAAGX,YAAY,GAAG,CAAhC;;AACA,QAAIyD,kBAAiB,GAAG,IAAxB;AACA,QAAIY,WAAW,GAAG,IAAlB;;AACA,SAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAAI,CAACS,QAAL,CAAcK,MAAlC,EAA0CC,CAAC,IAAI,CAA/C,EAAkD;AAChD;AACA;AACA,UAAIH,WAAU,IAAIoD,gBAAlB,EAAoC;AAClCN,QAAAA,kBAAiB,GAAG9C,WAApB;AACA0D,QAAAA,WAAW,GAAGvD,CAAd;AACA;AACD,OAP+C,CAShD;;;AACAH,MAAAA,WAAU,IACR,IAAIK,kBAAkB,CAAC;AAAEjB,QAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,CAAcM,CAAd,CAAR;AAA0BV,QAAAA,eAAe,EAAfA;AAA1B,OAAD,CADxB;AAED,KA3BkC,CA6BnC;;;AACA,QAAIiE,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACA,UAAI1D,WAAU,GAAGoD,gBAAb,IAAiC,CAACC,WAAtC,EAAmD;AACjD,eAAO;AAAEjE,UAAAA,IAAI,EAAJA,IAAF;AAAQW,UAAAA,SAAS,EAAEC;AAAnB,SAAP;AACD,OALuB,CAOxB;;;AACA8C,MAAAA,kBAAiB,GAAG9C,WAApB;AACA0D,MAAAA,WAAW,GAAGtE,IAAI,CAACS,QAAL,CAAcK,MAA5B;AACD,KAxCkC,CA0CnC;;;AACA,QAAMU,UAAQ,qBACTxB,IADS;AAEZS,MAAAA,QAAQ,+BACHT,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoB,CAApB,EAAuByB,WAAvB,CADG,IAEN/B,OAFM,sBAGHvC,IAAI,CAACS,QAAL,CAAcoC,KAAd,CAAoByB,WAApB,CAHG;AAFI,MAAd,CA3CmC,CAoDnC;;;AACA,WAAO;AACLtE,MAAAA,IAAI,EAAEwB,UADD;AAELb,MAAAA,SAAS,EAAEC,WAFN;AAGL8C,MAAAA,iBAAiB,EAAjBA,kBAHK;AAILW,MAAAA,UAAU,EAAE9D,QAAQ,CAACiB,UAAD,CAJf;AAKLJ,MAAAA,UAAU,EAAEd,YAAY,GAAG,IAAH,GAAUkB;AAL7B,KAAP;AAOD,GA9FA,CAgGD;;;AACA,MACE,CAACxB,IAAI,CAACS,QAAN,IACA,OAAOT,IAAI,CAACS,QAAZ,KAAyB,UADzB,IAECT,IAAI,CAACU,QAAL,KAAkB,IAAlB,IAA0BL,eAA1B,IAA6C,CAACC,YAHjD,EAIE;AACA,WAAO;AAAEN,MAAAA,IAAI,EAAJA,IAAF;AAAQW,MAAAA,SAAS,EAAEV,YAAY,GAAG;AAAlC,KAAP;AACD,GAvGA,CAyGD;;;AACA,MAAIyD,iBAAiB,GAAG,IAAxB;AACA,MAAIa,YAAY,GAAG,IAAnB;AACA,MAAInD,UAAU,GAAG,IAAjB;AACA,MAAIR,UAAU,GAAGX,YAAY,GAAG,CAAhC;AACA,MAAIuE,WAAW,GAAGxE,IAAI,CAACS,QAAvB;;AACA,MAAI,OAAO+D,WAAP,KAAuB,UAA3B,EAAuC;AACrCA,IAAAA,WAAW,GAAGA,WAAW,CAAC/C,GAAZ,CAAgB,UAACC,KAAD,EAAQX,CAAR,EAAc;AAC1C,UAAI2C,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,eAAOhC,KAAP;AACD;;AAED,UAAMC,SAAS,GAAGmC,sBAAsB,CAAC;AACvCC,QAAAA,WAAW,EAAXA,WADuC;AAEvCC,QAAAA,gBAAgB,EAAhBA,gBAFuC;AAGvCzB,QAAAA,OAAO,EAAPA,OAHuC;AAIvClC,QAAAA,eAAe,EAAfA,eAJuC;AAKvCmD,QAAAA,YAAY,EAAZA,YALuC;AAMvCS,QAAAA,WAAW,EAAEA,WAAW,IAAIlD,CAAC,KAAKyD,WAAW,CAAC1D,MAAZ,GAAqB,CANhB;AAOvCd,QAAAA,IAAI,EAAE0B,KAPiC;AAQvCzB,QAAAA,YAAY,EAAEW,UARyB;AASvCsD,QAAAA,YAAY,EAAEA,YAAY,GAAG,CATU;AAUvChE,QAAAA,UAAU,EAAVA,UAVuC;AAWvCC,QAAAA,IAAI,EAAE,EAXiC,CAW9B;;AAX8B,OAAD,CAAxC;;AAcA,UAAI,uBAAuBwB,SAA3B,EAAsC;AAElC+B,QAAAA,iBAFkC,GAKhC/B,SALgC,CAElC+B,iBAFkC;AAGlCtC,QAAAA,UAHkC,GAKhCO,SALgC,CAGlCP,UAHkC;AAItBmD,QAAAA,YAJsB,GAKhC5C,SALgC,CAIlC0C,UAJkC;AAMrC;;AAEDzD,MAAAA,UAAU,GAAGe,SAAS,CAAChB,SAAvB;AAEA,aAAOgB,SAAS,CAAC3B,IAAjB;AACD,KA9Ba,CAAd;AA+BD;;AAED,MAAMwB,QAAQ,qBAAQxB,IAAR;AAAcS,IAAAA,QAAQ,EAAE+D;AAAxB,IAAd;;AACA,MAAMxD,MAAM,GAAG;AACbhB,IAAAA,IAAI,EAAEwB,QADO;AAEbb,IAAAA,SAAS,EAAEC;AAFE,GAAf;;AAKA,MAAI8C,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B1C,IAAAA,MAAM,CAAC0C,iBAAP,GAA2BA,iBAA3B;AACA1C,IAAAA,MAAM,CAACqD,UAAP,gCAAwB9D,QAAQ,CAACiB,QAAD,CAAhC,sBAA+C+C,YAA/C;AACAvD,IAAAA,MAAM,CAACI,UAAP,GAAoBA,UAApB;AACD;;AAED,SAAOJ,MAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASyD,UAAT,SAQJ;AAAA,MAPD5C,QAOC,UAPDA,QAOC;AAAA,MANMkC,WAMN,UANDW,KAMC;AAAA,MALDV,gBAKC,UALDA,gBAKC;AAAA,MAJDzB,OAIC,UAJDA,OAIC;AAAA,iCAHDrC,UAGC;AAAA,MAHDA,UAGC,kCAHY,YAAM,CAAE,CAGpB;AAAA,qCAFDG,eAEC;AAAA,MAFDA,eAEC,sCAFiB,IAEjB;AAAA,mCADDmD,YACC;AAAA,MADDA,YACC,oCADc,KACd;;AACD,MAAI,CAAC3B,QAAD,IAAakC,WAAW,KAAK,CAAjC,EAAoC;AAClC,WAAO;AACLlC,MAAAA,QAAQ,EAAE,CAACU,OAAD,CADL;AAEL/B,MAAAA,SAAS,EAAE,CAFN;AAGLL,MAAAA,IAAI,EAAE,CAACD,UAAU,CAAC;AAAEF,QAAAA,IAAI,EAAEuC,OAAR;AAAiB/B,QAAAA,SAAS,EAAE;AAA5B,OAAD,CAAX,CAHD;AAILY,MAAAA,UAAU,EAAE;AAJP,KAAP;AAMD;;AAED,MAAMuD,YAAY,GAAGb,sBAAsB,CAAC;AAC1CC,IAAAA,WAAW,EAAXA,WAD0C;AAE1CC,IAAAA,gBAAgB,EAAhBA,gBAF0C;AAG1CzB,IAAAA,OAAO,EAAPA,OAH0C;AAI1ClC,IAAAA,eAAe,EAAfA,eAJ0C;AAK1CmD,IAAAA,YAAY,EAAZA,YAL0C;AAM1CtD,IAAAA,UAAU,EAAVA,UAN0C;AAO1CI,IAAAA,YAAY,EAAE,IAP4B;AAQ1C2D,IAAAA,WAAW,EAAE,IAR6B;AAS1CjE,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEoB;AAAZ,KAToC;AAU1C5B,IAAAA,YAAY,EAAE,CAAC,CAV2B;AAW1CiE,IAAAA,YAAY,EAAE,CAAC;AAX2B,GAAD,CAA3C;;AAcA,MAAI,EAAE,uBAAuBS,YAAzB,CAAJ,EAA4C;AAC1C,UAAM,IAAIhC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,MAAMnC,SAAS,GAAGmE,YAAY,CAACjB,iBAA/B;AACA,SAAO;AACL7B,IAAAA,QAAQ,EAAE8C,YAAY,CAAC3E,IAAb,CAAkBS,QADvB;AAELD,IAAAA,SAAS,EAATA,SAFK;AAGLL,IAAAA,IAAI,+BACCwE,YAAY,CAACN,UADd,IAEFnE,UAAU,CAAC;AAAEF,MAAAA,IAAI,EAAEuC,OAAR;AAAiB/B,MAAAA,SAAS,EAATA;AAAjB,KAAD,CAFR,EAHC;AAOLY,IAAAA,UAAU,EAAEuD,YAAY,CAACvD;AAPpB,GAAP;AASD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAO,SAASwD,mBAAT,SAIJ;AAAA,MAHD/C,QAGC,UAHDA,QAGC;AAAA,MAFD3B,UAEC,UAFDA,UAEC;AAAA,qCADDG,eACC;AAAA,MADDA,eACC,sCADiB,IACjB;;AACD,MAAI,CAACwB,QAAD,IAAaA,QAAQ,CAACf,MAAT,GAAkB,CAAnC,EAAsC;AACpC,WAAO,EAAP;AACD;;AAED,MAAM+D,SAAS,GAAG,EAAlB;AACAzC,EAAAA,IAAI,CAAC;AACHP,IAAAA,QAAQ,EAARA,QADG;AAEH3B,IAAAA,UAAU,EAAVA,UAFG;AAGHG,IAAAA,eAAe,EAAfA,eAHG;AAIHc,IAAAA,QAAQ,EAAE,kBAAA2D,QAAQ,EAAI;AACpBD,MAAAA,SAAS,CAACE,IAAV,CAAeD,QAAf;AACD;AANE,GAAD,CAAJ;AASA,SAAOD,SAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAO,SAASG,mBAAT,SAKJ;AAAA,MAJDC,QAIC,UAJDA,QAIC;AAAA,6BAHDC,MAGC;AAAA,MAHDA,MAGC,8BAHQ,UAAAlF,IAAI;AAAA,WAAIA,IAAI,CAACmF,EAAT;AAAA,GAGZ;AAAA,mCAFDC,YAEC;AAAA,MAFDA,YAEC,oCAFc,UAAApF,IAAI;AAAA,WAAIA,IAAI,CAACqF,QAAT;AAAA,GAElB;AAAA,8BADDC,OACC;AAAA,MADDA,OACC,+BADS,GACT;;AACD,MAAI,CAACL,QAAL,EAAe;AACb,WAAO,EAAP;AACD;;AAED,MAAMM,iBAAiB,GAAG,EAA1B;AACAN,EAAAA,QAAQ,CAACO,OAAT,CAAiB,UAAA9D,KAAK,EAAI;AACxB,QAAM6B,SAAS,GAAG6B,YAAY,CAAC1D,KAAD,CAA9B;;AAEA,QAAI6B,SAAS,IAAIgC,iBAAjB,EAAoC;AAClCA,MAAAA,iBAAiB,CAAChC,SAAD,CAAjB,CAA6BwB,IAA7B,CAAkCrD,KAAlC;AACD,KAFD,MAEO;AACL6D,MAAAA,iBAAiB,CAAChC,SAAD,CAAjB,GAA+B,CAAC7B,KAAD,CAA/B;AACD;AACF,GARD;;AAUA,MAAI,EAAE4D,OAAO,IAAIC,iBAAb,CAAJ,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,MAAME,IAAI,GAAG,SAAPA,IAAO,CAAAC,MAAM,EAAI;AACrB,QAAMnC,SAAS,GAAG2B,MAAM,CAACQ,MAAD,CAAxB;;AACA,QAAInC,SAAS,IAAIgC,iBAAjB,EAAoC;AAClC,+BACKG,MADL;AAEEjF,QAAAA,QAAQ,EAAE8E,iBAAiB,CAAChC,SAAD,CAAjB,CAA6B9B,GAA7B,CAAiC,UAAAC,KAAK;AAAA,iBAAI+D,IAAI,CAAC/D,KAAD,CAAR;AAAA,SAAtC;AAFZ;AAID;;AAED,6BAAYgE,MAAZ;AACD,GAVD;;AAYA,SAAOH,iBAAiB,CAACD,OAAD,CAAjB,CAA2B7D,GAA3B,CAA+B,UAAAC,KAAK;AAAA,WAAI+D,IAAI,CAAC/D,KAAD,CAAR;AAAA,GAApC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAQA,OAAO,SAASiE,YAAT,CAAsBC,KAAtB,EAA6BC,OAA7B,EAAsC;AAC3C,SACE,CAAC,CAACD,KAAK,CAACnF,QAAR,IACA,OAAOmF,KAAK,CAACnF,QAAb,KAA0B,UAD1B,IAEAmF,KAAK,CAACnF,QAAN,CAAeqF,IAAf,CACE,UAAApE,KAAK;AAAA,WAAIA,KAAK,KAAKmE,OAAV,IAAqBF,YAAY,CAACjE,KAAD,EAAQmE,OAAR,CAArC;AAAA,GADP,CAHF;AAOD;AAED;;;;;;;;;;;;;;;;;;;;AAQA,OAAO,SAASE,QAAT,CAAkB/F,IAAlB,EAAmC;AAAA,MAAX0E,KAAW,uEAAH,CAAG;;AACxC,MAAI,CAAC1E,IAAI,CAACS,QAAV,EAAoB;AAClB,WAAOiE,KAAP;AACD;;AAED,MAAI,OAAO1E,IAAI,CAACS,QAAZ,KAAyB,UAA7B,EAAyC;AACvC,WAAOiE,KAAK,GAAG,CAAf;AACD;;AAED,SAAO1E,IAAI,CAACS,QAAL,CAAcsB,MAAd,CACL,UAACiE,OAAD,EAAUtE,KAAV;AAAA,WAAoBuE,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkBD,QAAQ,CAACrE,KAAD,EAAQgD,KAAK,GAAG,CAAhB,CAA1B,CAApB;AAAA,GADK,EAELA,KAFK,CAAP;AAID;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,OAAO,SAASyB,IAAT,SAQJ;AAAA,MAPDjG,UAOC,UAPDA,UAOC;AAAA,MAND2B,QAMC,UANDA,QAMC;AAAA,MALDuE,WAKC,UALDA,WAKC;AAAA,MAJDC,YAIC,UAJDA,YAIC;AAAA,MAHDC,iBAGC,UAHDA,iBAGC;AAAA,qCAFDC,mBAEC;AAAA,MAFDA,mBAEC,sCAFqB,KAErB;AAAA,qCADDC,qBACC;AAAA,MADDA,qBACC,sCADuB,IACvB;AACD,MAAIC,UAAU,GAAG,CAAjB;;AACA,MAAMhB,IAAI,GAAG,SAAPA,IAAO,SAA6D;AAAA,qCAA1DnF,YAA0D;AAAA,QAA1DA,YAA0D,oCAA3C,KAA2C;AAAA,QAApCN,IAAoC,UAApCA,IAAoC;AAAA,QAA9BC,YAA8B,UAA9BA,YAA8B;AAAA,6BAAhBE,IAAgB;AAAA,QAAhBA,IAAgB,4BAAT,EAAS;AACxE,QAAIuG,OAAO,GAAG,EAAd;AACA,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,aAAa,GAAG,KAApB,CAHwE,CAIxE;;AACA,QAAMrG,QAAQ,GAAGD,YAAY,GACzB,EADyB,gCAErBH,IAFqB,IAEfD,UAAU,CAAC;AAAEF,MAAAA,IAAI,EAAJA,IAAF;AAAQQ,MAAAA,SAAS,EAAEP;AAAnB,KAAD,CAFK,EAA7B;AAGA,QAAM4G,SAAS,GAAGvG,YAAY,GAC1B,IAD0B,GAE1B;AACEH,MAAAA,IAAI,EAAEI,QADR;AAEEC,MAAAA,SAAS,EAAEP;AAFb,KAFJ,CARwE,CAexE;;AACA,QAAM6G,WAAW,GACf9G,IAAI,CAACS,QAAL,IACA,OAAOT,IAAI,CAACS,QAAZ,KAAyB,UADzB,IAEAT,IAAI,CAACS,QAAL,CAAcK,MAAd,GAAuB,CAHzB,CAhBwE,CAqBxE;;AACA,QAAI,CAACR,YAAD,IAAiB+F,YAAY,mBAAMQ,SAAN;AAAiB7G,MAAAA,IAAI,EAAJA,IAAjB;AAAuBoG,MAAAA,WAAW,EAAXA;AAAvB,OAAjC,EAAwE;AACtE,UAAIK,UAAU,KAAKH,iBAAnB,EAAsC;AACpCM,QAAAA,aAAa,GAAG,IAAhB;AACD,OAHqE,CAKtE;AACA;;;AACAH,MAAAA,UAAU,IAAI,CAAd,CAPsE,CAStE;AACA;AACA;AACA;;AACAE,MAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAI/F,UAAU,GAAGX,YAAjB;;AACA,QAAMsC,OAAO,qBAAQvC,IAAR,CAAb;;AACA,QAAI8G,WAAJ,EAAiB;AACf;AACAvE,MAAAA,OAAO,CAAC9B,QAAR,GAAmB8B,OAAO,CAAC9B,QAAR,CAAiBgB,GAAjB,CAAqB,UAAAC,KAAK,EAAI;AAC/C,YAAMC,SAAS,GAAG8D,IAAI,CAAC;AACrBzF,UAAAA,IAAI,EAAE0B,KADe;AAErBzB,UAAAA,YAAY,EAAEW,UAAU,GAAG,CAFN;AAGrBT,UAAAA,IAAI,EAAEI;AAHe,SAAD,CAAtB,CAD+C,CAO/C;AACA;AACA;AACA;AACA;;AACA,YAAIoB,SAAS,CAAC3B,IAAV,CAAeU,QAAnB,EAA6B;AAC3BE,UAAAA,UAAU,GAAGe,SAAS,CAACnB,SAAvB;AACD,SAFD,MAEO;AACLI,UAAAA,UAAU,IAAI,CAAd;AACD;;AAED,YAAIe,SAAS,CAAC+E,OAAV,CAAkB5F,MAAlB,GAA2B,CAA3B,IAAgCa,SAAS,CAACiF,aAA9C,EAA6D;AAC3DF,UAAAA,OAAO,gCAAOA,OAAP,sBAAmB/E,SAAS,CAAC+E,OAA7B,EAAP;;AACA,cAAI/E,SAAS,CAACiF,aAAd,EAA6B;AAC3BA,YAAAA,aAAa,GAAG,IAAhB;AACD,WAJ0D,CAM3D;AACA;;;AACA,cACGL,mBAAmB,IAAI5E,SAAS,CAAC+E,OAAV,CAAkB5F,MAAlB,GAA2B,CAAnD,IACC,CAACyF,mBAAmB,IAAIC,qBAAxB,KACC7E,SAAS,CAACiF,aAHd,EAIE;AACArE,YAAAA,OAAO,CAAC7B,QAAR,GAAmB,IAAnB;AACD;AACF;;AAED,eAAOiB,SAAS,CAAC3B,IAAjB;AACD,OApCkB,CAAnB;AAqCD,KA/EuE,CAiFxE;;;AACA,QAAI,CAACM,YAAD,IAAiB,CAACiC,OAAO,CAAC7B,QAA9B,EAAwC;AACtCgG,MAAAA,OAAO,GAAGA,OAAO,CAACjF,GAAR,CAAY,UAAAsF,KAAK;AAAA,iCACtBA,KADsB;AAEzBvG,UAAAA,SAAS,EAAE;AAFc;AAAA,OAAjB,CAAV;AAID,KAvFuE,CAyFxE;AACA;;;AACA,QAAImG,WAAJ,EAAiB;AACfD,MAAAA,OAAO,sBAASG,SAAT;AAAoB7G,QAAAA,IAAI,EAAEuC;AAA1B,oCAAwCmE,OAAxC,EAAP;AACD;;AAED,WAAO;AACL1G,MAAAA,IAAI,EAAE0G,OAAO,CAAC5F,MAAR,GAAiB,CAAjB,GAAqByB,OAArB,GAA+BvC,IADhC;AAEL0G,MAAAA,OAAO,EAAPA,OAFK;AAGLE,MAAAA,aAAa,EAAbA,aAHK;AAILpG,MAAAA,SAAS,EAAEI;AAJN,KAAP;AAMD,GArGD;;AAuGA,MAAMI,MAAM,GAAGyE,IAAI,CAAC;AAClBzF,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEoB;AAAZ,KADY;AAElBvB,IAAAA,YAAY,EAAE,IAFI;AAGlBL,IAAAA,YAAY,EAAE,CAAC;AAHG,GAAD,CAAnB;AAMA,SAAO;AACLyG,IAAAA,OAAO,EAAE1F,MAAM,CAAC0F,OADX;AAEL7E,IAAAA,QAAQ,EAAEb,MAAM,CAAChB,IAAP,CAAYS;AAFjB,GAAP;AAID;;;;;;;;;;;;;AAED,OAAO,SAASuG,UAAT,CAAoBC,GAApB,EAAyB;AAC9B,MAAIC,QAAQ,GAAGD,GAAG,IAAI,EAAtB,CAD8B,CAG9B;;AACA,MAAIE,KAAK,GAAG,EAAZ,CAJ8B,CAM9B;;AACA,MAAIC,KAAK,GAAG,EAAZ,CAP8B,CAS9B;;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAItG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmG,QAAQ,CAACpG,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,QAAMuG,CAAC,GAAGJ,QAAQ,CAACnG,CAAD,CAAlB;;AAEA,QAAI,CAACuG,CAAL,EAAQ;AACN;AACD;;AAED,QAAMC,SAAS,GAAGD,CAAC,CAAC7G,QAAF,IAAc,EAAhC;AAEA6G,IAAAA,CAAC,CAACE,OAAF,GAAY,CAAZ;AAEAH,IAAAA,IAAI,CAACtC,IAAL,CAAUuC,CAAV;AACAF,IAAAA,KAAK,CAACrC,IAAN,CAAWuC,CAAX;;AAEA,QAAIC,SAAS,CAACzG,MAAV,GAAmB,CAAvB,EAA0B;AACxB2G,MAAAA,WAAW,CAACH,CAAD,EAAI,CAAJ,CAAX;AACD,KAFD,MAEO;AACLH,MAAAA,KAAK,CAACpC,IAAN,CAAWuC,CAAX;AACD;AACF;;AAED,WAASG,WAAT,CAAqBH,CAArB,EAAwB5C,KAAxB,EAA+B;AAC7B,QAAMgD,OAAO,GAAGJ,CAAC,CAAC7G,QAAF,IAAc,EAA9B;;AAEA,SAAK,IAAIM,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG2G,OAAO,CAAC5G,MAA5B,EAAoCC,EAAC,EAArC,EAAyC;AACvC,UAAMuG,EAAC,GAAGI,OAAO,CAAC3G,EAAD,CAAjB;;AACA,UAAMwG,UAAS,GAAGD,EAAC,CAAC7G,QAAF,IAAc,EAAhC;;AAEA6G,MAAAA,EAAC,CAACE,OAAF,GAAY9C,KAAK,GAAG,CAApB;AAEA2C,MAAAA,IAAI,CAACtC,IAAL,CAAUuC,EAAV;;AAEA,UAAIC,UAAS,CAACzG,MAAV,GAAmB,CAAvB,EAA0B;AACxB2G,QAAAA,WAAW,CAACH,EAAD,EAAI5C,KAAK,GAAG,CAAZ,CAAX;AACD,OAFD,MAEO;AACLyC,QAAAA,KAAK,CAACpC,IAAN,CAAWuC,EAAX;AACD;AACF;AACF;;AAED,SAAO;AAAED,IAAAA,IAAI,EAAJA,IAAF;AAAQF,IAAAA,KAAK,EAALA,KAAR;AAAeC,IAAAA,KAAK,EAALA;AAAf,GAAP;AACD;;;;;;;;;;;;;AAED,OAAO,SAASO,uBAAT,CAAiCN,IAAjC,EAAkE;AAAA,MAA3BO,YAA2B,uEAAZ,EAAY;AAAA,MAARC,MAAQ;AACvE,MAAIZ,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIlG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsG,IAAI,CAACvG,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIuG,CAAC,GAAGD,IAAI,CAACtG,CAAD,CAAZ;AAEAuG,IAAAA,CAAC,CAACE,OAAF,GAAY,CAAZ;AAEAP,IAAAA,GAAG,CAAClC,IAAJ,CAASuC,CAAT;;AAEA,QAAIM,YAAY,CAACE,OAAb,CAAqBR,CAAC,CAACO,MAAD,CAAtB,IAAkC,CAAC,CAAvC,EAA0C;AACxC,UAAIP,CAAC,CAAC7G,QAAN,EAAgB;AACdsH,QAAAA,WAAW,CAACT,CAAD,EAAI,CAAJ,CAAX;AACD;AACF;AACF;;AAED,WAASS,WAAT,CAAqBC,CAArB,EAAwBtD,KAAxB,EAA+B;AAC7B,QAAIuD,IAAI,GAAGD,CAAC,CAACvH,QAAb;;AACA,SAAK,IAAIM,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGkH,IAAI,CAACnH,MAAzB,EAAiCC,GAAC,EAAlC,EAAsC;AACpC,UAAIuG,GAAC,GAAGW,IAAI,CAAClH,GAAD,CAAZ;AACAuG,MAAAA,GAAC,CAACE,OAAF,GAAY9C,KAAK,GAAG,CAApB;AACAuC,MAAAA,GAAG,CAAClC,IAAJ,CAASuC,GAAT;;AAEA,UAAIM,YAAY,CAACE,OAAb,CAAqBR,GAAC,CAACO,MAAD,CAAtB,IAAkC,CAAC,CAAvC,EAA0C;AACxC,YAAIP,GAAC,CAAC7G,QAAN,EAAgB;AACdsH,UAAAA,WAAW,CAACT,GAAD,EAAI5C,KAAK,GAAG,CAAZ,CAAX;AACD;AACF;AACF;AACF;;AAED,SAAOuC,GAAP;AACD;;;;;;;;;;;;;AAED,OAAO,SAASiB,iBAAT,GAA6B;AAClC,MAAIC,SAAS,GAAGC,SAAS,CAACD,SAA1B,CADkC,CACG;;AAErC,MAAIA,SAAS,CAACL,OAAV,CAAkB,QAAlB,IAA8B,CAAC,CAAnC,EAAsC;AACpC,WAAO,CAAP;AACD;;AAED,MAAIO,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAT;AAAA,MACEC,MAAM,GAAG;AACPC,IAAAA,KAAK,EAAE,OADA;AAEPC,IAAAA,MAAM,EAAE,OAFD;AAGPC,IAAAA,SAAS,EAAE;AAHJ,GADX;AAAA,MAME5H,CANF;AAAA,MAOE6H,cAPF;;AASA,OAAK7H,CAAL,IAAUyH,MAAV,EAAkB;AAChBH,IAAAA,EAAE,CAACQ,KAAH,CAAS9H,CAAT,IAAcyH,MAAM,CAACzH,CAAD,CAApB;AACD;;AACDuH,EAAAA,QAAQ,CAACQ,IAAT,CAAcC,WAAd,CAA0BV,EAA1B;AACAO,EAAAA,cAAc,GAAGP,EAAE,CAACW,WAAH,GAAiBX,EAAE,CAACY,WAArC;AACAZ,EAAAA,EAAE,CAACa,MAAH;AAEA,SAAON,cAAP;AACD;;;;;;;;;;;;;;;;;;;;;;0BA/xCQ9I,iC;0BAuDOmB,kB;0BA+BPC,e;0BAuFAK,c;0BAsEOK,mB;0BAsCAM,yB;0BAwCAE,I;0BAiCAX,G;0BA8BAY,oB;0BAoBAC,gB;0BAiGAQ,gB;0BA4BAC,U;0BAuCAI,a;0BAyCAG,kB;0BAiFPQ,sB;0BA8LOW,U;0BA6DAG,mB;0BAiCAI,mB;0BAgDAW,Y;0BAkBAI,Q;0BAgCAI,I;0BA6HAa,U;0BAuDAW,uB;0BAmCAO,iB","sourcesContent":["/**\r\n * Performs a depth-first traversal over all of the node descendants,\r\n * incrementing currentIndex by 1 for each\r\n */\r\nfunction getNodeDataAtTreeIndexOrNextIndex({\r\n  targetIndex,\r\n  node,\r\n  currentIndex,\r\n  getNodeKey,\r\n  path = [],\r\n  lowerSiblingCounts = [],\r\n  ignoreCollapsed = true,\r\n  isPseudoRoot = false\r\n}) {\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = !isPseudoRoot\r\n    ? [...path, getNodeKey({ node, treeIndex: currentIndex })]\r\n    : [];\r\n\r\n  // Return target node when found\r\n  if (currentIndex === targetIndex) {\r\n    return {\r\n      node,\r\n      lowerSiblingCounts,\r\n      path: selfPath\r\n    };\r\n  }\r\n\r\n  // Add one and continue for nodes with no children or hidden children\r\n  if (!node.children || (ignoreCollapsed && node.expanded !== true)) {\r\n    return { nextIndex: currentIndex + 1 };\r\n  }\r\n\r\n  // Iterate over each child and their descendants and return the\r\n  // target node if childIndex reaches the targetIndex\r\n  let childIndex = currentIndex + 1;\r\n  const childCount = node.children.length;\r\n  for (let i = 0; i < childCount; i += 1) {\r\n    const result = getNodeDataAtTreeIndexOrNextIndex({\r\n      ignoreCollapsed,\r\n      getNodeKey,\r\n      targetIndex,\r\n      node: node.children[i],\r\n      currentIndex: childIndex,\r\n      lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n      path: selfPath\r\n    });\r\n\r\n    if (result.node) {\r\n      return result;\r\n    }\r\n\r\n    childIndex = result.nextIndex;\r\n  }\r\n\r\n  // If the target node is not found, return the farthest traversed index\r\n  return { nextIndex: childIndex };\r\n}\r\n\r\nexport function getDescendantCount({ node, ignoreCollapsed = true }) {\r\n  return (\r\n    getNodeDataAtTreeIndexOrNextIndex({\r\n      getNodeKey: () => {},\r\n      ignoreCollapsed,\r\n      node,\r\n      currentIndex: 0,\r\n      targetIndex: -1\r\n    }).nextIndex - 1\r\n  );\r\n}\r\n\r\n/**\r\n * Walk all descendants of the given node, depth-first\r\n *\r\n * @param {Object} args - Function parameters\r\n * @param {function} args.callback - Function to call on each node\r\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\r\n *                                        as the parent of all the nodes in the tree\r\n * @param {Object} args.node - A tree node\r\n * @param {Object=} args.parentNode - The parent node of `node`\r\n * @param {number} args.currentIndex - The treeIndex of `node`\r\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\r\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\r\n *                                             previous nodes in this path\r\n *\r\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\r\n *                                    or false if the walk should be terminated\r\n */\r\nfunction walkDescendants({\r\n  callback,\r\n  getNodeKey,\r\n  ignoreCollapsed,\r\n  isPseudoRoot = false,\r\n  node,\r\n  parentNode = null,\r\n  currentIndex,\r\n  path = [],\r\n  lowerSiblingCounts = []\r\n}) {\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = isPseudoRoot\r\n    ? []\r\n    : [...path, getNodeKey({ node, treeIndex: currentIndex })];\r\n  const selfInfo = isPseudoRoot\r\n    ? null\r\n    : {\r\n        node,\r\n        parentNode,\r\n        path: selfPath,\r\n        lowerSiblingCounts,\r\n        treeIndex: currentIndex\r\n      };\r\n\r\n  if (!isPseudoRoot) {\r\n    const callbackResult = callback(selfInfo);\r\n\r\n    // Cut walk short if the callback returned false\r\n    if (callbackResult === false) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Return self on nodes with no children or hidden children\r\n  if (\r\n    !node.children ||\r\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return currentIndex;\r\n  }\r\n\r\n  // Get all descendants\r\n  let childIndex = currentIndex;\r\n  const childCount = node.children.length;\r\n  if (typeof node.children !== \"function\") {\r\n    for (let i = 0; i < childCount; i += 1) {\r\n      childIndex = walkDescendants({\r\n        callback,\r\n        getNodeKey,\r\n        ignoreCollapsed,\r\n        node: node.children[i],\r\n        parentNode: isPseudoRoot ? null : node,\r\n        currentIndex: childIndex + 1,\r\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n        path: selfPath\r\n      });\r\n\r\n      // Cut walk short if the callback returned false\r\n      if (childIndex === false) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return childIndex;\r\n}\r\n\r\n/**\r\n * Perform a change on the given node and all its descendants, traversing the tree depth-first\r\n *\r\n * @param {Object} args - Function parameters\r\n * @param {function} args.callback - Function to call on each node\r\n * @param {function} args.getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean} args.ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} args.isPseudoRoot - If true, this node has no real data, and only serves\r\n *                                        as the parent of all the nodes in the tree\r\n * @param {Object} args.node - A tree node\r\n * @param {Object=} args.parentNode - The parent node of `node`\r\n * @param {number} args.currentIndex - The treeIndex of `node`\r\n * @param {number[]|string[]} args.path - Array of keys leading up to node to be changed\r\n * @param {number[]} args.lowerSiblingCounts - An array containing the count of siblings beneath the\r\n *                                             previous nodes in this path\r\n *\r\n * @return {number|false} nextIndex - Index of the next sibling of `node`,\r\n *                                    or false if the walk should be terminated\r\n */\r\nfunction mapDescendants({\r\n  callback,\r\n  getNodeKey,\r\n  ignoreCollapsed,\r\n  isPseudoRoot = false,\r\n  node,\r\n  parentNode = null,\r\n  currentIndex,\r\n  path = [],\r\n  lowerSiblingCounts = []\r\n}) {\r\n  const nextNode = { ...node };\r\n\r\n  // The pseudo-root is not considered in the path\r\n  const selfPath = isPseudoRoot\r\n    ? []\r\n    : [...path, getNodeKey({ node: nextNode, treeIndex: currentIndex })];\r\n  const selfInfo = {\r\n    node: nextNode,\r\n    parentNode,\r\n    path: selfPath,\r\n    lowerSiblingCounts,\r\n    treeIndex: currentIndex\r\n  };\r\n\r\n  // Return self on nodes with no children or hidden children\r\n  if (\r\n    !nextNode.children ||\r\n    (nextNode.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return {\r\n      treeIndex: currentIndex,\r\n      node: callback(selfInfo)\r\n    };\r\n  }\r\n\r\n  // Get all descendants\r\n  let childIndex = currentIndex;\r\n  const childCount = nextNode.children.length;\r\n  if (typeof nextNode.children !== \"function\") {\r\n    nextNode.children = nextNode.children.map((child, i) => {\r\n      const mapResult = mapDescendants({\r\n        callback,\r\n        getNodeKey,\r\n        ignoreCollapsed,\r\n        node: child,\r\n        parentNode: isPseudoRoot ? null : nextNode,\r\n        currentIndex: childIndex + 1,\r\n        lowerSiblingCounts: [...lowerSiblingCounts, childCount - i - 1],\r\n        path: selfPath\r\n      });\r\n      childIndex = mapResult.treeIndex;\r\n\r\n      return mapResult.node;\r\n    });\r\n  }\r\n\r\n  return {\r\n    node: callback(selfInfo),\r\n    treeIndex: childIndex\r\n  };\r\n}\r\n\r\n/**\r\n * Count all the visible (expanded) descendants in the tree data.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n *\r\n * @return {number} count\r\n */\r\nexport function getVisibleNodeCount({ treeData }) {\r\n  const traverse = node => {\r\n    if (\r\n      !node.children ||\r\n      node.expanded !== true ||\r\n      typeof node.children === \"function\"\r\n    ) {\r\n      return 1;\r\n    }\r\n\r\n    return (\r\n      1 +\r\n      node.children.reduce(\r\n        (total, currentNode) => total + traverse(currentNode),\r\n        0\r\n      )\r\n    );\r\n  };\r\n\r\n  return treeData.reduce(\r\n    (total, currentNode) => total + traverse(currentNode),\r\n    0\r\n  );\r\n}\r\n\r\n/**\r\n * Get the <targetIndex>th visible node in the tree data.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!number} targetIndex - The index of the node to search for\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n *\r\n * @return {{\r\n *      node: Object,\r\n *      path: []string|[]number,\r\n *      lowerSiblingCounts: []number\r\n *  }|null} node - The node at targetIndex, or null if not found\r\n */\r\nexport function getVisibleNodeInfoAtIndex({\r\n  treeData,\r\n  index: targetIndex,\r\n  getNodeKey\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return null;\r\n  }\r\n\r\n  // Call the tree traversal with a pseudo-root node\r\n  const result = getNodeDataAtTreeIndexOrNextIndex({\r\n    targetIndex,\r\n    getNodeKey,\r\n    node: {\r\n      children: treeData,\r\n      expanded: true\r\n    },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: [],\r\n    isPseudoRoot: true\r\n  });\r\n\r\n  if (result.node) {\r\n    return result;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Walk descendants depth-first and call a callback on each\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {function} callback - Function to call on each node\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return void\r\n */\r\nexport function walk({\r\n  treeData,\r\n  getNodeKey,\r\n  callback,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return;\r\n  }\r\n\r\n  walkDescendants({\r\n    callback,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    isPseudoRoot: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: []\r\n  });\r\n}\r\n\r\n/**\r\n * Perform a depth-first transversal of the descendants and\r\n *  make a change to every node in the tree\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {function} callback - Function to call on each node\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function map({\r\n  treeData,\r\n  getNodeKey,\r\n  callback,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return [];\r\n  }\r\n\r\n  return mapDescendants({\r\n    callback,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    isPseudoRoot: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    path: [],\r\n    lowerSiblingCounts: []\r\n  }).node.children;\r\n}\r\n\r\n/**\r\n * Expand or close every node in the tree\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {?boolean} expanded - Whether the node is expanded or not\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function toggleExpandedForAll({ treeData, expanded = true }) {\r\n  return map({\r\n    treeData,\r\n    callback: ({ node }) => ({ ...node, expanded }),\r\n    getNodeKey: ({ treeIndex }) => treeIndex,\r\n    ignoreCollapsed: false\r\n  });\r\n}\r\n\r\n/**\r\n * Replaces node at path with object, or callback-defined object\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be changed\r\n * @param {function|any} newNode - Node to replace the node at the path with, or a function producing the new node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The changed tree data\r\n */\r\nexport function changeNodeAtPath({\r\n  treeData,\r\n  path,\r\n  newNode,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  const RESULT_MISS = \"RESULT_MISS\";\r\n  const traverse = ({\r\n    isPseudoRoot = false,\r\n    node,\r\n    currentTreeIndex,\r\n    pathIndex\r\n  }) => {\r\n    if (\r\n      !isPseudoRoot &&\r\n      getNodeKey({ node, treeIndex: currentTreeIndex }) !== path[pathIndex]\r\n    ) {\r\n      return RESULT_MISS;\r\n    }\r\n\r\n    if (pathIndex >= path.length - 1) {\r\n      // If this is the final location in the path, return its changed form\r\n      return typeof newNode === \"function\"\r\n        ? newNode({ node, treeIndex: currentTreeIndex })\r\n        : newNode;\r\n    }\r\n    if (!node.children) {\r\n      // If this node is part of the path, but has no children, return the unchanged node\r\n      throw new Error(\"Path referenced children of node with no children.\");\r\n    }\r\n\r\n    let nextTreeIndex = currentTreeIndex + 1;\r\n    for (let i = 0; i < node.children.length; i += 1) {\r\n      const result = traverse({\r\n        node: node.children[i],\r\n        currentTreeIndex: nextTreeIndex,\r\n        pathIndex: pathIndex + 1\r\n      });\r\n\r\n      // If the result went down the correct path\r\n      if (result !== RESULT_MISS) {\r\n        if (result) {\r\n          // If the result was truthy (in this case, an object),\r\n          //  pass it to the next level of recursion up\r\n          return {\r\n            ...node,\r\n            children: [\r\n              ...node.children.slice(0, i),\r\n              result,\r\n              ...node.children.slice(i + 1)\r\n            ]\r\n          };\r\n        }\r\n        // If the result was falsy (returned from the newNode function), then\r\n        //  delete the node from the array.\r\n        return {\r\n          ...node,\r\n          children: [\r\n            ...node.children.slice(0, i),\r\n            ...node.children.slice(i + 1)\r\n          ]\r\n        };\r\n      }\r\n\r\n      nextTreeIndex +=\r\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\r\n    }\r\n\r\n    return RESULT_MISS;\r\n  };\r\n\r\n  // Use a pseudo-root node in the beginning traversal\r\n  const result = traverse({\r\n    node: { children: treeData },\r\n    currentTreeIndex: -1,\r\n    pathIndex: -1,\r\n    isPseudoRoot: true\r\n  });\r\n\r\n  if (result === RESULT_MISS) {\r\n    throw new Error(\"No node found at the given path.\");\r\n  }\r\n\r\n  return result.children;\r\n}\r\n\r\n/**\r\n * Removes the node at the specified path and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object[]} changedTreeData - The tree data with the node removed\r\n */\r\nexport function removeNodeAtPath({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  return changeNodeAtPath({\r\n    treeData,\r\n    path,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    newNode: null // Delete the node\r\n  });\r\n}\r\n\r\n/**\r\n * Removes the node at the specified path and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The tree data with the node removed\r\n * @return {Object} result.node - The node that was removed\r\n * @return {number} result.treeIndex - The previous treeIndex of the removed node\r\n */\r\nexport function removeNode({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  let removedNode = null;\r\n  let removedTreeIndex = null;\r\n  const nextTreeData = changeNodeAtPath({\r\n    treeData,\r\n    path,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    newNode: ({ node, treeIndex }) => {\r\n      // Store the target node and delete it from the tree\r\n      removedNode = node;\r\n      removedTreeIndex = treeIndex;\r\n\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return {\r\n    treeData: nextTreeData,\r\n    node: removedNode,\r\n    treeIndex: removedTreeIndex\r\n  };\r\n}\r\n\r\n/**\r\n * Gets the node at the specified path\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {number[]|string[]} path - Array of keys leading up to node to be deleted\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {Object|null} nodeInfo - The node info at the given path, or null if not found\r\n */\r\nexport function getNodeAtPath({\r\n  treeData,\r\n  path,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  let foundNodeInfo = null;\r\n\r\n  try {\r\n    changeNodeAtPath({\r\n      treeData,\r\n      path,\r\n      getNodeKey,\r\n      ignoreCollapsed,\r\n      newNode: ({ node, treeIndex }) => {\r\n        foundNodeInfo = { node, treeIndex };\r\n        return node;\r\n      }\r\n    });\r\n  } catch (err) {\r\n    // Ignore the error -- the null return will be explanation enough\r\n  }\r\n\r\n  return foundNodeInfo;\r\n}\r\n\r\n/**\r\n * Adds the node to the specified parent and returns the resulting treeData.\r\n *\r\n * @param {!Object[]} treeData\r\n * @param {!Object} newNode - The node to insert\r\n * @param {number|string} parentKey - The key of the to-be parentNode of the node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} expandParent - If true, expands the parentNode specified by parentPath\r\n * @param {boolean=} addAsFirstChild - If true, adds new node as first child of tree\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The updated tree data\r\n * @return {number} result.treeIndex - The tree index at which the node was inserted\r\n */\r\nexport function addNodeUnderParent({\r\n  treeData,\r\n  newNode,\r\n  parentKey = null,\r\n  getNodeKey,\r\n  ignoreCollapsed = true,\r\n  expandParent = false,\r\n  addAsFirstChild = false\r\n}) {\r\n  if (parentKey === null) {\r\n    return {\r\n      treeData: [...(treeData || []), newNode],\r\n      treeIndex: (treeData || []).length\r\n    };\r\n  }\r\n\r\n  let insertedTreeIndex = null;\r\n  let hasBeenAdded = false;\r\n  const changedTreeData = map({\r\n    treeData,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    callback: ({ node, treeIndex, path }) => {\r\n      const key = path ? path[path.length - 1] : null;\r\n      // Return nodes that are not the parent as-is\r\n      if (hasBeenAdded || key !== parentKey) {\r\n        return node;\r\n      }\r\n      hasBeenAdded = true;\r\n\r\n      const parentNode = {\r\n        ...node\r\n      };\r\n\r\n      if (expandParent) {\r\n        parentNode.expanded = true;\r\n      }\r\n\r\n      // If no children exist yet, just add the single newNode\r\n      if (!parentNode.children) {\r\n        insertedTreeIndex = treeIndex + 1;\r\n        return {\r\n          ...parentNode,\r\n          children: [newNode]\r\n        };\r\n      }\r\n\r\n      if (typeof parentNode.children === \"function\") {\r\n        throw new Error(\"Cannot add to children defined by a function\");\r\n      }\r\n\r\n      let nextTreeIndex = treeIndex + 1;\r\n      for (let i = 0; i < parentNode.children.length; i += 1) {\r\n        nextTreeIndex +=\r\n          1 +\r\n          getDescendantCount({ node: parentNode.children[i], ignoreCollapsed });\r\n      }\r\n\r\n      insertedTreeIndex = nextTreeIndex;\r\n\r\n      const children = addAsFirstChild\r\n        ? [newNode, ...parentNode.children]\r\n        : [...parentNode.children, newNode];\r\n\r\n      return {\r\n        ...parentNode,\r\n        children\r\n      };\r\n    }\r\n  });\r\n\r\n  if (!hasBeenAdded) {\r\n    throw new Error(\"No node found with the given key.\");\r\n  }\r\n\r\n  return {\r\n    treeData: changedTreeData,\r\n    treeIndex: insertedTreeIndex\r\n  };\r\n}\r\n\r\nfunction addNodeAtDepthAndIndex({\r\n  targetDepth,\r\n  minimumTreeIndex,\r\n  newNode,\r\n  ignoreCollapsed,\r\n  expandParent,\r\n  isPseudoRoot = false,\r\n  isLastChild,\r\n  node,\r\n  currentIndex,\r\n  currentDepth,\r\n  getNodeKey,\r\n  path = []\r\n}) {\r\n  const selfPath = n =>\r\n    isPseudoRoot\r\n      ? []\r\n      : [...path, getNodeKey({ node: n, treeIndex: currentIndex })];\r\n\r\n  // If the current position is the only possible place to add, add it\r\n  if (\r\n    currentIndex >= minimumTreeIndex - 1 ||\r\n    (isLastChild && !(node.children && node.children.length))\r\n  ) {\r\n    if (typeof node.children === \"function\") {\r\n      throw new Error(\"Cannot add to children defined by a function\");\r\n    } else {\r\n      const extraNodeProps = expandParent ? { expanded: true } : {};\r\n      const nextNode = {\r\n        ...node,\r\n\r\n        ...extraNodeProps,\r\n        children: node.children ? [newNode, ...node.children] : [newNode]\r\n      };\r\n\r\n      return {\r\n        node: nextNode,\r\n        nextIndex: currentIndex + 2,\r\n        insertedTreeIndex: currentIndex + 1,\r\n        parentPath: selfPath(nextNode),\r\n        parentNode: isPseudoRoot ? null : nextNode\r\n      };\r\n    }\r\n  }\r\n\r\n  // If this is the target depth for the insertion,\r\n  // i.e., where the newNode can be added to the current node's children\r\n  if (currentDepth >= targetDepth - 1) {\r\n    // Skip over nodes with no children or hidden children\r\n    if (\r\n      !node.children ||\r\n      typeof node.children === \"function\" ||\r\n      (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n    ) {\r\n      return { node, nextIndex: currentIndex + 1 };\r\n    }\r\n\r\n    // Scan over the children to see if there's a place among them that fulfills\r\n    // the minimumTreeIndex requirement\r\n    let childIndex = currentIndex + 1;\r\n    let insertedTreeIndex = null;\r\n    let insertIndex = null;\r\n    for (let i = 0; i < node.children.length; i += 1) {\r\n      // If a valid location is found, mark it as the insertion location and\r\n      // break out of the loop\r\n      if (childIndex >= minimumTreeIndex) {\r\n        insertedTreeIndex = childIndex;\r\n        insertIndex = i;\r\n        break;\r\n      }\r\n\r\n      // Increment the index by the child itself plus the number of descendants it has\r\n      childIndex +=\r\n        1 + getDescendantCount({ node: node.children[i], ignoreCollapsed });\r\n    }\r\n\r\n    // If no valid indices to add the node were found\r\n    if (insertIndex === null) {\r\n      // If the last position in this node's children is less than the minimum index\r\n      // and there are more children on the level of this node, return without insertion\r\n      if (childIndex < minimumTreeIndex && !isLastChild) {\r\n        return { node, nextIndex: childIndex };\r\n      }\r\n\r\n      // Use the last position in the children array to insert the newNode\r\n      insertedTreeIndex = childIndex;\r\n      insertIndex = node.children.length;\r\n    }\r\n\r\n    // Insert the newNode at the insertIndex\r\n    const nextNode = {\r\n      ...node,\r\n      children: [\r\n        ...node.children.slice(0, insertIndex),\r\n        newNode,\r\n        ...node.children.slice(insertIndex)\r\n      ]\r\n    };\r\n\r\n    // Return node with successful insert result\r\n    return {\r\n      node: nextNode,\r\n      nextIndex: childIndex,\r\n      insertedTreeIndex,\r\n      parentPath: selfPath(nextNode),\r\n      parentNode: isPseudoRoot ? null : nextNode\r\n    };\r\n  }\r\n\r\n  // Skip over nodes with no children or hidden children\r\n  if (\r\n    !node.children ||\r\n    typeof node.children === \"function\" ||\r\n    (node.expanded !== true && ignoreCollapsed && !isPseudoRoot)\r\n  ) {\r\n    return { node, nextIndex: currentIndex + 1 };\r\n  }\r\n\r\n  // Get all descendants\r\n  let insertedTreeIndex = null;\r\n  let pathFragment = null;\r\n  let parentNode = null;\r\n  let childIndex = currentIndex + 1;\r\n  let newChildren = node.children;\r\n  if (typeof newChildren !== \"function\") {\r\n    newChildren = newChildren.map((child, i) => {\r\n      if (insertedTreeIndex !== null) {\r\n        return child;\r\n      }\r\n\r\n      const mapResult = addNodeAtDepthAndIndex({\r\n        targetDepth,\r\n        minimumTreeIndex,\r\n        newNode,\r\n        ignoreCollapsed,\r\n        expandParent,\r\n        isLastChild: isLastChild && i === newChildren.length - 1,\r\n        node: child,\r\n        currentIndex: childIndex,\r\n        currentDepth: currentDepth + 1,\r\n        getNodeKey,\r\n        path: [] // Cannot determine the parent path until the children have been processed\r\n      });\r\n\r\n      if (\"insertedTreeIndex\" in mapResult) {\r\n        ({\r\n          insertedTreeIndex,\r\n          parentNode,\r\n          parentPath: pathFragment\r\n        } = mapResult);\r\n      }\r\n\r\n      childIndex = mapResult.nextIndex;\r\n\r\n      return mapResult.node;\r\n    });\r\n  }\r\n\r\n  const nextNode = { ...node, children: newChildren };\r\n  const result = {\r\n    node: nextNode,\r\n    nextIndex: childIndex\r\n  };\r\n\r\n  if (insertedTreeIndex !== null) {\r\n    result.insertedTreeIndex = insertedTreeIndex;\r\n    result.parentPath = [...selfPath(nextNode), ...pathFragment];\r\n    result.parentNode = parentNode;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Insert a node into the tree at the given depth, after the minimum index\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!number} depth - The depth to insert the node at (the first level of the array being depth 0)\r\n * @param {!number} minimumTreeIndex - The lowest possible treeIndex to insert the node at\r\n * @param {!Object} newNode - The node to insert into the tree\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n * @param {boolean=} expandParent - If true, expands the parent of the inserted node\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n *\r\n * @return {Object} result\r\n * @return {Object[]} result.treeData - The tree data with the node added\r\n * @return {number} result.treeIndex - The tree index at which the node was inserted\r\n * @return {number[]|string[]} result.path - Array of keys leading to the node location after insertion\r\n * @return {Object} result.parentNode - The parent node of the inserted node\r\n */\r\nexport function insertNode({\r\n  treeData,\r\n  depth: targetDepth,\r\n  minimumTreeIndex,\r\n  newNode,\r\n  getNodeKey = () => {},\r\n  ignoreCollapsed = true,\r\n  expandParent = false\r\n}) {\r\n  if (!treeData && targetDepth === 0) {\r\n    return {\r\n      treeData: [newNode],\r\n      treeIndex: 0,\r\n      path: [getNodeKey({ node: newNode, treeIndex: 0 })],\r\n      parentNode: null\r\n    };\r\n  }\r\n\r\n  const insertResult = addNodeAtDepthAndIndex({\r\n    targetDepth,\r\n    minimumTreeIndex,\r\n    newNode,\r\n    ignoreCollapsed,\r\n    expandParent,\r\n    getNodeKey,\r\n    isPseudoRoot: true,\r\n    isLastChild: true,\r\n    node: { children: treeData },\r\n    currentIndex: -1,\r\n    currentDepth: -1\r\n  });\r\n\r\n  if (!(\"insertedTreeIndex\" in insertResult)) {\r\n    throw new Error(\"No suitable position found to insert.\");\r\n  }\r\n\r\n  const treeIndex = insertResult.insertedTreeIndex;\r\n  return {\r\n    treeData: insertResult.node.children,\r\n    treeIndex,\r\n    path: [\r\n      ...insertResult.parentPath,\r\n      getNodeKey({ node: newNode, treeIndex })\r\n    ],\r\n    parentNode: insertResult.parentNode\r\n  };\r\n}\r\n\r\n/**\r\n * Get tree data flattened.\r\n *\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {boolean=} ignoreCollapsed - Ignore children of nodes without `expanded` set to `true`\r\n *\r\n * @return {{\r\n *      node: Object,\r\n *      path: []string|[]number,\r\n *      lowerSiblingCounts: []number\r\n *  }}[] nodes - The node array\r\n */\r\nexport function getFlatDataFromTree({\r\n  treeData,\r\n  getNodeKey,\r\n  ignoreCollapsed = true\r\n}) {\r\n  if (!treeData || treeData.length < 1) {\r\n    return [];\r\n  }\r\n\r\n  const flattened = [];\r\n  walk({\r\n    treeData,\r\n    getNodeKey,\r\n    ignoreCollapsed,\r\n    callback: nodeInfo => {\r\n      flattened.push(nodeInfo);\r\n    }\r\n  });\r\n\r\n  return flattened;\r\n}\r\n\r\n/**\r\n * Generate a tree structure from flat data.\r\n *\r\n * @param {!Object[]} flatData\r\n * @param {!function=} getKey - Function to get the key from the nodeData\r\n * @param {!function=} getParentKey - Function to get the parent key from the nodeData\r\n * @param {string|number=} rootKey - The value returned by `getParentKey` that corresponds to the root node.\r\n *                                  For example, if your nodes have id 1-99, you might use rootKey = 0\r\n *\r\n * @return {Object[]} treeData - The flat data represented as a tree\r\n */\r\nexport function getTreeFromFlatData({\r\n  flatData,\r\n  getKey = node => node.id,\r\n  getParentKey = node => node.parentId,\r\n  rootKey = \"0\"\r\n}) {\r\n  if (!flatData) {\r\n    return [];\r\n  }\r\n\r\n  const childrenToParents = {};\r\n  flatData.forEach(child => {\r\n    const parentKey = getParentKey(child);\r\n\r\n    if (parentKey in childrenToParents) {\r\n      childrenToParents[parentKey].push(child);\r\n    } else {\r\n      childrenToParents[parentKey] = [child];\r\n    }\r\n  });\r\n\r\n  if (!(rootKey in childrenToParents)) {\r\n    return [];\r\n  }\r\n\r\n  const trav = parent => {\r\n    const parentKey = getKey(parent);\r\n    if (parentKey in childrenToParents) {\r\n      return {\r\n        ...parent,\r\n        children: childrenToParents[parentKey].map(child => trav(child))\r\n      };\r\n    }\r\n\r\n    return { ...parent };\r\n  };\r\n\r\n  return childrenToParents[rootKey].map(child => trav(child));\r\n}\r\n\r\n/**\r\n * Check if a node is a descendant of another node.\r\n *\r\n * @param {!Object} older - Potential ancestor of younger node\r\n * @param {!Object} younger - Potential descendant of older node\r\n *\r\n * @return {boolean}\r\n */\r\nexport function isDescendant(older, younger) {\r\n  return (\r\n    !!older.children &&\r\n    typeof older.children !== \"function\" &&\r\n    older.children.some(\r\n      child => child === younger || isDescendant(child, younger)\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * Get the maximum depth of the children (the depth of the root node is 0).\r\n *\r\n * @param {!Object} node - Node in the tree\r\n * @param {?number} depth - The current depth\r\n *\r\n * @return {number} maxDepth - The deepest depth in the tree\r\n */\r\nexport function getDepth(node, depth = 0) {\r\n  if (!node.children) {\r\n    return depth;\r\n  }\r\n\r\n  if (typeof node.children === \"function\") {\r\n    return depth + 1;\r\n  }\r\n\r\n  return node.children.reduce(\r\n    (deepest, child) => Math.max(deepest, getDepth(child, depth + 1)),\r\n    depth\r\n  );\r\n}\r\n\r\n/**\r\n * Find nodes matching a search query in the tree,\r\n *\r\n * @param {!function} getNodeKey - Function to get the key from the nodeData and tree index\r\n * @param {!Object[]} treeData - Tree data\r\n * @param {?string|number} searchQuery - Function returning a boolean to indicate whether the node is a match or not\r\n * @param {!function} searchMethod - Function returning a boolean to indicate whether the node is a match or not\r\n * @param {?number} searchFocusOffset - The offset of the match to focus on\r\n *                                      (e.g., 0 focuses on the first match, 1 on the second)\r\n * @param {boolean=} expandAllMatchPaths - If true, expands the paths to any matched node\r\n * @param {boolean=} expandFocusMatchPaths - If true, expands the path to the focused node\r\n *\r\n * @return {Object[]} matches - An array of objects containing the matching `node`s, their `path`s and `treeIndex`s\r\n * @return {Object[]} treeData - The original tree data with all relevant nodes expanded.\r\n *                               If expandAllMatchPaths and expandFocusMatchPaths are both false,\r\n *                               it will be the same as the original tree data.\r\n */\r\nexport function find({\r\n  getNodeKey,\r\n  treeData,\r\n  searchQuery,\r\n  searchMethod,\r\n  searchFocusOffset,\r\n  expandAllMatchPaths = false,\r\n  expandFocusMatchPaths = true\r\n}) {\r\n  let matchCount = 0;\r\n  const trav = ({ isPseudoRoot = false, node, currentIndex, path = [] }) => {\r\n    let matches = [];\r\n    let isSelfMatch = false;\r\n    let hasFocusMatch = false;\r\n    // The pseudo-root is not considered in the path\r\n    const selfPath = isPseudoRoot\r\n      ? []\r\n      : [...path, getNodeKey({ node, treeIndex: currentIndex })];\r\n    const extraInfo = isPseudoRoot\r\n      ? null\r\n      : {\r\n          path: selfPath,\r\n          treeIndex: currentIndex\r\n        };\r\n\r\n    // Nodes with with children that aren't lazy\r\n    const hasChildren =\r\n      node.children &&\r\n      typeof node.children !== \"function\" &&\r\n      node.children.length > 0;\r\n\r\n    // Examine the current node to see if it is a match\r\n    if (!isPseudoRoot && searchMethod({ ...extraInfo, node, searchQuery })) {\r\n      if (matchCount === searchFocusOffset) {\r\n        hasFocusMatch = true;\r\n      }\r\n\r\n      // Keep track of the number of matching nodes, so we know when the searchFocusOffset\r\n      //  is reached\r\n      matchCount += 1;\r\n\r\n      // We cannot add this node to the matches right away, as it may be changed\r\n      //  during the search of the descendants. The entire node is used in\r\n      //  comparisons between nodes inside the `matches` and `treeData` results\r\n      //  of this method (`find`)\r\n      isSelfMatch = true;\r\n    }\r\n\r\n    let childIndex = currentIndex;\r\n    const newNode = { ...node };\r\n    if (hasChildren) {\r\n      // Get all descendants\r\n      newNode.children = newNode.children.map(child => {\r\n        const mapResult = trav({\r\n          node: child,\r\n          currentIndex: childIndex + 1,\r\n          path: selfPath\r\n        });\r\n\r\n        // Ignore hidden nodes by only advancing the index counter to the returned treeIndex\r\n        // if the child is expanded.\r\n        //\r\n        // The child could have been expanded from the start,\r\n        // or expanded due to a matching node being found in its descendants\r\n        if (mapResult.node.expanded) {\r\n          childIndex = mapResult.treeIndex;\r\n        } else {\r\n          childIndex += 1;\r\n        }\r\n\r\n        if (mapResult.matches.length > 0 || mapResult.hasFocusMatch) {\r\n          matches = [...matches, ...mapResult.matches];\r\n          if (mapResult.hasFocusMatch) {\r\n            hasFocusMatch = true;\r\n          }\r\n\r\n          // Expand the current node if it has descendants matching the search\r\n          // and the settings are set to do so.\r\n          if (\r\n            (expandAllMatchPaths && mapResult.matches.length > 0) ||\r\n            ((expandAllMatchPaths || expandFocusMatchPaths) &&\r\n              mapResult.hasFocusMatch)\r\n          ) {\r\n            newNode.expanded = true;\r\n          }\r\n        }\r\n\r\n        return mapResult.node;\r\n      });\r\n    }\r\n\r\n    // Cannot assign a treeIndex to hidden nodes\r\n    if (!isPseudoRoot && !newNode.expanded) {\r\n      matches = matches.map(match => ({\r\n        ...match,\r\n        treeIndex: null\r\n      }));\r\n    }\r\n\r\n    // Add this node to the matches if it fits the search criteria.\r\n    // This is performed at the last minute so newNode can be sent in its final form.\r\n    if (isSelfMatch) {\r\n      matches = [{ ...extraInfo, node: newNode }, ...matches];\r\n    }\r\n\r\n    return {\r\n      node: matches.length > 0 ? newNode : node,\r\n      matches,\r\n      hasFocusMatch,\r\n      treeIndex: childIndex\r\n    };\r\n  };\r\n\r\n  const result = trav({\r\n    node: { children: treeData },\r\n    isPseudoRoot: true,\r\n    currentIndex: -1\r\n  });\r\n\r\n  return {\r\n    matches: result.matches,\r\n    treeData: result.node.children\r\n  };\r\n}\r\n\r\nexport function treeToList(arr) {\r\n  let treeList = arr || [];\r\n\r\n  //末级节点\r\n  let leafs = [];\r\n\r\n  //根\r\n  let roots = [];\r\n\r\n  //所有节点\r\n  let list = [];\r\n\r\n  for (let i = 0; i < treeList.length; i++) {\r\n    const d = treeList[i];\r\n\r\n    if (!d) {\r\n      continue;\r\n    }\r\n\r\n    const childrens = d.children || [];\r\n\r\n    d.__depth = 0;\r\n\r\n    list.push(d);\r\n    roots.push(d);\r\n\r\n    if (childrens.length > 0) {\r\n      getChildren(d, 0);\r\n    } else {\r\n      leafs.push(d);\r\n    }\r\n  }\r\n\r\n  function getChildren(d, depth) {\r\n    const tempArr = d.children || [];\r\n\r\n    for (let i = 0; i < tempArr.length; i++) {\r\n      const d = tempArr[i];\r\n      const childrens = d.children || [];\r\n\r\n      d.__depth = depth + 1;\r\n\r\n      list.push(d);\r\n\r\n      if (childrens.length > 0) {\r\n        getChildren(d, depth + 1);\r\n      } else {\r\n        leafs.push(d);\r\n      }\r\n    }\r\n  }\r\n\r\n  return { list, leafs, roots };\r\n}\r\n\r\nexport function getDataListWithExpanded(list, expandedKeys = [], rowKey) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    let d = list[i];\r\n\r\n    d.__depth = 0;\r\n\r\n    arr.push(d);\r\n\r\n    if (expandedKeys.indexOf(d[rowKey]) > -1) {\r\n      if (d.children) {\r\n        setChildren(d, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setChildren(c, depth) {\r\n    let cArr = c.children;\r\n    for (let i = 0; i < cArr.length; i++) {\r\n      let d = cArr[i];\r\n      d.__depth = depth + 1;\r\n      arr.push(d);\r\n\r\n      if (expandedKeys.indexOf(d[rowKey]) > -1) {\r\n        if (d.children) {\r\n          setChildren(d, depth + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport function getScrollbarWidth() {\r\n  var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\r\n\r\n  if (userAgent.indexOf(\"Chrome\") > -1) {\r\n    return 6;\r\n  }\r\n\r\n  var oP = document.createElement(\"p\"),\r\n    styles = {\r\n      width: \"100px\",\r\n      height: \"100px\",\r\n      overflowY: \"scroll\"\r\n    },\r\n    i,\r\n    scrollbarWidth;\r\n\r\n  for (i in styles) {\r\n    oP.style[i] = styles[i];\r\n  }\r\n  document.body.appendChild(oP);\r\n  scrollbarWidth = oP.offsetWidth - oP.clientWidth;\r\n  oP.remove();\r\n\r\n  return scrollbarWidth;\r\n}\r\n"]}]}