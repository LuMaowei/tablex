{"remainingRequest":"/home/nexx/develop/tablex/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/nexx/develop/tablex/node_modules/babel-loader/lib/index.js??ref--5-2!/home/nexx/develop/tablex/node_modules/source-map-loader/index.js!/home/nexx/develop/tablex/examples/sticky.js","dependencies":[{"path":"/home/nexx/develop/tablex/examples/sticky.js","mtime":1556698823128},{"path":"/home/nexx/develop/tablex/node_modules/cache-loader/dist/cjs.js","mtime":1555838893487},{"path":"/home/nexx/develop/tablex/node_modules/thread-loader/dist/cjs.js","mtime":1555838894922},{"path":"/home/nexx/develop/tablex/node_modules/babel-loader/lib/index.js","mtime":1555838893306},{"path":"/home/nexx/develop/tablex/node_modules/source-map-loader/index.js","mtime":1555838894829}],"contextDependencies":[],"result":["import React from\"react\";import ReactDOM from\"react-dom\";import{VariableSizeGrid as Grid}from\"react-window\";import\"./styles.css\";// These cell sizes are arbitrary.\n// Yours should be based on the content of the cell.\nvar columnWidths=new Array(1000).fill(true).map(function(e,i){return i===0?200:75+Math.round(Math.random()*50);});var rowHeights=new Array(1000).fill(true).map(function(e,i){return i===0?60:25+Math.round(Math.random()*50);});var Cell=function Cell(_ref){var columnIndex=_ref.columnIndex,rowIndex=_ref.rowIndex,style=_ref.style;return React.createElement(\"div\",{className:columnIndex%2?rowIndex%2===0?\"GridItemOdd\":\"GridItemEven\":rowIndex%2?\"GridItemOdd\":\"GridItemEven\",style:style},\"r\",rowIndex,\", c\",columnIndex);};var Example=function Example(){return React.createElement(\"div\",null,React.createElement(\"div\",{style:{background:\"grey\",zIndex:2,top:8,left:8,height:61,width:201,position:\"fixed\"}}),React.createElement(Grid,{className:\"Grid\",columnCount:1000,columnWidth:function columnWidth(index){return columnWidths[index];},height:350,rowCount:1000,rowHeight:function rowHeight(index){return rowHeights[index];},width:500},Cell));};export default Example;if(typeof Example!=='undefined'&&Example&&Example===Object(Example)&&Object.isExtensible(Example)){Object.defineProperty(Example,'__filemeta',{enumerable:true,configurable:true,value:{name:\"Example\",filename:\"examples/sticky.js\"}});}",{"version":3,"sources":["/home/nexx/develop/tablex/examples/sticky.js"],"names":["React","ReactDOM","VariableSizeGrid","Grid","columnWidths","Array","fill","map","e","i","Math","round","random","rowHeights","Cell","columnIndex","rowIndex","style","Example","background","zIndex","top","left","height","width","position","index"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,gBAAgB,GAAIC,CAAAA,IAA7B,KAAyC,cAAzC,CAEA,MAAO,cAAP,CAEA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,GAAIC,CAAAA,KAAJ,CAAU,IAAV,EAClBC,IADkB,CACb,IADa,EAElBC,GAFkB,CAEd,SAACC,CAAD,CAAIC,CAAJ,QAAWA,CAAAA,CAAC,GAAK,CAAN,CAAU,GAAV,CAAgB,GAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,EAA3B,CAAhC,EAFc,CAArB,CAGA,GAAMC,CAAAA,UAAU,CAAG,GAAIR,CAAAA,KAAJ,CAAU,IAAV,EAChBC,IADgB,CACX,IADW,EAEhBC,GAFgB,CAEZ,SAACC,CAAD,CAAIC,CAAJ,QAAWA,CAAAA,CAAC,GAAK,CAAN,CAAU,EAAV,CAAe,GAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,EAA3B,CAA/B,EAFY,CAAnB,CAIA,GAAME,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,UAAGC,CAAAA,WAAH,MAAGA,WAAH,CAAgBC,QAAhB,MAAgBA,QAAhB,CAA0BC,KAA1B,MAA0BA,KAA1B,OACX,4BACE,SAAS,CACPF,WAAW,CAAG,CAAd,CACIC,QAAQ,CAAG,CAAX,GAAiB,CAAjB,CACE,aADF,CAEE,cAHN,CAIIA,QAAQ,CAAG,CAAX,CACA,aADA,CAEA,cARR,CAUE,KAAK,CAAEC,KAVT,MAYID,QAZJ,OAYiBD,WAZjB,CADW,EAAb,CAiBA,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SACd,gCACE,2BACE,KAAK,CAAE,CACLC,UAAU,CAAE,MADP,CAELC,MAAM,CAAE,CAFH,CAGLC,GAAG,CAAE,CAHA,CAILC,IAAI,CAAE,CAJD,CAKLC,MAAM,CAAE,EALH,CAMLC,KAAK,CAAE,GANF,CAOLC,QAAQ,CAAE,OAPL,CADT,EADF,CAaE,oBAAC,IAAD,EACE,SAAS,CAAC,MADZ,CAEE,WAAW,CAAE,IAFf,CAGE,WAAW,CAAE,qBAAAC,KAAK,QAAItB,CAAAA,YAAY,CAACsB,KAAD,CAAhB,EAHpB,CAIE,MAAM,CAAE,GAJV,CAKE,QAAQ,CAAE,IALZ,CAME,SAAS,CAAE,mBAAAA,KAAK,QAAIb,CAAAA,UAAU,CAACa,KAAD,CAAd,EANlB,CAOE,KAAK,CAAE,GAPT,EASGZ,IATH,CAbF,CADc,EAAhB,CA4BA,cAAeI,CAAAA,OAAf,C","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { VariableSizeGrid as Grid } from \"react-window\";\n\nimport \"./styles.css\";\n\n// These cell sizes are arbitrary.\n// Yours should be based on the content of the cell.\nconst columnWidths = new Array(1000)\n  .fill(true)\n  .map((e, i) => (i === 0 ? 200 : 75 + Math.round(Math.random() * 50)));\nconst rowHeights = new Array(1000)\n  .fill(true)\n  .map((e, i) => (i === 0 ? 60 : 25 + Math.round(Math.random() * 50)));\n\nconst Cell = ({ columnIndex, rowIndex, style }) => (\n  <div\n    className={\n      columnIndex % 2\n        ? rowIndex % 2 === 0\n          ? \"GridItemOdd\"\n          : \"GridItemEven\"\n        : rowIndex % 2\n        ? \"GridItemOdd\"\n        : \"GridItemEven\"\n    }\n    style={style}\n  >\n    r{rowIndex}, c{columnIndex}\n  </div>\n);\n\nconst Example = () => (\n  <div>\n    <div\n      style={{\n        background: \"grey\",\n        zIndex: 2,\n        top: 8,\n        left: 8,\n        height: 61,\n        width: 201,\n        position: \"fixed\"\n      }}\n    />\n\n    <Grid\n      className=\"Grid\"\n      columnCount={1000}\n      columnWidth={index => columnWidths[index]}\n      height={350}\n      rowCount={1000}\n      rowHeight={index => rowHeights[index]}\n      width={500}\n    >\n      {Cell}\n    </Grid>\n  </div>\n);\n\nexport default Example;\n"]}]}