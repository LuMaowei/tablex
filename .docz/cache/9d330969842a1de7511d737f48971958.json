{"remainingRequest":"E:\\WebRoot\\tablex\\tablex\\node_modules\\thread-loader\\dist\\cjs.js??ref--5-1!E:\\WebRoot\\tablex\\tablex\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--5-2!E:\\WebRoot\\tablex\\tablex\\node_modules\\source-map-loader\\index.js!E:\\WebRoot\\tablex\\tablex\\src\\base\\body.js","dependencies":[{"path":"E:\\WebRoot\\tablex\\tablex\\src\\base\\body.js","mtime":1559355624898},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1553685911267},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1554538856109},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1553685910943},{"path":"E:\\WebRoot\\tablex\\tablex\\node_modules\\source-map-loader\\index.js","mtime":1553685912297}],"contextDependencies":[],"result":["import _objectSpread from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\src\\\\base\\\\body.js\";\n\n(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { VariableSizeGrid as Grid } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport LoadingIcon from \"../components/loadingIcon\";\n\nvar TableBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TableBody, _React$Component);\n\n  function TableBody() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableBody);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableBody)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _this.gridRef = React.createRef();\n\n    _this.getColumn = function (index) {\n      var columnLeafs = _this.props.columnLeafs;\n      return columnLeafs[index];\n    };\n\n    _this.getColumnWidth = function () {\n      var columnLeafs = _this.props.columnLeafs;\n      var cw = 0;\n      columnLeafs.forEach(function (d) {\n        cw += d.width || 100;\n      });\n      return cw;\n    };\n\n    _this.columnWidth = function (index, width) {\n      var column = _this.getColumn(index);\n\n      var cw = _this.getColumnWidth();\n\n      var sw = _this.props.scrollbarWidth;\n\n      if (column) {\n        return column.width || 100;\n      }\n\n      return width - cw - sw;\n    };\n\n    _this.isLoadingChildren = function (key) {\n      var loadingKeys = _this.props.loadingKeys;\n      return loadingKeys.indexOf(key) > -1;\n    };\n\n    _this.expandableEl = function (columnIndex, rowIndex, row) {\n      var _this$props = _this.props,\n          rowIndent = _this$props.rowIndent,\n          _this$props$expandedK = _this$props.expandedKeys,\n          expandedKeys = _this$props$expandedK === void 0 ? [] : _this$props$expandedK,\n          rowKey = _this$props.rowKey;\n      var indent = (row.__depth || 0) * rowIndent;\n      var key = row[rowKey];\n\n      var isLoading = _this.isLoadingChildren(key);\n\n      var isExpand = false;\n      var icon = \"+\";\n\n      if (expandedKeys.indexOf(key) > -1) {\n        isExpand = true;\n        icon = \"-\";\n      } else {\n        isExpand = false;\n        icon = \"+\";\n      }\n\n      var iconFlag = React.createElement(\"span\", {\n        className: \"tablex-row-expand-placeholder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n\n      if (row.children) {\n        iconFlag = React.createElement(\"span\", {\n          className: \"tablex-row-expand-icon\",\n          onClick: function onClick() {\n            _this.props.onExpandChange(isExpand, key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, icon);\n      }\n\n      if (isLoading === true) {\n        iconFlag = React.createElement(LoadingIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      }\n\n      if (columnIndex === 0) {\n        return React.createElement(React.Fragment, null, indent > 0 ? React.createElement(\"span\", {\n          className: \"tablex-row-indent\",\n          style: {\n            marginLeft: indent\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }) : null, iconFlag);\n      }\n\n      return null;\n    };\n\n    _this.renderCell = function (_ref) {\n      var columnIndex = _ref.columnIndex,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style;\n      var dataSource = _this.props.dataSource;\n\n      if (dataSource.length === 0) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      }\n\n      var column = _this.getColumn(columnIndex);\n\n      var attr = {}; // if (columnIndex===0) {\n      //   attr={\n      //     position:\"sticky\",\n      //     zIndex:1,\n      //     left:0\n      //   }\n      // }\n\n      if (column) {\n        var c = column.dataIndex;\n        var row = dataSource[rowIndex];\n\n        var expandableEl = _this.expandableEl(columnIndex, rowIndex, row);\n\n        var cellData = row[c];\n        var table_cell = null;\n\n        if (typeof column.render === \"function\") {\n          table_cell = React.createElement(\"div\", {\n            className: \"tablex-cell\",\n            style: style,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, expandableEl, \" \", column.render(cellData, row, rowIndex));\n        } else {\n          table_cell = React.createElement(\"div\", {\n            className: \"tablex-cell\",\n            style: _objectSpread({}, style, attr),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, expandableEl, cellData);\n        }\n\n        return table_cell;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"tablex-cell\",\n        style: _objectSpread({}, style, {\n          borderRight: \"none\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n    };\n\n    _this.renderRow = function (_ref2) {\n      var index = _ref2.index,\n          style = _ref2.style;\n      console.log(\"renderRow\");\n      var columns = _this.props.columns || [];\n      return React.createElement(\"div\", {\n        className: \"tablex-row\",\n        style: _objectSpread({}, style),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, columns.map(function (column, columnIndex) {\n        return _this.renderCell({\n          columnIndex: columnIndex,\n          rowIndex: index,\n          style: {\n            display: \"inline-block\",\n            width: column.width\n          }\n        });\n      }));\n    };\n\n    _this.renderRow2 = function (args) {\n      console.log(\"renderRow:\", args);\n      var columns = _this.props.columns || [];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, args.rowIndex, \",\", args.columnIndex);\n    };\n\n    _this.scrollTo = function (pos) {\n      _this.gridRef.current && _this.gridRef.current.scrollTo(pos);\n    };\n\n    _this.onScroll = function (_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n      console.log(\"onScroll:\");\n\n      if (typeof _this.props.onScroll === \"function\") {\n        _this.props.onScroll({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TableBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          columns = _this$props2.columns,\n          columnLeafs = _this$props2.columnLeafs,\n          dataSource = _this$props2.dataSource,\n          style = _this$props2.style;\n      var columnWidth = 0;\n      columnLeafs.forEach(function (d) {\n        columnWidth += d.width || 100;\n      });\n      var rowCount = dataSource.length;\n      return React.createElement(AutoSizer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, function (_ref4) {\n        var height = _ref4.height,\n            width = _ref4.width;\n        var len = columnLeafs.length;\n\n        if (width > columnWidth) {\n          len = len + 1;\n        }\n\n        if (dataSource.length === 0) {\n          rowCount = 1;\n        }\n\n        return React.createElement(React.Fragment, null, React.createElement(Grid, {\n          style: _objectSpread({}, style),\n          columnCount: len,\n          columnWidth: function columnWidth(i) {\n            return _this2.columnWidth(i, width);\n          },\n          height: height,\n          rowCount: rowCount,\n          rowHeight: function rowHeight() {\n            return 35;\n          },\n          width: width,\n          onScroll: _this2.onScroll,\n          ref: _this2.gridRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, _this2.renderCell));\n      });\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return TableBody;\n}(React.Component);\n\nTableBody.defaultProps = {\n  columns: [],\n  columnLeafs: [],\n  dataSource: [],\n  rowIndent: 20,\n  expandedKeys: [],\n  loadingKeys: [],\n  scrollbarWidth: 6\n};\nTableBody.propTypes = {\n  /**\r\n   * 主要用于行展开\r\n   */\n  rowKey: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  columnLeafs: PropTypes.array.isRequired,\n  dataSource: PropTypes.array.isRequired,\n  onScroll: PropTypes.func,\n\n  /**\r\n   * @isExpand 是否展开\r\n   * @key 受影响的行数据key\r\n   */\n  onExpandChange: PropTypes.func,\n  rowIndent: PropTypes.number,\n  expandedKeys: PropTypes.array,\n  loadingKeys: PropTypes.array,\n  scrollbarWidth: PropTypes.number\n};\nvar _default = TableBody;\nexport default _default;\n\nif (typeof TableBody !== 'undefined' && TableBody && TableBody === Object(TableBody) && Object.isExtensible(TableBody)) {\n  Object.defineProperty(TableBody, '__filemeta', {\n    enumerable: true,\n    configurable: true,\n    value: {\n      name: \"TableBody\",\n      filename: \"src\\\\base\\\\body.js\"\n    }\n  });\n}\n\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TableBody, \"TableBody\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\src\\\\base\\\\body.js\");\n  reactHotLoader.register(_default, \"default\", \"E:\\\\WebRoot\\\\tablex\\\\tablex\\\\src\\\\base\\\\body.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["E:\\WebRoot\\tablex\\tablex\\src\\base\\body.js"],"names":["React","PropTypes","VariableSizeGrid","Grid","AutoSizer","LoadingIcon","TableBody","gridRef","createRef","getColumn","index","columnLeafs","props","getColumnWidth","cw","forEach","d","width","columnWidth","column","sw","scrollbarWidth","isLoadingChildren","key","loadingKeys","indexOf","expandableEl","columnIndex","rowIndex","row","rowIndent","expandedKeys","rowKey","indent","__depth","isLoading","isExpand","icon","iconFlag","children","onExpandChange","marginLeft","renderCell","style","dataSource","length","attr","c","dataIndex","cellData","table_cell","render","borderRight","renderRow","console","log","columns","map","display","renderRow2","args","scrollTo","pos","current","onScroll","scrollLeft","scrollTop","rowCount","height","len","i","Component","defaultProps","propTypes","string","isRequired","array","func","number"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { VariableSizeGrid as Grid } from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport LoadingIcon from \"../components/loadingIcon\";\r\n\r\nclass TableBody extends React.Component {\r\n  gridRef = React.createRef();\r\n\r\n  getColumn = index => {\r\n    let { columnLeafs } = this.props;\r\n\r\n    return columnLeafs[index];\r\n  };\r\n\r\n  getColumnWidth = () => {\r\n    let { columnLeafs } = this.props;\r\n\r\n    let cw = 0;\r\n    columnLeafs.forEach(d => {\r\n      cw += d.width || 100;\r\n    });\r\n\r\n    return cw;\r\n  };\r\n\r\n  columnWidth = (index, width) => {\r\n    let column = this.getColumn(index);\r\n    let cw = this.getColumnWidth();\r\n    let sw = this.props.scrollbarWidth;\r\n\r\n    if (column) {\r\n      return column.width || 100;\r\n    }\r\n\r\n    return width - cw - sw;\r\n  };\r\n\r\n  /**\r\n   * 行是否正在加载子级\r\n   */\r\n  isLoadingChildren = key => {\r\n    let { loadingKeys } = this.props;\r\n\r\n    return loadingKeys.indexOf(key) > -1;\r\n  };\r\n\r\n  expandableEl = (columnIndex, rowIndex, row) => {\r\n    let { rowIndent, expandedKeys = [], rowKey } = this.props;\r\n\r\n    let indent = (row.__depth || 0) * rowIndent;\r\n\r\n    let key = row[rowKey];\r\n\r\n    let isLoading = this.isLoadingChildren(key);\r\n\r\n    let isExpand = false;\r\n    let icon = \"+\";\r\n\r\n    if (expandedKeys.indexOf(key) > -1) {\r\n      isExpand = true;\r\n      icon = \"-\";\r\n    } else {\r\n      isExpand = false;\r\n      icon = \"+\";\r\n    }\r\n\r\n    let iconFlag = <span className=\"tablex-row-expand-placeholder\" />;\r\n\r\n    if (row.children) {\r\n      iconFlag = (\r\n        <span\r\n          className=\"tablex-row-expand-icon\"\r\n          onClick={() => {\r\n            this.props.onExpandChange(isExpand, key);\r\n          }}\r\n        >\r\n          {icon}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (isLoading === true) {\r\n      iconFlag = <LoadingIcon />;\r\n    }\r\n\r\n    if (columnIndex === 0) {\r\n      return (\r\n        <>\r\n          {indent > 0 ? (\r\n            <span\r\n              className=\"tablex-row-indent\"\r\n              style={{ marginLeft: indent }}\r\n            />\r\n          ) : null}\r\n          {iconFlag}\r\n        </>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  renderCell = ({ columnIndex, rowIndex, style }) => {\r\n    let { dataSource } = this.props;\r\n\r\n    if (dataSource.length === 0) {\r\n      return <div />;\r\n    }\r\n\r\n    let column = this.getColumn(columnIndex);\r\n\r\n    let attr = {};\r\n\r\n    // if (columnIndex===0) {\r\n    //   attr={\r\n    //     position:\"sticky\",\r\n    //     zIndex:1,\r\n    //     left:0\r\n    //   }\r\n    // }\r\n\r\n    if (column) {\r\n      let c = column.dataIndex;\r\n      let row = dataSource[rowIndex];\r\n\r\n      let expandableEl = this.expandableEl(columnIndex, rowIndex, row);\r\n\r\n      let cellData = row[c];\r\n\r\n      let table_cell = null;\r\n\r\n      if (typeof column.render === \"function\") {\r\n        table_cell = (\r\n          <div className=\"tablex-cell\" style={style}>\r\n            {expandableEl} {column.render(cellData, row, rowIndex)}\r\n          </div>\r\n        );\r\n      } else {\r\n        table_cell = (\r\n          <div className=\"tablex-cell\" style={{ ...style, ...attr }}>\r\n            {expandableEl}\r\n            {cellData}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return table_cell;\r\n    }\r\n\r\n    return (\r\n      <div className=\"tablex-cell\" style={{ ...style, borderRight: \"none\" }} />\r\n    );\r\n  };\r\n\r\n  renderRow = ({ index, style }) => {\r\n    console.log(\"renderRow\")\r\n    let columns = this.props.columns || [];\r\n    return (\r\n      <div className=\"tablex-row\" style={{ ...style }}>\r\n        {columns.map((column, columnIndex) => {\r\n          return this.renderCell({\r\n            columnIndex,\r\n            rowIndex: index,\r\n            style: { display: \"inline-block\", width: column.width }\r\n          });\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  \r\n  renderRow2 = (args) => {\r\n    console.log(\"renderRow:\",args)\r\n    let columns = this.props.columns || [];\r\n    return <div>{args.rowIndex},{args.columnIndex}</div>\r\n  };\r\n\r\n  scrollTo = pos => {\r\n    this.gridRef.current && this.gridRef.current.scrollTo(pos);\r\n  };\r\n\r\n  onScroll = ({ scrollLeft, scrollTop }) => {\r\n    console.log(\"onScroll:\");\r\n    if (typeof this.props.onScroll === \"function\") {\r\n      this.props.onScroll({ scrollLeft, scrollTop });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { columns, columnLeafs, dataSource, style } = this.props;\r\n    let columnWidth = 0;\r\n    columnLeafs.forEach(d => {\r\n      columnWidth += d.width || 100;\r\n    });\r\n\r\n    let rowCount = dataSource.length;\r\n\r\n    return (\r\n      <AutoSizer>\r\n        {({ height, width }) => {\r\n          let len = columnLeafs.length;\r\n\r\n          if (width > columnWidth) {\r\n            len = len + 1;\r\n          }\r\n\r\n          if (dataSource.length === 0) {\r\n            rowCount = 1;\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <Grid\r\n                style={{ ...style }}\r\n                columnCount={len}\r\n                columnWidth={i => this.columnWidth(i, width)}\r\n                height={height}\r\n                rowCount={rowCount}\r\n                rowHeight={() => 35}\r\n                width={width}\r\n                onScroll={this.onScroll}\r\n                ref={this.gridRef}\r\n              >\r\n                {this.renderCell}\r\n              </Grid>\r\n            </>\r\n          );\r\n        }}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nTableBody.defaultProps = {\r\n  columns: [],\r\n  columnLeafs: [],\r\n  dataSource: [],\r\n  rowIndent: 20,\r\n  expandedKeys: [],\r\n  loadingKeys: [],\r\n  scrollbarWidth: 6\r\n};\r\n\r\nTableBody.propTypes = {\r\n  /**\r\n   * 主要用于行展开\r\n   */\r\n  rowKey: PropTypes.string.isRequired,\r\n  columns: PropTypes.array.isRequired,\r\n  columnLeafs: PropTypes.array.isRequired,\r\n  dataSource: PropTypes.array.isRequired,\r\n  onScroll: PropTypes.func,\r\n\r\n  /**\r\n   * @isExpand 是否展开\r\n   * @key 受影响的行数据key\r\n   */\r\n  onExpandChange: PropTypes.func,\r\n  rowIndent: PropTypes.number,\r\n  expandedKeys: PropTypes.array,\r\n  loadingKeys: PropTypes.array,\r\n  scrollbarWidth: PropTypes.number\r\n};\r\n\r\nexport default TableBody;\r\n"]}]}